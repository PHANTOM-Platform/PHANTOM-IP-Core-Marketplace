// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dwt,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=329060,HLS_SYN_TPT=none,HLS_SYN_MEM=522,HLS_SYN_DSP=28,HLS_SYN_FF=7180,HLS_SYN_LUT=9148}" *)

module dwt (
        ap_clk,
        ap_rst_n,
        m_axi_IMAGE_IN_AWVALID,
        m_axi_IMAGE_IN_AWREADY,
        m_axi_IMAGE_IN_AWADDR,
        m_axi_IMAGE_IN_AWID,
        m_axi_IMAGE_IN_AWLEN,
        m_axi_IMAGE_IN_AWSIZE,
        m_axi_IMAGE_IN_AWBURST,
        m_axi_IMAGE_IN_AWLOCK,
        m_axi_IMAGE_IN_AWCACHE,
        m_axi_IMAGE_IN_AWPROT,
        m_axi_IMAGE_IN_AWQOS,
        m_axi_IMAGE_IN_AWREGION,
        m_axi_IMAGE_IN_AWUSER,
        m_axi_IMAGE_IN_WVALID,
        m_axi_IMAGE_IN_WREADY,
        m_axi_IMAGE_IN_WDATA,
        m_axi_IMAGE_IN_WSTRB,
        m_axi_IMAGE_IN_WLAST,
        m_axi_IMAGE_IN_WID,
        m_axi_IMAGE_IN_WUSER,
        m_axi_IMAGE_IN_ARVALID,
        m_axi_IMAGE_IN_ARREADY,
        m_axi_IMAGE_IN_ARADDR,
        m_axi_IMAGE_IN_ARID,
        m_axi_IMAGE_IN_ARLEN,
        m_axi_IMAGE_IN_ARSIZE,
        m_axi_IMAGE_IN_ARBURST,
        m_axi_IMAGE_IN_ARLOCK,
        m_axi_IMAGE_IN_ARCACHE,
        m_axi_IMAGE_IN_ARPROT,
        m_axi_IMAGE_IN_ARQOS,
        m_axi_IMAGE_IN_ARREGION,
        m_axi_IMAGE_IN_ARUSER,
        m_axi_IMAGE_IN_RVALID,
        m_axi_IMAGE_IN_RREADY,
        m_axi_IMAGE_IN_RDATA,
        m_axi_IMAGE_IN_RLAST,
        m_axi_IMAGE_IN_RID,
        m_axi_IMAGE_IN_RUSER,
        m_axi_IMAGE_IN_RRESP,
        m_axi_IMAGE_IN_BVALID,
        m_axi_IMAGE_IN_BREADY,
        m_axi_IMAGE_IN_BRESP,
        m_axi_IMAGE_IN_BID,
        m_axi_IMAGE_IN_BUSER,
        m_axi_IMAGE_OUT0_AWVALID,
        m_axi_IMAGE_OUT0_AWREADY,
        m_axi_IMAGE_OUT0_AWADDR,
        m_axi_IMAGE_OUT0_AWID,
        m_axi_IMAGE_OUT0_AWLEN,
        m_axi_IMAGE_OUT0_AWSIZE,
        m_axi_IMAGE_OUT0_AWBURST,
        m_axi_IMAGE_OUT0_AWLOCK,
        m_axi_IMAGE_OUT0_AWCACHE,
        m_axi_IMAGE_OUT0_AWPROT,
        m_axi_IMAGE_OUT0_AWQOS,
        m_axi_IMAGE_OUT0_AWREGION,
        m_axi_IMAGE_OUT0_AWUSER,
        m_axi_IMAGE_OUT0_WVALID,
        m_axi_IMAGE_OUT0_WREADY,
        m_axi_IMAGE_OUT0_WDATA,
        m_axi_IMAGE_OUT0_WSTRB,
        m_axi_IMAGE_OUT0_WLAST,
        m_axi_IMAGE_OUT0_WID,
        m_axi_IMAGE_OUT0_WUSER,
        m_axi_IMAGE_OUT0_ARVALID,
        m_axi_IMAGE_OUT0_ARREADY,
        m_axi_IMAGE_OUT0_ARADDR,
        m_axi_IMAGE_OUT0_ARID,
        m_axi_IMAGE_OUT0_ARLEN,
        m_axi_IMAGE_OUT0_ARSIZE,
        m_axi_IMAGE_OUT0_ARBURST,
        m_axi_IMAGE_OUT0_ARLOCK,
        m_axi_IMAGE_OUT0_ARCACHE,
        m_axi_IMAGE_OUT0_ARPROT,
        m_axi_IMAGE_OUT0_ARQOS,
        m_axi_IMAGE_OUT0_ARREGION,
        m_axi_IMAGE_OUT0_ARUSER,
        m_axi_IMAGE_OUT0_RVALID,
        m_axi_IMAGE_OUT0_RREADY,
        m_axi_IMAGE_OUT0_RDATA,
        m_axi_IMAGE_OUT0_RLAST,
        m_axi_IMAGE_OUT0_RID,
        m_axi_IMAGE_OUT0_RUSER,
        m_axi_IMAGE_OUT0_RRESP,
        m_axi_IMAGE_OUT0_BVALID,
        m_axi_IMAGE_OUT0_BREADY,
        m_axi_IMAGE_OUT0_BRESP,
        m_axi_IMAGE_OUT0_BID,
        m_axi_IMAGE_OUT0_BUSER,
        m_axi_IMAGE_OUT1_AWVALID,
        m_axi_IMAGE_OUT1_AWREADY,
        m_axi_IMAGE_OUT1_AWADDR,
        m_axi_IMAGE_OUT1_AWID,
        m_axi_IMAGE_OUT1_AWLEN,
        m_axi_IMAGE_OUT1_AWSIZE,
        m_axi_IMAGE_OUT1_AWBURST,
        m_axi_IMAGE_OUT1_AWLOCK,
        m_axi_IMAGE_OUT1_AWCACHE,
        m_axi_IMAGE_OUT1_AWPROT,
        m_axi_IMAGE_OUT1_AWQOS,
        m_axi_IMAGE_OUT1_AWREGION,
        m_axi_IMAGE_OUT1_AWUSER,
        m_axi_IMAGE_OUT1_WVALID,
        m_axi_IMAGE_OUT1_WREADY,
        m_axi_IMAGE_OUT1_WDATA,
        m_axi_IMAGE_OUT1_WSTRB,
        m_axi_IMAGE_OUT1_WLAST,
        m_axi_IMAGE_OUT1_WID,
        m_axi_IMAGE_OUT1_WUSER,
        m_axi_IMAGE_OUT1_ARVALID,
        m_axi_IMAGE_OUT1_ARREADY,
        m_axi_IMAGE_OUT1_ARADDR,
        m_axi_IMAGE_OUT1_ARID,
        m_axi_IMAGE_OUT1_ARLEN,
        m_axi_IMAGE_OUT1_ARSIZE,
        m_axi_IMAGE_OUT1_ARBURST,
        m_axi_IMAGE_OUT1_ARLOCK,
        m_axi_IMAGE_OUT1_ARCACHE,
        m_axi_IMAGE_OUT1_ARPROT,
        m_axi_IMAGE_OUT1_ARQOS,
        m_axi_IMAGE_OUT1_ARREGION,
        m_axi_IMAGE_OUT1_ARUSER,
        m_axi_IMAGE_OUT1_RVALID,
        m_axi_IMAGE_OUT1_RREADY,
        m_axi_IMAGE_OUT1_RDATA,
        m_axi_IMAGE_OUT1_RLAST,
        m_axi_IMAGE_OUT1_RID,
        m_axi_IMAGE_OUT1_RUSER,
        m_axi_IMAGE_OUT1_RRESP,
        m_axi_IMAGE_OUT1_BVALID,
        m_axi_IMAGE_OUT1_BREADY,
        m_axi_IMAGE_OUT1_BRESP,
        m_axi_IMAGE_OUT1_BID,
        m_axi_IMAGE_OUT1_BUSER,
        m_axi_IMAGE_OUT2_AWVALID,
        m_axi_IMAGE_OUT2_AWREADY,
        m_axi_IMAGE_OUT2_AWADDR,
        m_axi_IMAGE_OUT2_AWID,
        m_axi_IMAGE_OUT2_AWLEN,
        m_axi_IMAGE_OUT2_AWSIZE,
        m_axi_IMAGE_OUT2_AWBURST,
        m_axi_IMAGE_OUT2_AWLOCK,
        m_axi_IMAGE_OUT2_AWCACHE,
        m_axi_IMAGE_OUT2_AWPROT,
        m_axi_IMAGE_OUT2_AWQOS,
        m_axi_IMAGE_OUT2_AWREGION,
        m_axi_IMAGE_OUT2_AWUSER,
        m_axi_IMAGE_OUT2_WVALID,
        m_axi_IMAGE_OUT2_WREADY,
        m_axi_IMAGE_OUT2_WDATA,
        m_axi_IMAGE_OUT2_WSTRB,
        m_axi_IMAGE_OUT2_WLAST,
        m_axi_IMAGE_OUT2_WID,
        m_axi_IMAGE_OUT2_WUSER,
        m_axi_IMAGE_OUT2_ARVALID,
        m_axi_IMAGE_OUT2_ARREADY,
        m_axi_IMAGE_OUT2_ARADDR,
        m_axi_IMAGE_OUT2_ARID,
        m_axi_IMAGE_OUT2_ARLEN,
        m_axi_IMAGE_OUT2_ARSIZE,
        m_axi_IMAGE_OUT2_ARBURST,
        m_axi_IMAGE_OUT2_ARLOCK,
        m_axi_IMAGE_OUT2_ARCACHE,
        m_axi_IMAGE_OUT2_ARPROT,
        m_axi_IMAGE_OUT2_ARQOS,
        m_axi_IMAGE_OUT2_ARREGION,
        m_axi_IMAGE_OUT2_ARUSER,
        m_axi_IMAGE_OUT2_RVALID,
        m_axi_IMAGE_OUT2_RREADY,
        m_axi_IMAGE_OUT2_RDATA,
        m_axi_IMAGE_OUT2_RLAST,
        m_axi_IMAGE_OUT2_RID,
        m_axi_IMAGE_OUT2_RUSER,
        m_axi_IMAGE_OUT2_RRESP,
        m_axi_IMAGE_OUT2_BVALID,
        m_axi_IMAGE_OUT2_BREADY,
        m_axi_IMAGE_OUT2_BRESP,
        m_axi_IMAGE_OUT2_BID,
        m_axi_IMAGE_OUT2_BUSER,
        m_axi_IMAGE_OUT3_AWVALID,
        m_axi_IMAGE_OUT3_AWREADY,
        m_axi_IMAGE_OUT3_AWADDR,
        m_axi_IMAGE_OUT3_AWID,
        m_axi_IMAGE_OUT3_AWLEN,
        m_axi_IMAGE_OUT3_AWSIZE,
        m_axi_IMAGE_OUT3_AWBURST,
        m_axi_IMAGE_OUT3_AWLOCK,
        m_axi_IMAGE_OUT3_AWCACHE,
        m_axi_IMAGE_OUT3_AWPROT,
        m_axi_IMAGE_OUT3_AWQOS,
        m_axi_IMAGE_OUT3_AWREGION,
        m_axi_IMAGE_OUT3_AWUSER,
        m_axi_IMAGE_OUT3_WVALID,
        m_axi_IMAGE_OUT3_WREADY,
        m_axi_IMAGE_OUT3_WDATA,
        m_axi_IMAGE_OUT3_WSTRB,
        m_axi_IMAGE_OUT3_WLAST,
        m_axi_IMAGE_OUT3_WID,
        m_axi_IMAGE_OUT3_WUSER,
        m_axi_IMAGE_OUT3_ARVALID,
        m_axi_IMAGE_OUT3_ARREADY,
        m_axi_IMAGE_OUT3_ARADDR,
        m_axi_IMAGE_OUT3_ARID,
        m_axi_IMAGE_OUT3_ARLEN,
        m_axi_IMAGE_OUT3_ARSIZE,
        m_axi_IMAGE_OUT3_ARBURST,
        m_axi_IMAGE_OUT3_ARLOCK,
        m_axi_IMAGE_OUT3_ARCACHE,
        m_axi_IMAGE_OUT3_ARPROT,
        m_axi_IMAGE_OUT3_ARQOS,
        m_axi_IMAGE_OUT3_ARREGION,
        m_axi_IMAGE_OUT3_ARUSER,
        m_axi_IMAGE_OUT3_RVALID,
        m_axi_IMAGE_OUT3_RREADY,
        m_axi_IMAGE_OUT3_RDATA,
        m_axi_IMAGE_OUT3_RLAST,
        m_axi_IMAGE_OUT3_RID,
        m_axi_IMAGE_OUT3_RUSER,
        m_axi_IMAGE_OUT3_RRESP,
        m_axi_IMAGE_OUT3_BVALID,
        m_axi_IMAGE_OUT3_BREADY,
        m_axi_IMAGE_OUT3_BRESP,
        m_axi_IMAGE_OUT3_BID,
        m_axi_IMAGE_OUT3_BUSER,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_pp0_stage0 = 26'd512;
parameter    ap_ST_fsm_state13 = 26'd1024;
parameter    ap_ST_fsm_state14 = 26'd2048;
parameter    ap_ST_fsm_state15 = 26'd4096;
parameter    ap_ST_fsm_state16 = 26'd8192;
parameter    ap_ST_fsm_state17 = 26'd16384;
parameter    ap_ST_fsm_state18 = 26'd32768;
parameter    ap_ST_fsm_state19 = 26'd65536;
parameter    ap_ST_fsm_state20 = 26'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 26'd262144;
parameter    ap_ST_fsm_state24 = 26'd524288;
parameter    ap_ST_fsm_pp2_stage0 = 26'd1048576;
parameter    ap_ST_fsm_state56 = 26'd2097152;
parameter    ap_ST_fsm_state57 = 26'd4194304;
parameter    ap_ST_fsm_state58 = 26'd8388608;
parameter    ap_ST_fsm_state59 = 26'd16777216;
parameter    ap_ST_fsm_state60 = 26'd33554432;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT0_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT0_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT0_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT0_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT0_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT0_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT0_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT0_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT0_CACHE_VALUE = 3;
parameter    C_M_AXI_IMAGE_OUT1_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT1_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT1_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT1_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT1_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT1_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT1_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT1_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT1_CACHE_VALUE = 3;
parameter    C_M_AXI_IMAGE_OUT2_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT2_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT2_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT2_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT2_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT2_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT2_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT2_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT2_CACHE_VALUE = 3;
parameter    C_M_AXI_IMAGE_OUT3_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT3_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT3_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT3_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT3_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT3_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT3_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT3_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT3_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT3_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT3_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_IN_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_OUT0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_OUT1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_OUT2_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_OUT3_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IMAGE_IN_AWVALID;
input   m_axi_IMAGE_IN_AWREADY;
output  [C_M_AXI_IMAGE_IN_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN_AWADDR;
output  [C_M_AXI_IMAGE_IN_ID_WIDTH - 1:0] m_axi_IMAGE_IN_AWID;
output  [7:0] m_axi_IMAGE_IN_AWLEN;
output  [2:0] m_axi_IMAGE_IN_AWSIZE;
output  [1:0] m_axi_IMAGE_IN_AWBURST;
output  [1:0] m_axi_IMAGE_IN_AWLOCK;
output  [3:0] m_axi_IMAGE_IN_AWCACHE;
output  [2:0] m_axi_IMAGE_IN_AWPROT;
output  [3:0] m_axi_IMAGE_IN_AWQOS;
output  [3:0] m_axi_IMAGE_IN_AWREGION;
output  [C_M_AXI_IMAGE_IN_AWUSER_WIDTH - 1:0] m_axi_IMAGE_IN_AWUSER;
output   m_axi_IMAGE_IN_WVALID;
input   m_axi_IMAGE_IN_WREADY;
output  [C_M_AXI_IMAGE_IN_DATA_WIDTH - 1:0] m_axi_IMAGE_IN_WDATA;
output  [C_M_AXI_IMAGE_IN_WSTRB_WIDTH - 1:0] m_axi_IMAGE_IN_WSTRB;
output   m_axi_IMAGE_IN_WLAST;
output  [C_M_AXI_IMAGE_IN_ID_WIDTH - 1:0] m_axi_IMAGE_IN_WID;
output  [C_M_AXI_IMAGE_IN_WUSER_WIDTH - 1:0] m_axi_IMAGE_IN_WUSER;
output   m_axi_IMAGE_IN_ARVALID;
input   m_axi_IMAGE_IN_ARREADY;
output  [C_M_AXI_IMAGE_IN_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN_ARADDR;
output  [C_M_AXI_IMAGE_IN_ID_WIDTH - 1:0] m_axi_IMAGE_IN_ARID;
output  [7:0] m_axi_IMAGE_IN_ARLEN;
output  [2:0] m_axi_IMAGE_IN_ARSIZE;
output  [1:0] m_axi_IMAGE_IN_ARBURST;
output  [1:0] m_axi_IMAGE_IN_ARLOCK;
output  [3:0] m_axi_IMAGE_IN_ARCACHE;
output  [2:0] m_axi_IMAGE_IN_ARPROT;
output  [3:0] m_axi_IMAGE_IN_ARQOS;
output  [3:0] m_axi_IMAGE_IN_ARREGION;
output  [C_M_AXI_IMAGE_IN_ARUSER_WIDTH - 1:0] m_axi_IMAGE_IN_ARUSER;
input   m_axi_IMAGE_IN_RVALID;
output   m_axi_IMAGE_IN_RREADY;
input  [C_M_AXI_IMAGE_IN_DATA_WIDTH - 1:0] m_axi_IMAGE_IN_RDATA;
input   m_axi_IMAGE_IN_RLAST;
input  [C_M_AXI_IMAGE_IN_ID_WIDTH - 1:0] m_axi_IMAGE_IN_RID;
input  [C_M_AXI_IMAGE_IN_RUSER_WIDTH - 1:0] m_axi_IMAGE_IN_RUSER;
input  [1:0] m_axi_IMAGE_IN_RRESP;
input   m_axi_IMAGE_IN_BVALID;
output   m_axi_IMAGE_IN_BREADY;
input  [1:0] m_axi_IMAGE_IN_BRESP;
input  [C_M_AXI_IMAGE_IN_ID_WIDTH - 1:0] m_axi_IMAGE_IN_BID;
input  [C_M_AXI_IMAGE_IN_BUSER_WIDTH - 1:0] m_axi_IMAGE_IN_BUSER;
output   m_axi_IMAGE_OUT0_AWVALID;
input   m_axi_IMAGE_OUT0_AWREADY;
output  [C_M_AXI_IMAGE_OUT0_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT0_AWADDR;
output  [C_M_AXI_IMAGE_OUT0_ID_WIDTH - 1:0] m_axi_IMAGE_OUT0_AWID;
output  [7:0] m_axi_IMAGE_OUT0_AWLEN;
output  [2:0] m_axi_IMAGE_OUT0_AWSIZE;
output  [1:0] m_axi_IMAGE_OUT0_AWBURST;
output  [1:0] m_axi_IMAGE_OUT0_AWLOCK;
output  [3:0] m_axi_IMAGE_OUT0_AWCACHE;
output  [2:0] m_axi_IMAGE_OUT0_AWPROT;
output  [3:0] m_axi_IMAGE_OUT0_AWQOS;
output  [3:0] m_axi_IMAGE_OUT0_AWREGION;
output  [C_M_AXI_IMAGE_OUT0_AWUSER_WIDTH - 1:0] m_axi_IMAGE_OUT0_AWUSER;
output   m_axi_IMAGE_OUT0_WVALID;
input   m_axi_IMAGE_OUT0_WREADY;
output  [C_M_AXI_IMAGE_OUT0_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT0_WDATA;
output  [C_M_AXI_IMAGE_OUT0_WSTRB_WIDTH - 1:0] m_axi_IMAGE_OUT0_WSTRB;
output   m_axi_IMAGE_OUT0_WLAST;
output  [C_M_AXI_IMAGE_OUT0_ID_WIDTH - 1:0] m_axi_IMAGE_OUT0_WID;
output  [C_M_AXI_IMAGE_OUT0_WUSER_WIDTH - 1:0] m_axi_IMAGE_OUT0_WUSER;
output   m_axi_IMAGE_OUT0_ARVALID;
input   m_axi_IMAGE_OUT0_ARREADY;
output  [C_M_AXI_IMAGE_OUT0_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT0_ARADDR;
output  [C_M_AXI_IMAGE_OUT0_ID_WIDTH - 1:0] m_axi_IMAGE_OUT0_ARID;
output  [7:0] m_axi_IMAGE_OUT0_ARLEN;
output  [2:0] m_axi_IMAGE_OUT0_ARSIZE;
output  [1:0] m_axi_IMAGE_OUT0_ARBURST;
output  [1:0] m_axi_IMAGE_OUT0_ARLOCK;
output  [3:0] m_axi_IMAGE_OUT0_ARCACHE;
output  [2:0] m_axi_IMAGE_OUT0_ARPROT;
output  [3:0] m_axi_IMAGE_OUT0_ARQOS;
output  [3:0] m_axi_IMAGE_OUT0_ARREGION;
output  [C_M_AXI_IMAGE_OUT0_ARUSER_WIDTH - 1:0] m_axi_IMAGE_OUT0_ARUSER;
input   m_axi_IMAGE_OUT0_RVALID;
output   m_axi_IMAGE_OUT0_RREADY;
input  [C_M_AXI_IMAGE_OUT0_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT0_RDATA;
input   m_axi_IMAGE_OUT0_RLAST;
input  [C_M_AXI_IMAGE_OUT0_ID_WIDTH - 1:0] m_axi_IMAGE_OUT0_RID;
input  [C_M_AXI_IMAGE_OUT0_RUSER_WIDTH - 1:0] m_axi_IMAGE_OUT0_RUSER;
input  [1:0] m_axi_IMAGE_OUT0_RRESP;
input   m_axi_IMAGE_OUT0_BVALID;
output   m_axi_IMAGE_OUT0_BREADY;
input  [1:0] m_axi_IMAGE_OUT0_BRESP;
input  [C_M_AXI_IMAGE_OUT0_ID_WIDTH - 1:0] m_axi_IMAGE_OUT0_BID;
input  [C_M_AXI_IMAGE_OUT0_BUSER_WIDTH - 1:0] m_axi_IMAGE_OUT0_BUSER;
output   m_axi_IMAGE_OUT1_AWVALID;
input   m_axi_IMAGE_OUT1_AWREADY;
output  [C_M_AXI_IMAGE_OUT1_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT1_AWADDR;
output  [C_M_AXI_IMAGE_OUT1_ID_WIDTH - 1:0] m_axi_IMAGE_OUT1_AWID;
output  [7:0] m_axi_IMAGE_OUT1_AWLEN;
output  [2:0] m_axi_IMAGE_OUT1_AWSIZE;
output  [1:0] m_axi_IMAGE_OUT1_AWBURST;
output  [1:0] m_axi_IMAGE_OUT1_AWLOCK;
output  [3:0] m_axi_IMAGE_OUT1_AWCACHE;
output  [2:0] m_axi_IMAGE_OUT1_AWPROT;
output  [3:0] m_axi_IMAGE_OUT1_AWQOS;
output  [3:0] m_axi_IMAGE_OUT1_AWREGION;
output  [C_M_AXI_IMAGE_OUT1_AWUSER_WIDTH - 1:0] m_axi_IMAGE_OUT1_AWUSER;
output   m_axi_IMAGE_OUT1_WVALID;
input   m_axi_IMAGE_OUT1_WREADY;
output  [C_M_AXI_IMAGE_OUT1_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT1_WDATA;
output  [C_M_AXI_IMAGE_OUT1_WSTRB_WIDTH - 1:0] m_axi_IMAGE_OUT1_WSTRB;
output   m_axi_IMAGE_OUT1_WLAST;
output  [C_M_AXI_IMAGE_OUT1_ID_WIDTH - 1:0] m_axi_IMAGE_OUT1_WID;
output  [C_M_AXI_IMAGE_OUT1_WUSER_WIDTH - 1:0] m_axi_IMAGE_OUT1_WUSER;
output   m_axi_IMAGE_OUT1_ARVALID;
input   m_axi_IMAGE_OUT1_ARREADY;
output  [C_M_AXI_IMAGE_OUT1_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT1_ARADDR;
output  [C_M_AXI_IMAGE_OUT1_ID_WIDTH - 1:0] m_axi_IMAGE_OUT1_ARID;
output  [7:0] m_axi_IMAGE_OUT1_ARLEN;
output  [2:0] m_axi_IMAGE_OUT1_ARSIZE;
output  [1:0] m_axi_IMAGE_OUT1_ARBURST;
output  [1:0] m_axi_IMAGE_OUT1_ARLOCK;
output  [3:0] m_axi_IMAGE_OUT1_ARCACHE;
output  [2:0] m_axi_IMAGE_OUT1_ARPROT;
output  [3:0] m_axi_IMAGE_OUT1_ARQOS;
output  [3:0] m_axi_IMAGE_OUT1_ARREGION;
output  [C_M_AXI_IMAGE_OUT1_ARUSER_WIDTH - 1:0] m_axi_IMAGE_OUT1_ARUSER;
input   m_axi_IMAGE_OUT1_RVALID;
output   m_axi_IMAGE_OUT1_RREADY;
input  [C_M_AXI_IMAGE_OUT1_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT1_RDATA;
input   m_axi_IMAGE_OUT1_RLAST;
input  [C_M_AXI_IMAGE_OUT1_ID_WIDTH - 1:0] m_axi_IMAGE_OUT1_RID;
input  [C_M_AXI_IMAGE_OUT1_RUSER_WIDTH - 1:0] m_axi_IMAGE_OUT1_RUSER;
input  [1:0] m_axi_IMAGE_OUT1_RRESP;
input   m_axi_IMAGE_OUT1_BVALID;
output   m_axi_IMAGE_OUT1_BREADY;
input  [1:0] m_axi_IMAGE_OUT1_BRESP;
input  [C_M_AXI_IMAGE_OUT1_ID_WIDTH - 1:0] m_axi_IMAGE_OUT1_BID;
input  [C_M_AXI_IMAGE_OUT1_BUSER_WIDTH - 1:0] m_axi_IMAGE_OUT1_BUSER;
output   m_axi_IMAGE_OUT2_AWVALID;
input   m_axi_IMAGE_OUT2_AWREADY;
output  [C_M_AXI_IMAGE_OUT2_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT2_AWADDR;
output  [C_M_AXI_IMAGE_OUT2_ID_WIDTH - 1:0] m_axi_IMAGE_OUT2_AWID;
output  [7:0] m_axi_IMAGE_OUT2_AWLEN;
output  [2:0] m_axi_IMAGE_OUT2_AWSIZE;
output  [1:0] m_axi_IMAGE_OUT2_AWBURST;
output  [1:0] m_axi_IMAGE_OUT2_AWLOCK;
output  [3:0] m_axi_IMAGE_OUT2_AWCACHE;
output  [2:0] m_axi_IMAGE_OUT2_AWPROT;
output  [3:0] m_axi_IMAGE_OUT2_AWQOS;
output  [3:0] m_axi_IMAGE_OUT2_AWREGION;
output  [C_M_AXI_IMAGE_OUT2_AWUSER_WIDTH - 1:0] m_axi_IMAGE_OUT2_AWUSER;
output   m_axi_IMAGE_OUT2_WVALID;
input   m_axi_IMAGE_OUT2_WREADY;
output  [C_M_AXI_IMAGE_OUT2_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT2_WDATA;
output  [C_M_AXI_IMAGE_OUT2_WSTRB_WIDTH - 1:0] m_axi_IMAGE_OUT2_WSTRB;
output   m_axi_IMAGE_OUT2_WLAST;
output  [C_M_AXI_IMAGE_OUT2_ID_WIDTH - 1:0] m_axi_IMAGE_OUT2_WID;
output  [C_M_AXI_IMAGE_OUT2_WUSER_WIDTH - 1:0] m_axi_IMAGE_OUT2_WUSER;
output   m_axi_IMAGE_OUT2_ARVALID;
input   m_axi_IMAGE_OUT2_ARREADY;
output  [C_M_AXI_IMAGE_OUT2_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT2_ARADDR;
output  [C_M_AXI_IMAGE_OUT2_ID_WIDTH - 1:0] m_axi_IMAGE_OUT2_ARID;
output  [7:0] m_axi_IMAGE_OUT2_ARLEN;
output  [2:0] m_axi_IMAGE_OUT2_ARSIZE;
output  [1:0] m_axi_IMAGE_OUT2_ARBURST;
output  [1:0] m_axi_IMAGE_OUT2_ARLOCK;
output  [3:0] m_axi_IMAGE_OUT2_ARCACHE;
output  [2:0] m_axi_IMAGE_OUT2_ARPROT;
output  [3:0] m_axi_IMAGE_OUT2_ARQOS;
output  [3:0] m_axi_IMAGE_OUT2_ARREGION;
output  [C_M_AXI_IMAGE_OUT2_ARUSER_WIDTH - 1:0] m_axi_IMAGE_OUT2_ARUSER;
input   m_axi_IMAGE_OUT2_RVALID;
output   m_axi_IMAGE_OUT2_RREADY;
input  [C_M_AXI_IMAGE_OUT2_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT2_RDATA;
input   m_axi_IMAGE_OUT2_RLAST;
input  [C_M_AXI_IMAGE_OUT2_ID_WIDTH - 1:0] m_axi_IMAGE_OUT2_RID;
input  [C_M_AXI_IMAGE_OUT2_RUSER_WIDTH - 1:0] m_axi_IMAGE_OUT2_RUSER;
input  [1:0] m_axi_IMAGE_OUT2_RRESP;
input   m_axi_IMAGE_OUT2_BVALID;
output   m_axi_IMAGE_OUT2_BREADY;
input  [1:0] m_axi_IMAGE_OUT2_BRESP;
input  [C_M_AXI_IMAGE_OUT2_ID_WIDTH - 1:0] m_axi_IMAGE_OUT2_BID;
input  [C_M_AXI_IMAGE_OUT2_BUSER_WIDTH - 1:0] m_axi_IMAGE_OUT2_BUSER;
output   m_axi_IMAGE_OUT3_AWVALID;
input   m_axi_IMAGE_OUT3_AWREADY;
output  [C_M_AXI_IMAGE_OUT3_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT3_AWADDR;
output  [C_M_AXI_IMAGE_OUT3_ID_WIDTH - 1:0] m_axi_IMAGE_OUT3_AWID;
output  [7:0] m_axi_IMAGE_OUT3_AWLEN;
output  [2:0] m_axi_IMAGE_OUT3_AWSIZE;
output  [1:0] m_axi_IMAGE_OUT3_AWBURST;
output  [1:0] m_axi_IMAGE_OUT3_AWLOCK;
output  [3:0] m_axi_IMAGE_OUT3_AWCACHE;
output  [2:0] m_axi_IMAGE_OUT3_AWPROT;
output  [3:0] m_axi_IMAGE_OUT3_AWQOS;
output  [3:0] m_axi_IMAGE_OUT3_AWREGION;
output  [C_M_AXI_IMAGE_OUT3_AWUSER_WIDTH - 1:0] m_axi_IMAGE_OUT3_AWUSER;
output   m_axi_IMAGE_OUT3_WVALID;
input   m_axi_IMAGE_OUT3_WREADY;
output  [C_M_AXI_IMAGE_OUT3_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT3_WDATA;
output  [C_M_AXI_IMAGE_OUT3_WSTRB_WIDTH - 1:0] m_axi_IMAGE_OUT3_WSTRB;
output   m_axi_IMAGE_OUT3_WLAST;
output  [C_M_AXI_IMAGE_OUT3_ID_WIDTH - 1:0] m_axi_IMAGE_OUT3_WID;
output  [C_M_AXI_IMAGE_OUT3_WUSER_WIDTH - 1:0] m_axi_IMAGE_OUT3_WUSER;
output   m_axi_IMAGE_OUT3_ARVALID;
input   m_axi_IMAGE_OUT3_ARREADY;
output  [C_M_AXI_IMAGE_OUT3_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT3_ARADDR;
output  [C_M_AXI_IMAGE_OUT3_ID_WIDTH - 1:0] m_axi_IMAGE_OUT3_ARID;
output  [7:0] m_axi_IMAGE_OUT3_ARLEN;
output  [2:0] m_axi_IMAGE_OUT3_ARSIZE;
output  [1:0] m_axi_IMAGE_OUT3_ARBURST;
output  [1:0] m_axi_IMAGE_OUT3_ARLOCK;
output  [3:0] m_axi_IMAGE_OUT3_ARCACHE;
output  [2:0] m_axi_IMAGE_OUT3_ARPROT;
output  [3:0] m_axi_IMAGE_OUT3_ARQOS;
output  [3:0] m_axi_IMAGE_OUT3_ARREGION;
output  [C_M_AXI_IMAGE_OUT3_ARUSER_WIDTH - 1:0] m_axi_IMAGE_OUT3_ARUSER;
input   m_axi_IMAGE_OUT3_RVALID;
output   m_axi_IMAGE_OUT3_RREADY;
input  [C_M_AXI_IMAGE_OUT3_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT3_RDATA;
input   m_axi_IMAGE_OUT3_RLAST;
input  [C_M_AXI_IMAGE_OUT3_ID_WIDTH - 1:0] m_axi_IMAGE_OUT3_RID;
input  [C_M_AXI_IMAGE_OUT3_RUSER_WIDTH - 1:0] m_axi_IMAGE_OUT3_RUSER;
input  [1:0] m_axi_IMAGE_OUT3_RRESP;
input   m_axi_IMAGE_OUT3_BVALID;
output   m_axi_IMAGE_OUT3_BREADY;
input  [1:0] m_axi_IMAGE_OUT3_BRESP;
input  [C_M_AXI_IMAGE_OUT3_ID_WIDTH - 1:0] m_axi_IMAGE_OUT3_BID;
input  [C_M_AXI_IMAGE_OUT3_BUSER_WIDTH - 1:0] m_axi_IMAGE_OUT3_BUSER;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] imageIn;
wire   [31:0] imageOut0;
wire   [31:0] imageOut1;
wire   [31:0] imageOut2;
wire   [31:0] imageOut3;
reg    IMAGE_IN_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    IMAGE_IN_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_909;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_944;
reg    IMAGE_OUT0_blk_n_AW;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_6_fu_571_p3;
reg    IMAGE_OUT0_blk_n_W;
reg    ap_enable_reg_pp2_iter30;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter29_exitcond_flatten_reg_973;
reg    IMAGE_OUT0_blk_n_B;
wire    ap_CS_fsm_state60;
reg    IMAGE_OUT1_blk_n_AW;
reg    IMAGE_OUT1_blk_n_W;
reg    IMAGE_OUT1_blk_n_B;
reg    IMAGE_OUT2_blk_n_AW;
reg    IMAGE_OUT2_blk_n_W;
reg    IMAGE_OUT2_blk_n_B;
reg    IMAGE_OUT3_blk_n_AW;
reg    IMAGE_OUT3_blk_n_W;
reg    IMAGE_OUT3_blk_n_B;
wire    IMAGE_IN_AWREADY;
wire    IMAGE_IN_WREADY;
reg    IMAGE_IN_ARVALID;
wire    IMAGE_IN_ARREADY;
reg   [31:0] IMAGE_IN_ARADDR;
wire    IMAGE_IN_RVALID;
reg    IMAGE_IN_RREADY;
wire   [31:0] IMAGE_IN_RDATA;
wire    IMAGE_IN_RLAST;
wire   [0:0] IMAGE_IN_RID;
wire   [0:0] IMAGE_IN_RUSER;
wire   [1:0] IMAGE_IN_RRESP;
wire    IMAGE_IN_BVALID;
wire   [1:0] IMAGE_IN_BRESP;
wire   [0:0] IMAGE_IN_BID;
wire   [0:0] IMAGE_IN_BUSER;
reg    IMAGE_OUT0_AWVALID;
wire    IMAGE_OUT0_AWREADY;
reg    IMAGE_OUT0_WVALID;
wire    IMAGE_OUT0_WREADY;
wire    IMAGE_OUT0_ARREADY;
wire    IMAGE_OUT0_RVALID;
wire   [31:0] IMAGE_OUT0_RDATA;
wire    IMAGE_OUT0_RLAST;
wire   [0:0] IMAGE_OUT0_RID;
wire   [0:0] IMAGE_OUT0_RUSER;
wire   [1:0] IMAGE_OUT0_RRESP;
wire    IMAGE_OUT0_BVALID;
reg    IMAGE_OUT0_BREADY;
wire   [1:0] IMAGE_OUT0_BRESP;
wire   [0:0] IMAGE_OUT0_BID;
wire   [0:0] IMAGE_OUT0_BUSER;
reg    IMAGE_OUT1_AWVALID;
wire    IMAGE_OUT1_AWREADY;
reg    IMAGE_OUT1_WVALID;
wire    IMAGE_OUT1_WREADY;
wire    IMAGE_OUT1_ARREADY;
wire    IMAGE_OUT1_RVALID;
wire   [31:0] IMAGE_OUT1_RDATA;
wire    IMAGE_OUT1_RLAST;
wire   [0:0] IMAGE_OUT1_RID;
wire   [0:0] IMAGE_OUT1_RUSER;
wire   [1:0] IMAGE_OUT1_RRESP;
wire    IMAGE_OUT1_BVALID;
reg    IMAGE_OUT1_BREADY;
wire   [1:0] IMAGE_OUT1_BRESP;
wire   [0:0] IMAGE_OUT1_BID;
wire   [0:0] IMAGE_OUT1_BUSER;
reg    IMAGE_OUT2_AWVALID;
wire    IMAGE_OUT2_AWREADY;
reg    IMAGE_OUT2_WVALID;
wire    IMAGE_OUT2_WREADY;
wire    IMAGE_OUT2_ARREADY;
wire    IMAGE_OUT2_RVALID;
wire   [31:0] IMAGE_OUT2_RDATA;
wire    IMAGE_OUT2_RLAST;
wire   [0:0] IMAGE_OUT2_RID;
wire   [0:0] IMAGE_OUT2_RUSER;
wire   [1:0] IMAGE_OUT2_RRESP;
wire    IMAGE_OUT2_BVALID;
reg    IMAGE_OUT2_BREADY;
wire   [1:0] IMAGE_OUT2_BRESP;
wire   [0:0] IMAGE_OUT2_BID;
wire   [0:0] IMAGE_OUT2_BUSER;
reg    IMAGE_OUT3_AWVALID;
wire    IMAGE_OUT3_AWREADY;
reg    IMAGE_OUT3_WVALID;
wire    IMAGE_OUT3_WREADY;
wire    IMAGE_OUT3_ARREADY;
wire    IMAGE_OUT3_RVALID;
wire   [31:0] IMAGE_OUT3_RDATA;
wire    IMAGE_OUT3_RLAST;
wire   [0:0] IMAGE_OUT3_RID;
wire   [0:0] IMAGE_OUT3_RUSER;
wire   [1:0] IMAGE_OUT3_RRESP;
wire    IMAGE_OUT3_BVALID;
reg    IMAGE_OUT3_BREADY;
wire   [1:0] IMAGE_OUT3_BRESP;
wire   [0:0] IMAGE_OUT3_BID;
wire   [0:0] IMAGE_OUT3_BUSER;
reg   [11:0] indvar_reg_370;
reg   [11:0] indvar1_reg_381;
reg   [16:0] indvar_flatten_reg_392;
reg   [7:0] rows1_reg_403;
reg   [11:0] cols_reg_414;
reg   [31:0] IMAGE_OUT3_addr_reg_848;
reg   [31:0] IMAGE_OUT2_addr_reg_854;
reg   [31:0] IMAGE_OUT1_addr_reg_860;
reg   [31:0] IMAGE_OUT0_addr_reg_866;
wire   [30:0] tmp_13_cast_fu_567_p1;
reg   [30:0] tmp_13_cast_reg_872;
reg    ap_sig_ioackin_IMAGE_OUT0_AWREADY;
reg    ap_sig_ioackin_IMAGE_OUT1_AWREADY;
reg    ap_sig_ioackin_IMAGE_OUT2_AWREADY;
reg    ap_sig_ioackin_IMAGE_OUT3_AWREADY;
reg    ap_block_state2_io;
wire   [6:0] tmp_10_fu_579_p1;
reg   [6:0] tmp_10_reg_882;
wire   [17:0] tmp_1_fu_583_p3;
reg   [17:0] tmp_1_reg_887;
wire   [30:0] imageIn2_sum_fu_595_p2;
reg   [30:0] imageIn2_sum_reg_892;
reg    ap_sig_ioackin_IMAGE_IN_ARREADY;
wire   [17:0] tmp_7_cast_fu_617_p1;
reg   [17:0] tmp_7_cast_reg_903;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_621_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_909;
wire   [11:0] indvar_next_fu_627_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] tmp_27_fu_637_p1;
reg   [10:0] tmp_27_reg_918;
reg   [10:0] ap_reg_pp0_iter1_tmp_27_reg_918;
reg   [6:0] tmp_9_reg_923;
reg   [6:0] ap_reg_pp0_iter1_tmp_9_reg_923;
reg   [31:0] ptr_line1_read_reg_928;
wire   [30:0] imageIn2_sum1_fu_676_p2;
reg   [30:0] imageIn2_sum1_reg_933;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond1_fu_691_p2;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond1_reg_944;
wire   [11:0] indvar_next1_fu_697_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [10:0] tmp_28_fu_707_p1;
reg   [10:0] tmp_28_reg_953;
reg   [10:0] ap_reg_pp1_iter1_tmp_28_reg_953;
reg   [6:0] tmp_19_reg_958;
reg   [6:0] ap_reg_pp1_iter1_tmp_19_reg_958;
reg   [31:0] ptr_line2_read_reg_963;
wire   [7:0] rows_1_fu_737_p2;
wire    ap_CS_fsm_state24;
wire   [0:0] exitcond_flatten_fu_743_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state25_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_state27_pp2_stage0_iter2;
wire    ap_block_state28_pp2_stage0_iter3;
wire    ap_block_state29_pp2_stage0_iter4;
wire    ap_block_state30_pp2_stage0_iter5;
wire    ap_block_state31_pp2_stage0_iter6;
wire    ap_block_state32_pp2_stage0_iter7;
wire    ap_block_state33_pp2_stage0_iter8;
wire    ap_block_state34_pp2_stage0_iter9;
wire    ap_block_state35_pp2_stage0_iter10;
wire    ap_block_state36_pp2_stage0_iter11;
wire    ap_block_state37_pp2_stage0_iter12;
wire    ap_block_state38_pp2_stage0_iter13;
wire    ap_block_state39_pp2_stage0_iter14;
wire    ap_block_state40_pp2_stage0_iter15;
wire    ap_block_state41_pp2_stage0_iter16;
wire    ap_block_state42_pp2_stage0_iter17;
wire    ap_block_state43_pp2_stage0_iter18;
wire    ap_block_state44_pp2_stage0_iter19;
wire    ap_block_state45_pp2_stage0_iter20;
wire    ap_block_state46_pp2_stage0_iter21;
wire    ap_block_state47_pp2_stage0_iter22;
wire    ap_block_state48_pp2_stage0_iter23;
wire    ap_block_state49_pp2_stage0_iter24;
wire    ap_block_state50_pp2_stage0_iter25;
wire    ap_block_state51_pp2_stage0_iter26;
wire    ap_block_state52_pp2_stage0_iter27;
wire    ap_block_state53_pp2_stage0_iter28;
wire    ap_block_state54_pp2_stage0_iter29;
wire    ap_block_state55_pp2_stage0_iter30;
reg    ap_sig_ioackin_IMAGE_OUT0_WREADY;
reg    ap_sig_ioackin_IMAGE_OUT1_WREADY;
reg    ap_sig_ioackin_IMAGE_OUT2_WREADY;
reg    ap_sig_ioackin_IMAGE_OUT3_WREADY;
reg    ap_block_state55_io;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] ap_reg_pp2_iter1_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter2_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter3_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter4_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter5_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter6_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter7_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter8_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter9_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter10_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter11_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter12_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter13_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter14_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter15_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter16_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter17_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter18_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter19_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter20_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter21_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter22_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter23_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter24_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter25_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter26_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter27_exitcond_flatten_reg_973;
reg   [0:0] ap_reg_pp2_iter28_exitcond_flatten_reg_973;
wire   [16:0] indvar_flatten_next_fu_749_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [11:0] cols_mid2_fu_769_p3;
reg   [11:0] cols_mid2_reg_982;
wire   [7:0] tmp_12_mid2_v_v_fu_777_p3;
reg   [7:0] tmp_12_mid2_v_v_reg_987;
reg   [6:0] tmp_12_mid2_v_reg_992;
reg   [6:0] ap_reg_pp2_iter1_tmp_12_mid2_v_reg_992;
wire   [10:0] tmp_13_fu_795_p1;
reg   [10:0] tmp_13_reg_998;
reg   [10:0] ap_reg_pp2_iter1_tmp_13_reg_998;
wire   [11:0] cols_1_fu_799_p2;
wire   [18:0] tmp_15_fu_819_p2;
reg   [18:0] tmp_15_reg_1008;
wire   [31:0] image_even_q0;
reg   [31:0] pixel0_reg_1033;
reg    ap_enable_reg_pp2_iter3;
wire   [31:0] image_even_q1;
reg   [31:0] pixel1_reg_1039;
wire   [31:0] image_odd_q0;
reg   [31:0] pixel2_reg_1045;
wire   [31:0] image_odd_q1;
reg   [31:0] pixel3_reg_1051;
wire   [31:0] grp_fu_425_p2;
reg   [31:0] tmp_23_reg_1057;
wire   [31:0] grp_fu_429_p2;
reg   [31:0] diff_line1_reg_1062;
reg   [31:0] ap_reg_pp2_iter12_diff_line1_reg_1062;
reg   [31:0] ap_reg_pp2_iter13_diff_line1_reg_1062;
reg   [31:0] ap_reg_pp2_iter14_diff_line1_reg_1062;
reg   [31:0] ap_reg_pp2_iter15_diff_line1_reg_1062;
reg   [31:0] ap_reg_pp2_iter16_diff_line1_reg_1062;
wire   [31:0] grp_fu_433_p2;
reg   [31:0] tmp_24_reg_1068;
wire   [31:0] grp_fu_437_p2;
reg   [31:0] diff_line2_reg_1073;
reg   [31:0] ap_reg_pp2_iter12_diff_line2_reg_1073;
reg   [31:0] ap_reg_pp2_iter13_diff_line2_reg_1073;
reg   [31:0] ap_reg_pp2_iter14_diff_line2_reg_1073;
reg   [31:0] ap_reg_pp2_iter15_diff_line2_reg_1073;
reg   [31:0] ap_reg_pp2_iter16_diff_line2_reg_1073;
wire   [31:0] grp_fu_457_p2;
reg   [31:0] sum_line1_reg_1079;
wire   [31:0] grp_fu_462_p2;
reg   [31:0] sum_line2_reg_1085;
wire   [31:0] grp_fu_441_p2;
reg   [31:0] tmp_25_reg_1091;
wire   [31:0] grp_fu_445_p2;
reg   [31:0] LH_pixel_reg_1096;
reg   [31:0] ap_reg_pp2_iter25_LH_pixel_reg_1096;
reg   [31:0] ap_reg_pp2_iter26_LH_pixel_reg_1096;
reg   [31:0] ap_reg_pp2_iter27_LH_pixel_reg_1096;
reg   [31:0] ap_reg_pp2_iter28_LH_pixel_reg_1096;
reg   [31:0] ap_reg_pp2_iter29_LH_pixel_reg_1096;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] tmp_26_reg_1101;
wire   [31:0] grp_fu_453_p2;
reg   [31:0] HH_pixel_reg_1106;
reg   [31:0] ap_reg_pp2_iter25_HH_pixel_reg_1106;
reg   [31:0] ap_reg_pp2_iter26_HH_pixel_reg_1106;
reg   [31:0] ap_reg_pp2_iter27_HH_pixel_reg_1106;
reg   [31:0] ap_reg_pp2_iter28_HH_pixel_reg_1106;
reg   [31:0] ap_reg_pp2_iter29_HH_pixel_reg_1106;
wire   [31:0] grp_fu_467_p2;
reg   [31:0] LL_pixel_reg_1111;
wire   [31:0] grp_fu_472_p2;
reg   [31:0] HL_pixel_reg_1116;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state25;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
reg    ap_enable_reg_pp2_iter23;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg    ap_enable_reg_pp2_iter26;
reg    ap_enable_reg_pp2_iter27;
reg    ap_enable_reg_pp2_iter28;
reg    ap_enable_reg_pp2_iter29;
reg   [16:0] image_even_address0;
reg    image_even_ce0;
reg    image_even_we0;
wire   [16:0] image_even_address1;
reg    image_even_ce1;
reg   [16:0] image_odd_address0;
reg    image_odd_ce0;
reg    image_odd_we0;
wire   [16:0] image_odd_address1;
reg    image_odd_ce1;
reg   [7:0] rows_reg_358;
reg   [7:0] ap_phi_mux_rows1_phi_fu_407_p4;
wire   [63:0] tmp_22_fu_662_p1;
wire   [63:0] tmp_30_fu_732_p1;
wire   [63:0] tmp_36_cast_fu_825_p1;
wire   [63:0] tmp_20_fu_842_p1;
wire   [63:0] tmp_3_fu_487_p1;
wire   [63:0] tmp_s_fu_507_p1;
wire   [63:0] tmp_2_fu_527_p1;
wire   [63:0] tmp_5_fu_547_p1;
wire   [63:0] imageIn2_sum_cast_fu_600_p1;
wire   [63:0] imageIn2_sum1_cast_fu_681_p1;
reg    ap_reg_ioackin_IMAGE_OUT0_AWREADY;
reg    ap_block_state60;
reg    ap_reg_ioackin_IMAGE_OUT1_AWREADY;
reg    ap_reg_ioackin_IMAGE_OUT2_AWREADY;
reg    ap_reg_ioackin_IMAGE_OUT3_AWREADY;
reg    ap_reg_ioackin_IMAGE_IN_ARREADY;
reg    ap_reg_ioackin_IMAGE_OUT0_WREADY;
wire    ap_block_pp2_stage0_01001;
reg    ap_reg_ioackin_IMAGE_OUT1_WREADY;
reg    ap_reg_ioackin_IMAGE_OUT2_WREADY;
reg    ap_reg_ioackin_IMAGE_OUT3_WREADY;
wire   [29:0] imageOut_fu_477_p4;
wire   [29:0] imageOut4_fu_497_p4;
wire   [29:0] imageOut5_fu_517_p4;
wire   [29:0] imageOut6_fu_537_p4;
wire   [29:0] tmp_fu_557_p4;
wire   [30:0] tmp_2_cast_fu_591_p1;
wire   [16:0] tmp_7_fu_610_p3;
wire   [17:0] indvar_cast5_fu_633_p1;
wire   [17:0] tmp_8_fu_641_p2;
wire   [17:0] tmp_21_fu_656_p3;
wire   [17:0] tmp_4_fu_667_p2;
wire   [30:0] tmp_5_cast_fu_672_p1;
wire   [17:0] indvar1_cast3_fu_703_p1;
wire   [17:0] tmp_17_fu_711_p2;
wire   [17:0] tmp_29_fu_726_p3;
wire   [0:0] tmp_11_fu_761_p3;
wire   [7:0] rows_2_fu_755_p2;
wire   [17:0] tmp_12_fu_805_p3;
wire   [18:0] tmp_34_cast_fu_812_p1;
wire   [18:0] tmp_24_cast_fu_816_p1;
wire   [10:0] tmp_16_fu_830_p2;
wire   [17:0] tmp_18_fu_835_p3;
reg    grp_fu_425_ce;
reg    grp_fu_429_ce;
reg    grp_fu_433_ce;
reg    grp_fu_437_ce;
reg    grp_fu_441_ce;
reg    grp_fu_445_ce;
reg    grp_fu_449_ce;
reg    grp_fu_453_ce;
reg    grp_fu_457_ce;
reg    grp_fu_462_ce;
reg    grp_fu_467_ce;
reg    grp_fu_472_ce;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter26 = 1'b0;
#0 ap_enable_reg_pp2_iter27 = 1'b0;
#0 ap_enable_reg_pp2_iter28 = 1'b0;
#0 ap_enable_reg_pp2_iter29 = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT0_AWREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT1_AWREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT2_AWREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT3_AWREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_IN_ARREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT0_WREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT1_WREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT2_WREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT3_WREADY = 1'b0;
end

dwt_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
dwt_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .imageIn(imageIn),
    .imageOut0(imageOut0),
    .imageOut1(imageOut1),
    .imageOut2(imageOut2),
    .imageOut3(imageOut3)
);

dwt_IMAGE_IN_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_IN_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_IN_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_IN_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_IN_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_IN_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_IN_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_IN_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_IN_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_IN_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_IN_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_IN_CACHE_VALUE ))
dwt_IMAGE_IN_m_axi_U(
    .AWVALID(m_axi_IMAGE_IN_AWVALID),
    .AWREADY(m_axi_IMAGE_IN_AWREADY),
    .AWADDR(m_axi_IMAGE_IN_AWADDR),
    .AWID(m_axi_IMAGE_IN_AWID),
    .AWLEN(m_axi_IMAGE_IN_AWLEN),
    .AWSIZE(m_axi_IMAGE_IN_AWSIZE),
    .AWBURST(m_axi_IMAGE_IN_AWBURST),
    .AWLOCK(m_axi_IMAGE_IN_AWLOCK),
    .AWCACHE(m_axi_IMAGE_IN_AWCACHE),
    .AWPROT(m_axi_IMAGE_IN_AWPROT),
    .AWQOS(m_axi_IMAGE_IN_AWQOS),
    .AWREGION(m_axi_IMAGE_IN_AWREGION),
    .AWUSER(m_axi_IMAGE_IN_AWUSER),
    .WVALID(m_axi_IMAGE_IN_WVALID),
    .WREADY(m_axi_IMAGE_IN_WREADY),
    .WDATA(m_axi_IMAGE_IN_WDATA),
    .WSTRB(m_axi_IMAGE_IN_WSTRB),
    .WLAST(m_axi_IMAGE_IN_WLAST),
    .WID(m_axi_IMAGE_IN_WID),
    .WUSER(m_axi_IMAGE_IN_WUSER),
    .ARVALID(m_axi_IMAGE_IN_ARVALID),
    .ARREADY(m_axi_IMAGE_IN_ARREADY),
    .ARADDR(m_axi_IMAGE_IN_ARADDR),
    .ARID(m_axi_IMAGE_IN_ARID),
    .ARLEN(m_axi_IMAGE_IN_ARLEN),
    .ARSIZE(m_axi_IMAGE_IN_ARSIZE),
    .ARBURST(m_axi_IMAGE_IN_ARBURST),
    .ARLOCK(m_axi_IMAGE_IN_ARLOCK),
    .ARCACHE(m_axi_IMAGE_IN_ARCACHE),
    .ARPROT(m_axi_IMAGE_IN_ARPROT),
    .ARQOS(m_axi_IMAGE_IN_ARQOS),
    .ARREGION(m_axi_IMAGE_IN_ARREGION),
    .ARUSER(m_axi_IMAGE_IN_ARUSER),
    .RVALID(m_axi_IMAGE_IN_RVALID),
    .RREADY(m_axi_IMAGE_IN_RREADY),
    .RDATA(m_axi_IMAGE_IN_RDATA),
    .RLAST(m_axi_IMAGE_IN_RLAST),
    .RID(m_axi_IMAGE_IN_RID),
    .RUSER(m_axi_IMAGE_IN_RUSER),
    .RRESP(m_axi_IMAGE_IN_RRESP),
    .BVALID(m_axi_IMAGE_IN_BVALID),
    .BREADY(m_axi_IMAGE_IN_BREADY),
    .BRESP(m_axi_IMAGE_IN_BRESP),
    .BID(m_axi_IMAGE_IN_BID),
    .BUSER(m_axi_IMAGE_IN_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IMAGE_IN_ARVALID),
    .I_ARREADY(IMAGE_IN_ARREADY),
    .I_ARADDR(IMAGE_IN_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd2048),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_IN_RVALID),
    .I_RREADY(IMAGE_IN_RREADY),
    .I_RDATA(IMAGE_IN_RDATA),
    .I_RID(IMAGE_IN_RID),
    .I_RUSER(IMAGE_IN_RUSER),
    .I_RRESP(IMAGE_IN_RRESP),
    .I_RLAST(IMAGE_IN_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IMAGE_IN_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IMAGE_IN_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(IMAGE_IN_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IMAGE_IN_BRESP),
    .I_BID(IMAGE_IN_BID),
    .I_BUSER(IMAGE_IN_BUSER)
);

dwt_IMAGE_OUT0_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_OUT0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_OUT0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_OUT0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_OUT0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_OUT0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_OUT0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_OUT0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_OUT0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_OUT0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_OUT0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_OUT0_CACHE_VALUE ))
dwt_IMAGE_OUT0_m_axi_U(
    .AWVALID(m_axi_IMAGE_OUT0_AWVALID),
    .AWREADY(m_axi_IMAGE_OUT0_AWREADY),
    .AWADDR(m_axi_IMAGE_OUT0_AWADDR),
    .AWID(m_axi_IMAGE_OUT0_AWID),
    .AWLEN(m_axi_IMAGE_OUT0_AWLEN),
    .AWSIZE(m_axi_IMAGE_OUT0_AWSIZE),
    .AWBURST(m_axi_IMAGE_OUT0_AWBURST),
    .AWLOCK(m_axi_IMAGE_OUT0_AWLOCK),
    .AWCACHE(m_axi_IMAGE_OUT0_AWCACHE),
    .AWPROT(m_axi_IMAGE_OUT0_AWPROT),
    .AWQOS(m_axi_IMAGE_OUT0_AWQOS),
    .AWREGION(m_axi_IMAGE_OUT0_AWREGION),
    .AWUSER(m_axi_IMAGE_OUT0_AWUSER),
    .WVALID(m_axi_IMAGE_OUT0_WVALID),
    .WREADY(m_axi_IMAGE_OUT0_WREADY),
    .WDATA(m_axi_IMAGE_OUT0_WDATA),
    .WSTRB(m_axi_IMAGE_OUT0_WSTRB),
    .WLAST(m_axi_IMAGE_OUT0_WLAST),
    .WID(m_axi_IMAGE_OUT0_WID),
    .WUSER(m_axi_IMAGE_OUT0_WUSER),
    .ARVALID(m_axi_IMAGE_OUT0_ARVALID),
    .ARREADY(m_axi_IMAGE_OUT0_ARREADY),
    .ARADDR(m_axi_IMAGE_OUT0_ARADDR),
    .ARID(m_axi_IMAGE_OUT0_ARID),
    .ARLEN(m_axi_IMAGE_OUT0_ARLEN),
    .ARSIZE(m_axi_IMAGE_OUT0_ARSIZE),
    .ARBURST(m_axi_IMAGE_OUT0_ARBURST),
    .ARLOCK(m_axi_IMAGE_OUT0_ARLOCK),
    .ARCACHE(m_axi_IMAGE_OUT0_ARCACHE),
    .ARPROT(m_axi_IMAGE_OUT0_ARPROT),
    .ARQOS(m_axi_IMAGE_OUT0_ARQOS),
    .ARREGION(m_axi_IMAGE_OUT0_ARREGION),
    .ARUSER(m_axi_IMAGE_OUT0_ARUSER),
    .RVALID(m_axi_IMAGE_OUT0_RVALID),
    .RREADY(m_axi_IMAGE_OUT0_RREADY),
    .RDATA(m_axi_IMAGE_OUT0_RDATA),
    .RLAST(m_axi_IMAGE_OUT0_RLAST),
    .RID(m_axi_IMAGE_OUT0_RID),
    .RUSER(m_axi_IMAGE_OUT0_RUSER),
    .RRESP(m_axi_IMAGE_OUT0_RRESP),
    .BVALID(m_axi_IMAGE_OUT0_BVALID),
    .BREADY(m_axi_IMAGE_OUT0_BREADY),
    .BRESP(m_axi_IMAGE_OUT0_BRESP),
    .BID(m_axi_IMAGE_OUT0_BID),
    .BUSER(m_axi_IMAGE_OUT0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(IMAGE_OUT0_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_OUT0_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(IMAGE_OUT0_RDATA),
    .I_RID(IMAGE_OUT0_RID),
    .I_RUSER(IMAGE_OUT0_RUSER),
    .I_RRESP(IMAGE_OUT0_RRESP),
    .I_RLAST(IMAGE_OUT0_RLAST),
    .I_AWVALID(IMAGE_OUT0_AWVALID),
    .I_AWREADY(IMAGE_OUT0_AWREADY),
    .I_AWADDR(IMAGE_OUT0_addr_reg_866),
    .I_AWID(1'd0),
    .I_AWLEN(32'd65536),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(IMAGE_OUT0_WVALID),
    .I_WREADY(IMAGE_OUT0_WREADY),
    .I_WDATA(LL_pixel_reg_1111),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(IMAGE_OUT0_BVALID),
    .I_BREADY(IMAGE_OUT0_BREADY),
    .I_BRESP(IMAGE_OUT0_BRESP),
    .I_BID(IMAGE_OUT0_BID),
    .I_BUSER(IMAGE_OUT0_BUSER)
);

dwt_IMAGE_OUT1_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_OUT1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_OUT1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_OUT1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_OUT1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_OUT1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_OUT1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_OUT1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_OUT1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_OUT1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_OUT1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_OUT1_CACHE_VALUE ))
dwt_IMAGE_OUT1_m_axi_U(
    .AWVALID(m_axi_IMAGE_OUT1_AWVALID),
    .AWREADY(m_axi_IMAGE_OUT1_AWREADY),
    .AWADDR(m_axi_IMAGE_OUT1_AWADDR),
    .AWID(m_axi_IMAGE_OUT1_AWID),
    .AWLEN(m_axi_IMAGE_OUT1_AWLEN),
    .AWSIZE(m_axi_IMAGE_OUT1_AWSIZE),
    .AWBURST(m_axi_IMAGE_OUT1_AWBURST),
    .AWLOCK(m_axi_IMAGE_OUT1_AWLOCK),
    .AWCACHE(m_axi_IMAGE_OUT1_AWCACHE),
    .AWPROT(m_axi_IMAGE_OUT1_AWPROT),
    .AWQOS(m_axi_IMAGE_OUT1_AWQOS),
    .AWREGION(m_axi_IMAGE_OUT1_AWREGION),
    .AWUSER(m_axi_IMAGE_OUT1_AWUSER),
    .WVALID(m_axi_IMAGE_OUT1_WVALID),
    .WREADY(m_axi_IMAGE_OUT1_WREADY),
    .WDATA(m_axi_IMAGE_OUT1_WDATA),
    .WSTRB(m_axi_IMAGE_OUT1_WSTRB),
    .WLAST(m_axi_IMAGE_OUT1_WLAST),
    .WID(m_axi_IMAGE_OUT1_WID),
    .WUSER(m_axi_IMAGE_OUT1_WUSER),
    .ARVALID(m_axi_IMAGE_OUT1_ARVALID),
    .ARREADY(m_axi_IMAGE_OUT1_ARREADY),
    .ARADDR(m_axi_IMAGE_OUT1_ARADDR),
    .ARID(m_axi_IMAGE_OUT1_ARID),
    .ARLEN(m_axi_IMAGE_OUT1_ARLEN),
    .ARSIZE(m_axi_IMAGE_OUT1_ARSIZE),
    .ARBURST(m_axi_IMAGE_OUT1_ARBURST),
    .ARLOCK(m_axi_IMAGE_OUT1_ARLOCK),
    .ARCACHE(m_axi_IMAGE_OUT1_ARCACHE),
    .ARPROT(m_axi_IMAGE_OUT1_ARPROT),
    .ARQOS(m_axi_IMAGE_OUT1_ARQOS),
    .ARREGION(m_axi_IMAGE_OUT1_ARREGION),
    .ARUSER(m_axi_IMAGE_OUT1_ARUSER),
    .RVALID(m_axi_IMAGE_OUT1_RVALID),
    .RREADY(m_axi_IMAGE_OUT1_RREADY),
    .RDATA(m_axi_IMAGE_OUT1_RDATA),
    .RLAST(m_axi_IMAGE_OUT1_RLAST),
    .RID(m_axi_IMAGE_OUT1_RID),
    .RUSER(m_axi_IMAGE_OUT1_RUSER),
    .RRESP(m_axi_IMAGE_OUT1_RRESP),
    .BVALID(m_axi_IMAGE_OUT1_BVALID),
    .BREADY(m_axi_IMAGE_OUT1_BREADY),
    .BRESP(m_axi_IMAGE_OUT1_BRESP),
    .BID(m_axi_IMAGE_OUT1_BID),
    .BUSER(m_axi_IMAGE_OUT1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(IMAGE_OUT1_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_OUT1_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(IMAGE_OUT1_RDATA),
    .I_RID(IMAGE_OUT1_RID),
    .I_RUSER(IMAGE_OUT1_RUSER),
    .I_RRESP(IMAGE_OUT1_RRESP),
    .I_RLAST(IMAGE_OUT1_RLAST),
    .I_AWVALID(IMAGE_OUT1_AWVALID),
    .I_AWREADY(IMAGE_OUT1_AWREADY),
    .I_AWADDR(IMAGE_OUT1_addr_reg_860),
    .I_AWID(1'd0),
    .I_AWLEN(32'd65536),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(IMAGE_OUT1_WVALID),
    .I_WREADY(IMAGE_OUT1_WREADY),
    .I_WDATA(ap_reg_pp2_iter29_LH_pixel_reg_1096),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(IMAGE_OUT1_BVALID),
    .I_BREADY(IMAGE_OUT1_BREADY),
    .I_BRESP(IMAGE_OUT1_BRESP),
    .I_BID(IMAGE_OUT1_BID),
    .I_BUSER(IMAGE_OUT1_BUSER)
);

dwt_IMAGE_OUT2_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_OUT2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_OUT2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_OUT2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_OUT2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_OUT2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_OUT2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_OUT2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_OUT2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_OUT2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_OUT2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_OUT2_CACHE_VALUE ))
dwt_IMAGE_OUT2_m_axi_U(
    .AWVALID(m_axi_IMAGE_OUT2_AWVALID),
    .AWREADY(m_axi_IMAGE_OUT2_AWREADY),
    .AWADDR(m_axi_IMAGE_OUT2_AWADDR),
    .AWID(m_axi_IMAGE_OUT2_AWID),
    .AWLEN(m_axi_IMAGE_OUT2_AWLEN),
    .AWSIZE(m_axi_IMAGE_OUT2_AWSIZE),
    .AWBURST(m_axi_IMAGE_OUT2_AWBURST),
    .AWLOCK(m_axi_IMAGE_OUT2_AWLOCK),
    .AWCACHE(m_axi_IMAGE_OUT2_AWCACHE),
    .AWPROT(m_axi_IMAGE_OUT2_AWPROT),
    .AWQOS(m_axi_IMAGE_OUT2_AWQOS),
    .AWREGION(m_axi_IMAGE_OUT2_AWREGION),
    .AWUSER(m_axi_IMAGE_OUT2_AWUSER),
    .WVALID(m_axi_IMAGE_OUT2_WVALID),
    .WREADY(m_axi_IMAGE_OUT2_WREADY),
    .WDATA(m_axi_IMAGE_OUT2_WDATA),
    .WSTRB(m_axi_IMAGE_OUT2_WSTRB),
    .WLAST(m_axi_IMAGE_OUT2_WLAST),
    .WID(m_axi_IMAGE_OUT2_WID),
    .WUSER(m_axi_IMAGE_OUT2_WUSER),
    .ARVALID(m_axi_IMAGE_OUT2_ARVALID),
    .ARREADY(m_axi_IMAGE_OUT2_ARREADY),
    .ARADDR(m_axi_IMAGE_OUT2_ARADDR),
    .ARID(m_axi_IMAGE_OUT2_ARID),
    .ARLEN(m_axi_IMAGE_OUT2_ARLEN),
    .ARSIZE(m_axi_IMAGE_OUT2_ARSIZE),
    .ARBURST(m_axi_IMAGE_OUT2_ARBURST),
    .ARLOCK(m_axi_IMAGE_OUT2_ARLOCK),
    .ARCACHE(m_axi_IMAGE_OUT2_ARCACHE),
    .ARPROT(m_axi_IMAGE_OUT2_ARPROT),
    .ARQOS(m_axi_IMAGE_OUT2_ARQOS),
    .ARREGION(m_axi_IMAGE_OUT2_ARREGION),
    .ARUSER(m_axi_IMAGE_OUT2_ARUSER),
    .RVALID(m_axi_IMAGE_OUT2_RVALID),
    .RREADY(m_axi_IMAGE_OUT2_RREADY),
    .RDATA(m_axi_IMAGE_OUT2_RDATA),
    .RLAST(m_axi_IMAGE_OUT2_RLAST),
    .RID(m_axi_IMAGE_OUT2_RID),
    .RUSER(m_axi_IMAGE_OUT2_RUSER),
    .RRESP(m_axi_IMAGE_OUT2_RRESP),
    .BVALID(m_axi_IMAGE_OUT2_BVALID),
    .BREADY(m_axi_IMAGE_OUT2_BREADY),
    .BRESP(m_axi_IMAGE_OUT2_BRESP),
    .BID(m_axi_IMAGE_OUT2_BID),
    .BUSER(m_axi_IMAGE_OUT2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(IMAGE_OUT2_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_OUT2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(IMAGE_OUT2_RDATA),
    .I_RID(IMAGE_OUT2_RID),
    .I_RUSER(IMAGE_OUT2_RUSER),
    .I_RRESP(IMAGE_OUT2_RRESP),
    .I_RLAST(IMAGE_OUT2_RLAST),
    .I_AWVALID(IMAGE_OUT2_AWVALID),
    .I_AWREADY(IMAGE_OUT2_AWREADY),
    .I_AWADDR(IMAGE_OUT2_addr_reg_854),
    .I_AWID(1'd0),
    .I_AWLEN(32'd65536),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(IMAGE_OUT2_WVALID),
    .I_WREADY(IMAGE_OUT2_WREADY),
    .I_WDATA(HL_pixel_reg_1116),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(IMAGE_OUT2_BVALID),
    .I_BREADY(IMAGE_OUT2_BREADY),
    .I_BRESP(IMAGE_OUT2_BRESP),
    .I_BID(IMAGE_OUT2_BID),
    .I_BUSER(IMAGE_OUT2_BUSER)
);

dwt_IMAGE_OUT3_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_OUT3_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_OUT3_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_OUT3_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_OUT3_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_OUT3_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_OUT3_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_OUT3_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_OUT3_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_OUT3_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_OUT3_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_OUT3_CACHE_VALUE ))
dwt_IMAGE_OUT3_m_axi_U(
    .AWVALID(m_axi_IMAGE_OUT3_AWVALID),
    .AWREADY(m_axi_IMAGE_OUT3_AWREADY),
    .AWADDR(m_axi_IMAGE_OUT3_AWADDR),
    .AWID(m_axi_IMAGE_OUT3_AWID),
    .AWLEN(m_axi_IMAGE_OUT3_AWLEN),
    .AWSIZE(m_axi_IMAGE_OUT3_AWSIZE),
    .AWBURST(m_axi_IMAGE_OUT3_AWBURST),
    .AWLOCK(m_axi_IMAGE_OUT3_AWLOCK),
    .AWCACHE(m_axi_IMAGE_OUT3_AWCACHE),
    .AWPROT(m_axi_IMAGE_OUT3_AWPROT),
    .AWQOS(m_axi_IMAGE_OUT3_AWQOS),
    .AWREGION(m_axi_IMAGE_OUT3_AWREGION),
    .AWUSER(m_axi_IMAGE_OUT3_AWUSER),
    .WVALID(m_axi_IMAGE_OUT3_WVALID),
    .WREADY(m_axi_IMAGE_OUT3_WREADY),
    .WDATA(m_axi_IMAGE_OUT3_WDATA),
    .WSTRB(m_axi_IMAGE_OUT3_WSTRB),
    .WLAST(m_axi_IMAGE_OUT3_WLAST),
    .WID(m_axi_IMAGE_OUT3_WID),
    .WUSER(m_axi_IMAGE_OUT3_WUSER),
    .ARVALID(m_axi_IMAGE_OUT3_ARVALID),
    .ARREADY(m_axi_IMAGE_OUT3_ARREADY),
    .ARADDR(m_axi_IMAGE_OUT3_ARADDR),
    .ARID(m_axi_IMAGE_OUT3_ARID),
    .ARLEN(m_axi_IMAGE_OUT3_ARLEN),
    .ARSIZE(m_axi_IMAGE_OUT3_ARSIZE),
    .ARBURST(m_axi_IMAGE_OUT3_ARBURST),
    .ARLOCK(m_axi_IMAGE_OUT3_ARLOCK),
    .ARCACHE(m_axi_IMAGE_OUT3_ARCACHE),
    .ARPROT(m_axi_IMAGE_OUT3_ARPROT),
    .ARQOS(m_axi_IMAGE_OUT3_ARQOS),
    .ARREGION(m_axi_IMAGE_OUT3_ARREGION),
    .ARUSER(m_axi_IMAGE_OUT3_ARUSER),
    .RVALID(m_axi_IMAGE_OUT3_RVALID),
    .RREADY(m_axi_IMAGE_OUT3_RREADY),
    .RDATA(m_axi_IMAGE_OUT3_RDATA),
    .RLAST(m_axi_IMAGE_OUT3_RLAST),
    .RID(m_axi_IMAGE_OUT3_RID),
    .RUSER(m_axi_IMAGE_OUT3_RUSER),
    .RRESP(m_axi_IMAGE_OUT3_RRESP),
    .BVALID(m_axi_IMAGE_OUT3_BVALID),
    .BREADY(m_axi_IMAGE_OUT3_BREADY),
    .BRESP(m_axi_IMAGE_OUT3_BRESP),
    .BID(m_axi_IMAGE_OUT3_BID),
    .BUSER(m_axi_IMAGE_OUT3_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(IMAGE_OUT3_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_OUT3_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(IMAGE_OUT3_RDATA),
    .I_RID(IMAGE_OUT3_RID),
    .I_RUSER(IMAGE_OUT3_RUSER),
    .I_RRESP(IMAGE_OUT3_RRESP),
    .I_RLAST(IMAGE_OUT3_RLAST),
    .I_AWVALID(IMAGE_OUT3_AWVALID),
    .I_AWREADY(IMAGE_OUT3_AWREADY),
    .I_AWADDR(IMAGE_OUT3_addr_reg_848),
    .I_AWID(1'd0),
    .I_AWLEN(32'd65536),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(IMAGE_OUT3_WVALID),
    .I_WREADY(IMAGE_OUT3_WREADY),
    .I_WDATA(ap_reg_pp2_iter29_HH_pixel_reg_1106),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(IMAGE_OUT3_BVALID),
    .I_BREADY(IMAGE_OUT3_BREADY),
    .I_BRESP(IMAGE_OUT3_BRESP),
    .I_BID(IMAGE_OUT3_BID),
    .I_BUSER(IMAGE_OUT3_BUSER)
);

dwt_image_even #(
    .DataWidth( 32 ),
    .AddressRange( 131072 ),
    .AddressWidth( 17 ))
image_even_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_even_address0),
    .ce0(image_even_ce0),
    .we0(image_even_we0),
    .d0(ptr_line1_read_reg_928),
    .q0(image_even_q0),
    .address1(image_even_address1),
    .ce1(image_even_ce1),
    .q1(image_even_q1)
);

dwt_image_even #(
    .DataWidth( 32 ),
    .AddressRange( 131072 ),
    .AddressWidth( 17 ))
image_odd_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_odd_address0),
    .ce0(image_odd_ce0),
    .we0(image_odd_we0),
    .d0(ptr_line2_read_reg_963),
    .q0(image_odd_q0),
    .address1(image_odd_address1),
    .ce1(image_odd_ce1),
    .q1(image_odd_q1)
);

dwt_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(pixel0_reg_1033),
    .din1(pixel1_reg_1039),
    .ce(grp_fu_425_ce),
    .dout(grp_fu_425_p2)
);

dwt_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fsub_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(pixel0_reg_1033),
    .din1(pixel1_reg_1039),
    .ce(grp_fu_429_ce),
    .dout(grp_fu_429_p2)
);

dwt_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fadd_32ns_32nbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(pixel2_reg_1045),
    .din1(pixel3_reg_1051),
    .ce(grp_fu_433_ce),
    .dout(grp_fu_433_p2)
);

dwt_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fsub_32ns_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(pixel2_reg_1045),
    .din1(pixel3_reg_1051),
    .ce(grp_fu_437_ce),
    .dout(grp_fu_437_p2)
);

dwt_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fadd_32ns_32nbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_line1_reg_1079),
    .din1(sum_line2_reg_1085),
    .ce(grp_fu_441_ce),
    .dout(grp_fu_441_p2)
);

dwt_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fsub_32ns_32ncud_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_line1_reg_1079),
    .din1(sum_line2_reg_1085),
    .ce(grp_fu_445_ce),
    .dout(grp_fu_445_p2)
);

dwt_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fadd_32ns_32nbkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_reg_pp2_iter16_diff_line1_reg_1062),
    .din1(ap_reg_pp2_iter16_diff_line2_reg_1073),
    .ce(grp_fu_449_ce),
    .dout(grp_fu_449_p2)
);

dwt_fsub_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fsub_32ns_32ncud_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_reg_pp2_iter16_diff_line1_reg_1062),
    .din1(ap_reg_pp2_iter16_diff_line2_reg_1073),
    .ce(grp_fu_453_ce),
    .dout(grp_fu_453_p2)
);

dwt_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fmul_32ns_32ndEe_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_23_reg_1057),
    .din1(32'd1056964608),
    .ce(grp_fu_457_ce),
    .dout(grp_fu_457_p2)
);

dwt_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fmul_32ns_32ndEe_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_24_reg_1068),
    .din1(32'd1056964608),
    .ce(grp_fu_462_ce),
    .dout(grp_fu_462_p2)
);

dwt_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fmul_32ns_32ndEe_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_25_reg_1091),
    .din1(32'd1056964608),
    .ce(grp_fu_467_ce),
    .dout(grp_fu_467_p2)
);

dwt_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dwt_fmul_32ns_32ndEe_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_26_reg_1101),
    .din1(32'd1056964608),
    .ce(grp_fu_472_ce),
    .dout(grp_fu_472_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state25) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state25)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
        end else if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter30 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_IN_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_IMAGE_IN_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_sig_ioackin_IMAGE_IN_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_IMAGE_IN_ARREADY <= 1'b0;
        end else if ((((1'b1 == IMAGE_IN_ARREADY) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == IMAGE_IN_ARREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_IMAGE_IN_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT0_AWREADY <= 1'b0;
    end else begin
        if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_OUT0_AWREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_OUT0_AWREADY)) begin
                ap_reg_ioackin_IMAGE_OUT0_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT0_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
            if ((1'b0 == ap_block_pp2_stage0_11001)) begin
                ap_reg_ioackin_IMAGE_OUT0_WREADY <= 1'b0;
            end else if (((1'b1 == IMAGE_OUT0_WREADY) & (1'b0 == ap_block_pp2_stage0_01001))) begin
                ap_reg_ioackin_IMAGE_OUT0_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT1_AWREADY <= 1'b0;
    end else begin
        if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_OUT1_AWREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_OUT1_AWREADY)) begin
                ap_reg_ioackin_IMAGE_OUT1_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT1_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
            if ((1'b0 == ap_block_pp2_stage0_11001)) begin
                ap_reg_ioackin_IMAGE_OUT1_WREADY <= 1'b0;
            end else if (((1'b1 == IMAGE_OUT1_WREADY) & (1'b0 == ap_block_pp2_stage0_01001))) begin
                ap_reg_ioackin_IMAGE_OUT1_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT2_AWREADY <= 1'b0;
    end else begin
        if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_OUT2_AWREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_OUT2_AWREADY)) begin
                ap_reg_ioackin_IMAGE_OUT2_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT2_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
            if ((1'b0 == ap_block_pp2_stage0_11001)) begin
                ap_reg_ioackin_IMAGE_OUT2_WREADY <= 1'b0;
            end else if (((1'b1 == IMAGE_OUT2_WREADY) & (1'b0 == ap_block_pp2_stage0_01001))) begin
                ap_reg_ioackin_IMAGE_OUT2_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT3_AWREADY <= 1'b0;
    end else begin
        if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_OUT3_AWREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_OUT3_AWREADY)) begin
                ap_reg_ioackin_IMAGE_OUT3_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT3_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
            if ((1'b0 == ap_block_pp2_stage0_11001)) begin
                ap_reg_ioackin_IMAGE_OUT3_WREADY <= 1'b0;
            end else if (((1'b1 == IMAGE_OUT3_WREADY) & (1'b0 == ap_block_pp2_stage0_01001))) begin
                ap_reg_ioackin_IMAGE_OUT3_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cols_reg_414 <= 12'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        cols_reg_414 <= cols_1_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_fu_691_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar1_reg_381 <= indvar_next1_fu_697_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar1_reg_381 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_392 <= 17'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        indvar_flatten_reg_392 <= indvar_flatten_next_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_621_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_370 <= indvar_next_fu_627_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_reg_370 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        rows1_reg_403 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_973 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        rows1_reg_403 <= tmp_12_mid2_v_v_reg_987;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        rows_reg_358 <= rows_1_fu_737_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_reg_358 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_reg_pp2_iter23_exitcond_flatten_reg_973 == 1'd0))) begin
        HH_pixel_reg_1106 <= grp_fu_453_p2;
        LH_pixel_reg_1096 <= grp_fu_445_p2;
        tmp_25_reg_1091 <= grp_fu_441_p2;
        tmp_26_reg_1101 <= grp_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_reg_pp2_iter28_exitcond_flatten_reg_973 == 1'd0))) begin
        HL_pixel_reg_1116 <= grp_fu_472_p2;
        LL_pixel_reg_1111 <= grp_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        IMAGE_OUT0_addr_reg_866[29 : 0] <= tmp_5_fu_547_p1[29 : 0];
        IMAGE_OUT1_addr_reg_860[29 : 0] <= tmp_2_fu_527_p1[29 : 0];
        IMAGE_OUT2_addr_reg_854[29 : 0] <= tmp_s_fu_507_p1[29 : 0];
        IMAGE_OUT3_addr_reg_848[29 : 0] <= tmp_3_fu_487_p1[29 : 0];
        tmp_13_cast_reg_872[29 : 0] <= tmp_13_cast_fu_567_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_reg_909 <= exitcond_reg_909;
        ap_reg_pp0_iter1_tmp_27_reg_918 <= tmp_27_reg_918;
        ap_reg_pp0_iter1_tmp_9_reg_923 <= tmp_9_reg_923;
        exitcond_reg_909 <= exitcond_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond1_reg_944 <= exitcond1_reg_944;
        ap_reg_pp1_iter1_tmp_19_reg_958 <= tmp_19_reg_958;
        ap_reg_pp1_iter1_tmp_28_reg_953 <= tmp_28_reg_953;
        exitcond1_reg_944 <= exitcond1_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        ap_reg_pp2_iter10_exitcond_flatten_reg_973 <= ap_reg_pp2_iter9_exitcond_flatten_reg_973;
        ap_reg_pp2_iter11_exitcond_flatten_reg_973 <= ap_reg_pp2_iter10_exitcond_flatten_reg_973;
        ap_reg_pp2_iter12_diff_line1_reg_1062 <= diff_line1_reg_1062;
        ap_reg_pp2_iter12_diff_line2_reg_1073 <= diff_line2_reg_1073;
        ap_reg_pp2_iter12_exitcond_flatten_reg_973 <= ap_reg_pp2_iter11_exitcond_flatten_reg_973;
        ap_reg_pp2_iter13_diff_line1_reg_1062 <= ap_reg_pp2_iter12_diff_line1_reg_1062;
        ap_reg_pp2_iter13_diff_line2_reg_1073 <= ap_reg_pp2_iter12_diff_line2_reg_1073;
        ap_reg_pp2_iter13_exitcond_flatten_reg_973 <= ap_reg_pp2_iter12_exitcond_flatten_reg_973;
        ap_reg_pp2_iter14_diff_line1_reg_1062 <= ap_reg_pp2_iter13_diff_line1_reg_1062;
        ap_reg_pp2_iter14_diff_line2_reg_1073 <= ap_reg_pp2_iter13_diff_line2_reg_1073;
        ap_reg_pp2_iter14_exitcond_flatten_reg_973 <= ap_reg_pp2_iter13_exitcond_flatten_reg_973;
        ap_reg_pp2_iter15_diff_line1_reg_1062 <= ap_reg_pp2_iter14_diff_line1_reg_1062;
        ap_reg_pp2_iter15_diff_line2_reg_1073 <= ap_reg_pp2_iter14_diff_line2_reg_1073;
        ap_reg_pp2_iter15_exitcond_flatten_reg_973 <= ap_reg_pp2_iter14_exitcond_flatten_reg_973;
        ap_reg_pp2_iter16_diff_line1_reg_1062 <= ap_reg_pp2_iter15_diff_line1_reg_1062;
        ap_reg_pp2_iter16_diff_line2_reg_1073 <= ap_reg_pp2_iter15_diff_line2_reg_1073;
        ap_reg_pp2_iter16_exitcond_flatten_reg_973 <= ap_reg_pp2_iter15_exitcond_flatten_reg_973;
        ap_reg_pp2_iter17_exitcond_flatten_reg_973 <= ap_reg_pp2_iter16_exitcond_flatten_reg_973;
        ap_reg_pp2_iter18_exitcond_flatten_reg_973 <= ap_reg_pp2_iter17_exitcond_flatten_reg_973;
        ap_reg_pp2_iter19_exitcond_flatten_reg_973 <= ap_reg_pp2_iter18_exitcond_flatten_reg_973;
        ap_reg_pp2_iter20_exitcond_flatten_reg_973 <= ap_reg_pp2_iter19_exitcond_flatten_reg_973;
        ap_reg_pp2_iter21_exitcond_flatten_reg_973 <= ap_reg_pp2_iter20_exitcond_flatten_reg_973;
        ap_reg_pp2_iter22_exitcond_flatten_reg_973 <= ap_reg_pp2_iter21_exitcond_flatten_reg_973;
        ap_reg_pp2_iter23_exitcond_flatten_reg_973 <= ap_reg_pp2_iter22_exitcond_flatten_reg_973;
        ap_reg_pp2_iter24_exitcond_flatten_reg_973 <= ap_reg_pp2_iter23_exitcond_flatten_reg_973;
        ap_reg_pp2_iter25_HH_pixel_reg_1106 <= HH_pixel_reg_1106;
        ap_reg_pp2_iter25_LH_pixel_reg_1096 <= LH_pixel_reg_1096;
        ap_reg_pp2_iter25_exitcond_flatten_reg_973 <= ap_reg_pp2_iter24_exitcond_flatten_reg_973;
        ap_reg_pp2_iter26_HH_pixel_reg_1106 <= ap_reg_pp2_iter25_HH_pixel_reg_1106;
        ap_reg_pp2_iter26_LH_pixel_reg_1096 <= ap_reg_pp2_iter25_LH_pixel_reg_1096;
        ap_reg_pp2_iter26_exitcond_flatten_reg_973 <= ap_reg_pp2_iter25_exitcond_flatten_reg_973;
        ap_reg_pp2_iter27_HH_pixel_reg_1106 <= ap_reg_pp2_iter26_HH_pixel_reg_1106;
        ap_reg_pp2_iter27_LH_pixel_reg_1096 <= ap_reg_pp2_iter26_LH_pixel_reg_1096;
        ap_reg_pp2_iter27_exitcond_flatten_reg_973 <= ap_reg_pp2_iter26_exitcond_flatten_reg_973;
        ap_reg_pp2_iter28_HH_pixel_reg_1106 <= ap_reg_pp2_iter27_HH_pixel_reg_1106;
        ap_reg_pp2_iter28_LH_pixel_reg_1096 <= ap_reg_pp2_iter27_LH_pixel_reg_1096;
        ap_reg_pp2_iter28_exitcond_flatten_reg_973 <= ap_reg_pp2_iter27_exitcond_flatten_reg_973;
        ap_reg_pp2_iter29_HH_pixel_reg_1106 <= ap_reg_pp2_iter28_HH_pixel_reg_1106;
        ap_reg_pp2_iter29_LH_pixel_reg_1096 <= ap_reg_pp2_iter28_LH_pixel_reg_1096;
        ap_reg_pp2_iter29_exitcond_flatten_reg_973 <= ap_reg_pp2_iter28_exitcond_flatten_reg_973;
        ap_reg_pp2_iter2_exitcond_flatten_reg_973 <= ap_reg_pp2_iter1_exitcond_flatten_reg_973;
        ap_reg_pp2_iter3_exitcond_flatten_reg_973 <= ap_reg_pp2_iter2_exitcond_flatten_reg_973;
        ap_reg_pp2_iter4_exitcond_flatten_reg_973 <= ap_reg_pp2_iter3_exitcond_flatten_reg_973;
        ap_reg_pp2_iter5_exitcond_flatten_reg_973 <= ap_reg_pp2_iter4_exitcond_flatten_reg_973;
        ap_reg_pp2_iter6_exitcond_flatten_reg_973 <= ap_reg_pp2_iter5_exitcond_flatten_reg_973;
        ap_reg_pp2_iter7_exitcond_flatten_reg_973 <= ap_reg_pp2_iter6_exitcond_flatten_reg_973;
        ap_reg_pp2_iter8_exitcond_flatten_reg_973 <= ap_reg_pp2_iter7_exitcond_flatten_reg_973;
        ap_reg_pp2_iter9_exitcond_flatten_reg_973 <= ap_reg_pp2_iter8_exitcond_flatten_reg_973;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_reg_pp2_iter1_exitcond_flatten_reg_973 <= exitcond_flatten_reg_973;
        ap_reg_pp2_iter1_tmp_12_mid2_v_reg_992 <= tmp_12_mid2_v_reg_992;
        ap_reg_pp2_iter1_tmp_13_reg_998 <= tmp_13_reg_998;
        exitcond_flatten_reg_973 <= exitcond_flatten_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        cols_mid2_reg_982 <= cols_mid2_fu_769_p3;
        tmp_12_mid2_v_reg_992 <= {{tmp_12_mid2_v_v_fu_777_p3[7:1]}};
        tmp_13_reg_998 <= tmp_13_fu_795_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_reg_pp2_iter10_exitcond_flatten_reg_973 == 1'd0))) begin
        diff_line1_reg_1062 <= grp_fu_429_p2;
        diff_line2_reg_1073 <= grp_fu_437_p2;
        tmp_23_reg_1057 <= grp_fu_425_p2;
        tmp_24_reg_1068 <= grp_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        imageIn2_sum1_reg_933 <= imageIn2_sum1_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        imageIn2_sum_reg_892 <= imageIn2_sum_fu_595_p2;
        tmp_10_reg_882 <= tmp_10_fu_579_p1;
        tmp_1_reg_887[17 : 11] <= tmp_1_fu_583_p3[17 : 11];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_reg_pp2_iter2_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        pixel0_reg_1033 <= image_even_q0;
        pixel1_reg_1039 <= image_even_q1;
        pixel2_reg_1045 <= image_odd_q0;
        pixel3_reg_1051 <= image_odd_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_909 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ptr_line1_read_reg_928 <= IMAGE_IN_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ptr_line2_read_reg_963 <= IMAGE_IN_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_reg_pp2_iter15_exitcond_flatten_reg_973 == 1'd0))) begin
        sum_line1_reg_1079 <= grp_fu_457_p2;
        sum_line2_reg_1085 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        tmp_12_mid2_v_v_reg_987 <= tmp_12_mid2_v_v_fu_777_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten_reg_973 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_15_reg_1008 <= tmp_15_fu_819_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_fu_691_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_19_reg_958 <= {{tmp_17_fu_711_p2[17:11]}};
        tmp_28_reg_953 <= tmp_28_fu_707_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_621_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_27_reg_918 <= tmp_27_fu_637_p1;
        tmp_9_reg_923 <= {{tmp_8_fu_641_p2[17:11]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_7_cast_reg_903[16 : 10] <= tmp_7_cast_fu_617_p1[16 : 10];
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_IN_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            IMAGE_IN_ARADDR = imageIn2_sum1_cast_fu_681_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            IMAGE_IN_ARADDR = imageIn2_sum_cast_fu_600_p1;
        end else begin
            IMAGE_IN_ARADDR = 'bx;
        end
    end else begin
        IMAGE_IN_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_IMAGE_IN_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((ap_reg_ioackin_IMAGE_IN_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        IMAGE_IN_ARVALID = 1'b1;
    end else begin
        IMAGE_IN_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_reg_944 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_909 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        IMAGE_IN_RREADY = 1'b1;
    end else begin
        IMAGE_IN_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3))) begin
        IMAGE_IN_blk_n_AR = m_axi_IMAGE_IN_ARREADY;
    end else begin
        IMAGE_IN_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (exitcond1_reg_944 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond_reg_909 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        IMAGE_IN_blk_n_R = m_axi_IMAGE_IN_RVALID;
    end else begin
        IMAGE_IN_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (ap_reg_ioackin_IMAGE_OUT0_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT0_AWVALID = 1'b1;
    end else begin
        IMAGE_OUT0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID)) & (1'b1 == ap_CS_fsm_state60))) begin
        IMAGE_OUT0_BREADY = 1'b1;
    end else begin
        IMAGE_OUT0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT0_WREADY == 1'b0) & (ap_enable_reg_pp2_iter30 == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        IMAGE_OUT0_WVALID = 1'b1;
    end else begin
        IMAGE_OUT0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT0_blk_n_AW = m_axi_IMAGE_OUT0_AWREADY;
    end else begin
        IMAGE_OUT0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        IMAGE_OUT0_blk_n_B = m_axi_IMAGE_OUT0_BVALID;
    end else begin
        IMAGE_OUT0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
        IMAGE_OUT0_blk_n_W = m_axi_IMAGE_OUT0_WREADY;
    end else begin
        IMAGE_OUT0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (ap_reg_ioackin_IMAGE_OUT1_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT1_AWVALID = 1'b1;
    end else begin
        IMAGE_OUT1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID)) & (1'b1 == ap_CS_fsm_state60))) begin
        IMAGE_OUT1_BREADY = 1'b1;
    end else begin
        IMAGE_OUT1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT1_WREADY == 1'b0) & (ap_enable_reg_pp2_iter30 == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        IMAGE_OUT1_WVALID = 1'b1;
    end else begin
        IMAGE_OUT1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT1_blk_n_AW = m_axi_IMAGE_OUT1_AWREADY;
    end else begin
        IMAGE_OUT1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        IMAGE_OUT1_blk_n_B = m_axi_IMAGE_OUT1_BVALID;
    end else begin
        IMAGE_OUT1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
        IMAGE_OUT1_blk_n_W = m_axi_IMAGE_OUT1_WREADY;
    end else begin
        IMAGE_OUT1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (ap_reg_ioackin_IMAGE_OUT2_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT2_AWVALID = 1'b1;
    end else begin
        IMAGE_OUT2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID)) & (1'b1 == ap_CS_fsm_state60))) begin
        IMAGE_OUT2_BREADY = 1'b1;
    end else begin
        IMAGE_OUT2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT2_WREADY == 1'b0) & (ap_enable_reg_pp2_iter30 == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        IMAGE_OUT2_WVALID = 1'b1;
    end else begin
        IMAGE_OUT2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT2_blk_n_AW = m_axi_IMAGE_OUT2_AWREADY;
    end else begin
        IMAGE_OUT2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        IMAGE_OUT2_blk_n_B = m_axi_IMAGE_OUT2_BVALID;
    end else begin
        IMAGE_OUT2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
        IMAGE_OUT2_blk_n_W = m_axi_IMAGE_OUT2_WREADY;
    end else begin
        IMAGE_OUT2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (ap_reg_ioackin_IMAGE_OUT3_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT3_AWVALID = 1'b1;
    end else begin
        IMAGE_OUT3_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID)) & (1'b1 == ap_CS_fsm_state60))) begin
        IMAGE_OUT3_BREADY = 1'b1;
    end else begin
        IMAGE_OUT3_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT3_WREADY == 1'b0) & (ap_enable_reg_pp2_iter30 == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        IMAGE_OUT3_WVALID = 1'b1;
    end else begin
        IMAGE_OUT3_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_OUT3_blk_n_AW = m_axi_IMAGE_OUT3_AWREADY;
    end else begin
        IMAGE_OUT3_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        IMAGE_OUT3_blk_n_B = m_axi_IMAGE_OUT3_BVALID;
    end else begin
        IMAGE_OUT3_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_enable_reg_pp2_iter30 == 1'b1))) begin
        IMAGE_OUT3_blk_n_W = m_axi_IMAGE_OUT3_WREADY;
    end else begin
        IMAGE_OUT3_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_621_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_691_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_743_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID)) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter30 == 1'b0) & (ap_enable_reg_pp2_iter29 == 1'b0) & (ap_enable_reg_pp2_iter28 == 1'b0) & (ap_enable_reg_pp2_iter27 == 1'b0) & (ap_enable_reg_pp2_iter26 == 1'b0) & (ap_enable_reg_pp2_iter25 == 1'b0) & (ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond_flatten_reg_973 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_rows1_phi_fu_407_p4 = tmp_12_mid2_v_v_reg_987;
    end else begin
        ap_phi_mux_rows1_phi_fu_407_p4 = rows1_reg_403;
    end
end

always @ (*) begin
    if ((~((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID)) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_IN_ARREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_IN_ARREADY = IMAGE_IN_ARREADY;
    end else begin
        ap_sig_ioackin_IMAGE_IN_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT0_AWREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT0_AWREADY = IMAGE_OUT0_AWREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT0_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT0_WREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT0_WREADY = IMAGE_OUT0_WREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT0_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT1_AWREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT1_AWREADY = IMAGE_OUT1_AWREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT1_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT1_WREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT1_WREADY = IMAGE_OUT1_WREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT1_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT2_AWREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT2_AWREADY = IMAGE_OUT2_AWREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT2_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT2_WREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT2_WREADY = IMAGE_OUT2_WREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT2_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT3_AWREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT3_AWREADY = IMAGE_OUT3_AWREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT3_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT3_WREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT3_WREADY = IMAGE_OUT3_WREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT3_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_425_ce = 1'b1;
    end else begin
        grp_fu_425_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_429_ce = 1'b1;
    end else begin
        grp_fu_429_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_433_ce = 1'b1;
    end else begin
        grp_fu_433_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_437_ce = 1'b1;
    end else begin
        grp_fu_437_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_441_ce = 1'b1;
    end else begin
        grp_fu_441_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_445_ce = 1'b1;
    end else begin
        grp_fu_445_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_449_ce = 1'b1;
    end else begin
        grp_fu_449_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_453_ce = 1'b1;
    end else begin
        grp_fu_453_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_457_ce = 1'b1;
    end else begin
        grp_fu_457_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_462_ce = 1'b1;
    end else begin
        grp_fu_462_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_467_ce = 1'b1;
    end else begin
        grp_fu_467_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_472_ce = 1'b1;
    end else begin
        grp_fu_472_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        image_even_address0 = tmp_36_cast_fu_825_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        image_even_address0 = tmp_22_fu_662_p1;
    end else begin
        image_even_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        image_even_ce0 = 1'b1;
    end else begin
        image_even_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        image_even_ce1 = 1'b1;
    end else begin
        image_even_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_exitcond_reg_909 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        image_even_we0 = 1'b1;
    end else begin
        image_even_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        image_odd_address0 = tmp_36_cast_fu_825_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        image_odd_address0 = tmp_30_fu_732_p1;
    end else begin
        image_odd_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        image_odd_ce0 = 1'b1;
    end else begin
        image_odd_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        image_odd_ce1 = 1'b1;
    end else begin
        image_odd_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter1_exitcond1_reg_944 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        image_odd_we0 = 1'b1;
    end else begin
        image_odd_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_state2_io) & (tmp_6_fu_571_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_IMAGE_IN_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_621_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_621_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((ap_sig_ioackin_IMAGE_IN_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond1_fu_691_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond1_fu_691_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond_flatten_fu_743_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter30 == 1'b1) & (ap_enable_reg_pp2_iter29 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter30 == 1'b1) & (ap_enable_reg_pp2_iter29 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((exitcond_flatten_fu_743_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if ((~((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID)) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_909 == 1'd0) & (1'b0 == IMAGE_IN_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_909 == 1'd0) & (1'b0 == IMAGE_IN_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond1_reg_944 == 1'd0) & (1'b0 == IMAGE_IN_RVALID) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond1_reg_944 == 1'd0) & (1'b0 == IMAGE_IN_RVALID) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp2_iter30 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state55_io) & (ap_enable_reg_pp2_iter30 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((exitcond_reg_909 == 1'd0) & (1'b0 == IMAGE_IN_RVALID));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((exitcond1_reg_944 == 1'd0) & (1'b0 == IMAGE_IN_RVALID));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((tmp_6_fu_571_p3 == 1'd1) & (ap_sig_ioackin_IMAGE_OUT3_AWREADY == 1'b0)) | ((tmp_6_fu_571_p3 == 1'd1) & (ap_sig_ioackin_IMAGE_OUT2_AWREADY == 1'b0)) | ((tmp_6_fu_571_p3 == 1'd1) & (ap_sig_ioackin_IMAGE_OUT1_AWREADY == 1'b0)) | ((tmp_6_fu_571_p3 == 1'd1) & (ap_sig_ioackin_IMAGE_OUT0_AWREADY == 1'b0)));
end

assign ap_block_state30_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp2_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp2_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage0_iter29 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_io = (((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT3_WREADY == 1'b0)) | ((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT2_WREADY == 1'b0)) | ((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT1_WREADY == 1'b0)) | ((ap_reg_pp2_iter29_exitcond_flatten_reg_973 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT0_WREADY == 1'b0)));
end

assign ap_block_state55_pp2_stage0_iter30 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state60 = ((1'b0 == IMAGE_OUT3_BVALID) | (1'b0 == IMAGE_OUT2_BVALID) | (1'b0 == IMAGE_OUT1_BVALID) | (1'b0 == IMAGE_OUT0_BVALID));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cols_1_fu_799_p2 = (12'd2 + cols_mid2_fu_769_p3);

assign cols_mid2_fu_769_p3 = ((tmp_11_fu_761_p3[0:0] === 1'b1) ? 12'd0 : cols_reg_414);

assign exitcond1_fu_691_p2 = ((indvar1_reg_381 == 12'd2048) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_743_p2 = ((indvar_flatten_reg_392 == 17'd65536) ? 1'b1 : 1'b0);

assign exitcond_fu_621_p2 = ((indvar_reg_370 == 12'd2048) ? 1'b1 : 1'b0);

assign imageIn2_sum1_cast_fu_681_p1 = imageIn2_sum1_reg_933;

assign imageIn2_sum1_fu_676_p2 = (tmp_5_cast_fu_672_p1 + tmp_13_cast_reg_872);

assign imageIn2_sum_cast_fu_600_p1 = imageIn2_sum_reg_892;

assign imageIn2_sum_fu_595_p2 = (tmp_13_cast_reg_872 + tmp_2_cast_fu_591_p1);

assign imageOut4_fu_497_p4 = {{imageOut2[31:2]}};

assign imageOut5_fu_517_p4 = {{imageOut1[31:2]}};

assign imageOut6_fu_537_p4 = {{imageOut0[31:2]}};

assign imageOut_fu_477_p4 = {{imageOut3[31:2]}};

assign image_even_address1 = tmp_20_fu_842_p1;

assign image_odd_address1 = tmp_20_fu_842_p1;

assign indvar1_cast3_fu_703_p1 = indvar1_reg_381;

assign indvar_cast5_fu_633_p1 = indvar_reg_370;

assign indvar_flatten_next_fu_749_p2 = (indvar_flatten_reg_392 + 17'd1);

assign indvar_next1_fu_697_p2 = (indvar1_reg_381 + 12'd1);

assign indvar_next_fu_627_p2 = (indvar_reg_370 + 12'd1);

assign rows_1_fu_737_p2 = (rows_reg_358 + 8'd2);

assign rows_2_fu_755_p2 = (8'd2 + ap_phi_mux_rows1_phi_fu_407_p4);

assign tmp_10_fu_579_p1 = rows_reg_358[6:0];

assign tmp_11_fu_761_p3 = cols_reg_414[32'd11];

assign tmp_12_fu_805_p3 = {{tmp_12_mid2_v_reg_992}, {11'd0}};

assign tmp_12_mid2_v_v_fu_777_p3 = ((tmp_11_fu_761_p3[0:0] === 1'b1) ? rows_2_fu_755_p2 : ap_phi_mux_rows1_phi_fu_407_p4);

assign tmp_13_cast_fu_567_p1 = tmp_fu_557_p4;

assign tmp_13_fu_795_p1 = cols_mid2_fu_769_p3[10:0];

assign tmp_15_fu_819_p2 = (tmp_34_cast_fu_812_p1 + tmp_24_cast_fu_816_p1);

assign tmp_16_fu_830_p2 = (ap_reg_pp2_iter1_tmp_13_reg_998 | 11'd1);

assign tmp_17_fu_711_p2 = (indvar1_cast3_fu_703_p1 + tmp_7_cast_reg_903);

assign tmp_18_fu_835_p3 = {{ap_reg_pp2_iter1_tmp_12_mid2_v_reg_992}, {tmp_16_fu_830_p2}};

assign tmp_1_fu_583_p3 = {{tmp_10_fu_579_p1}, {11'd0}};

assign tmp_20_fu_842_p1 = tmp_18_fu_835_p3;

assign tmp_21_fu_656_p3 = {{ap_reg_pp0_iter1_tmp_9_reg_923}, {ap_reg_pp0_iter1_tmp_27_reg_918}};

assign tmp_22_fu_662_p1 = tmp_21_fu_656_p3;

assign tmp_24_cast_fu_816_p1 = cols_mid2_reg_982;

assign tmp_27_fu_637_p1 = indvar_reg_370[10:0];

assign tmp_28_fu_707_p1 = indvar1_reg_381[10:0];

assign tmp_29_fu_726_p3 = {{ap_reg_pp1_iter1_tmp_19_reg_958}, {ap_reg_pp1_iter1_tmp_28_reg_953}};

assign tmp_2_cast_fu_591_p1 = tmp_1_fu_583_p3;

assign tmp_2_fu_527_p1 = imageOut5_fu_517_p4;

assign tmp_30_fu_732_p1 = tmp_29_fu_726_p3;

assign tmp_34_cast_fu_812_p1 = tmp_12_fu_805_p3;

assign tmp_36_cast_fu_825_p1 = tmp_15_reg_1008;

assign tmp_3_fu_487_p1 = imageOut_fu_477_p4;

assign tmp_4_fu_667_p2 = (tmp_1_reg_887 | 18'd2048);

assign tmp_5_cast_fu_672_p1 = tmp_4_fu_667_p2;

assign tmp_5_fu_547_p1 = imageOut6_fu_537_p4;

assign tmp_6_fu_571_p3 = rows_reg_358[32'd7];

assign tmp_7_cast_fu_617_p1 = tmp_7_fu_610_p3;

assign tmp_7_fu_610_p3 = {{tmp_10_reg_882}, {10'd0}};

assign tmp_8_fu_641_p2 = (indvar_cast5_fu_633_p1 + tmp_7_cast_reg_903);

assign tmp_fu_557_p4 = {{imageIn[31:2]}};

assign tmp_s_fu_507_p1 = imageOut4_fu_497_p4;

always @ (posedge ap_clk) begin
    IMAGE_OUT3_addr_reg_848[31:30] <= 2'b00;
    IMAGE_OUT2_addr_reg_854[31:30] <= 2'b00;
    IMAGE_OUT1_addr_reg_860[31:30] <= 2'b00;
    IMAGE_OUT0_addr_reg_866[31:30] <= 2'b00;
    tmp_13_cast_reg_872[30] <= 1'b0;
    tmp_1_reg_887[10:0] <= 11'b00000000000;
    tmp_7_cast_reg_903[9:0] <= 10'b0000000000;
    tmp_7_cast_reg_903[17] <= 1'b0;
end

endmodule //dwt
