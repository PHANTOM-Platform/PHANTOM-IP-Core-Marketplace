-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dwt is
generic (
    C_M_AXI_IMAGE_IN_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT3_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT3_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT1_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_OUT0_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT2_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_OUT1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_OUT2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IMAGE_IN_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT0_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT0_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_OUT0_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_OUT0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT0_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT0_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_OUT0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT0_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT0_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT0_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT1_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT1_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_OUT1_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_OUT1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT1_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT1_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_OUT1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT1_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT1_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT1_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT2_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT2_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_OUT2_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_OUT2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT2_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT2_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_OUT2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT2_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT2_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT2_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT3_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT3_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_OUT3_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_OUT3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT3_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT3_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_OUT3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT3_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT3_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT3_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dwt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dwt,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=329059,HLS_SYN_TPT=none,HLS_SYN_MEM=522,HLS_SYN_DSP=28,HLS_SYN_FF=6790,HLS_SYN_LUT=8593}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv18_800 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal imageIn : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut1 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut2 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut3 : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal IMAGE_IN_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal exitcond1_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT0_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT0_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter29 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT0_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal IMAGE_OUT1_blk_n_AW : STD_LOGIC;
    signal IMAGE_OUT1_blk_n_W : STD_LOGIC;
    signal IMAGE_OUT1_blk_n_B : STD_LOGIC;
    signal IMAGE_OUT2_blk_n_AW : STD_LOGIC;
    signal IMAGE_OUT2_blk_n_W : STD_LOGIC;
    signal IMAGE_OUT2_blk_n_B : STD_LOGIC;
    signal IMAGE_OUT3_blk_n_AW : STD_LOGIC;
    signal IMAGE_OUT3_blk_n_W : STD_LOGIC;
    signal IMAGE_OUT3_blk_n_B : STD_LOGIC;
    signal IMAGE_IN_AWREADY : STD_LOGIC;
    signal IMAGE_IN_WREADY : STD_LOGIC;
    signal IMAGE_IN_ARVALID : STD_LOGIC;
    signal IMAGE_IN_ARREADY : STD_LOGIC;
    signal IMAGE_IN_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN_RVALID : STD_LOGIC;
    signal IMAGE_IN_RREADY : STD_LOGIC;
    signal IMAGE_IN_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN_RLAST : STD_LOGIC;
    signal IMAGE_IN_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN_BVALID : STD_LOGIC;
    signal IMAGE_IN_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT0_AWVALID : STD_LOGIC;
    signal IMAGE_OUT0_AWREADY : STD_LOGIC;
    signal IMAGE_OUT0_WVALID : STD_LOGIC;
    signal IMAGE_OUT0_WREADY : STD_LOGIC;
    signal IMAGE_OUT0_ARREADY : STD_LOGIC;
    signal IMAGE_OUT0_RVALID : STD_LOGIC;
    signal IMAGE_OUT0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT0_RLAST : STD_LOGIC;
    signal IMAGE_OUT0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT0_BVALID : STD_LOGIC;
    signal IMAGE_OUT0_BREADY : STD_LOGIC;
    signal IMAGE_OUT0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT1_AWVALID : STD_LOGIC;
    signal IMAGE_OUT1_AWREADY : STD_LOGIC;
    signal IMAGE_OUT1_WVALID : STD_LOGIC;
    signal IMAGE_OUT1_WREADY : STD_LOGIC;
    signal IMAGE_OUT1_ARREADY : STD_LOGIC;
    signal IMAGE_OUT1_RVALID : STD_LOGIC;
    signal IMAGE_OUT1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT1_RLAST : STD_LOGIC;
    signal IMAGE_OUT1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT1_BVALID : STD_LOGIC;
    signal IMAGE_OUT1_BREADY : STD_LOGIC;
    signal IMAGE_OUT1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT2_AWVALID : STD_LOGIC;
    signal IMAGE_OUT2_AWREADY : STD_LOGIC;
    signal IMAGE_OUT2_WVALID : STD_LOGIC;
    signal IMAGE_OUT2_WREADY : STD_LOGIC;
    signal IMAGE_OUT2_ARREADY : STD_LOGIC;
    signal IMAGE_OUT2_RVALID : STD_LOGIC;
    signal IMAGE_OUT2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT2_RLAST : STD_LOGIC;
    signal IMAGE_OUT2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT2_BVALID : STD_LOGIC;
    signal IMAGE_OUT2_BREADY : STD_LOGIC;
    signal IMAGE_OUT2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT3_AWVALID : STD_LOGIC;
    signal IMAGE_OUT3_AWREADY : STD_LOGIC;
    signal IMAGE_OUT3_WVALID : STD_LOGIC;
    signal IMAGE_OUT3_WREADY : STD_LOGIC;
    signal IMAGE_OUT3_ARREADY : STD_LOGIC;
    signal IMAGE_OUT3_RVALID : STD_LOGIC;
    signal IMAGE_OUT3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT3_RLAST : STD_LOGIC;
    signal IMAGE_OUT3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT3_BVALID : STD_LOGIC;
    signal IMAGE_OUT3_BREADY : STD_LOGIC;
    signal IMAGE_OUT3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_338 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar1_reg_349 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_reg_360 : STD_LOGIC_VECTOR (16 downto 0);
    signal rows1_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal cols_reg_382 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT3_addr_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT2_addr_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT1_addr_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT0_addr_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_541_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_cast_reg_843 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_ioackin_IMAGE_OUT0_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_OUT1_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_OUT2_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_OUT3_AWREADY : STD_LOGIC;
    signal tmp_10_fu_553_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_853 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_557_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_858 : STD_LOGIC_VECTOR (17 downto 0);
    signal imageIn2_sum_fu_569_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageIn2_sum_reg_863 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_ioackin_IMAGE_IN_ARREADY : STD_LOGIC;
    signal tmp_7_cast_fu_591_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_cast_reg_874 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_601_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_27_fu_611_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_reg_889 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_27_reg_889 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_reg_894 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_9_reg_894 : STD_LOGIC_VECTOR (6 downto 0);
    signal imageIn2_sum1_fu_650_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageIn2_sum1_reg_899 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond1_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter1_exitcond1_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_671_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_28_fu_681_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_reg_919 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_pipeline_reg_pp1_iter1_tmp_28_reg_919 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_reg_924 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp1_iter1_tmp_19_reg_924 : STD_LOGIC_VECTOR (6 downto 0);
    signal rows_1_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond_flatten_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_sig_ioackin_IMAGE_OUT0_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_OUT1_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_OUT2_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_OUT3_WREADY : STD_LOGIC;
    signal ap_pipeline_reg_pp2_iter1_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter2_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter3_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter4_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter5_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter6_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter7_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter8_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter9_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter10_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter11_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter12_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter13_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter14_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter15_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter16_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter17_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter18_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter19_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter20_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter21_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter22_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter23_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter24_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter25_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter26_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter27_exitcond_flatten_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_723_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal cols_mid2_fu_743_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal cols_mid2_reg_943 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_mid2_v_v_fu_751_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_mid2_v_v_reg_948 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_mid2_v_reg_953 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_769_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_959 : STD_LOGIC_VECTOR (10 downto 0);
    signal cols_1_fu_773_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_even_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel0_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal image_even_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel1_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_odd_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel2_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_odd_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel3_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_line1_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter11_diff_line1_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter12_diff_line1_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter13_diff_line1_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter14_diff_line1_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter15_diff_line1_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1024 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_line2_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter11_diff_line2_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter12_diff_line2_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter13_diff_line2_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter14_diff_line2_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter15_diff_line2_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_line1_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_line2_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal LH_pixel_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter24_LH_pixel_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter25_LH_pixel_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter26_LH_pixel_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter27_LH_pixel_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter28_LH_pixel_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal HH_pixel_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter24_HH_pixel_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter25_HH_pixel_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter26_HH_pixel_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter27_HH_pixel_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp2_iter28_HH_pixel_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal LL_pixel_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal HL_pixel_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter28 : STD_LOGIC := '0';
    signal image_even_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal image_even_ce0 : STD_LOGIC;
    signal image_even_we0 : STD_LOGIC;
    signal image_even_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal image_even_ce1 : STD_LOGIC;
    signal image_odd_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal image_odd_ce0 : STD_LOGIC;
    signal image_odd_we0 : STD_LOGIC;
    signal image_odd_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal image_odd_ce1 : STD_LOGIC;
    signal rows_reg_326 : STD_LOGIC_VECTOR (7 downto 0);
    signal rows1_phi_fu_375_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageIn2_sum_cast_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageIn2_sum1_cast_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_IMAGE_OUT0_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT0_WREADY : STD_LOGIC := '0';
    signal ap_condition_1260 : BOOLEAN;
    signal ap_reg_ioackin_IMAGE_OUT1_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT1_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT2_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT2_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT3_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT3_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_IN_ARREADY : STD_LOGIC := '0';
    signal imageOut_fu_451_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageOut4_fu_471_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageOut5_fu_491_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageOut6_fu_511_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_531_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_cast_fu_565_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_584_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_cast5_fu_607_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_615_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_fu_630_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_641_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_cast_fu_646_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar1_cast3_fu_677_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_fu_685_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_700_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_735_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_2_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_779_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_34_cast_fu_786_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_24_cast_fu_790_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_15_fu_793_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_16_fu_805_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_810_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_393_ce : STD_LOGIC;
    signal grp_fu_397_ce : STD_LOGIC;
    signal grp_fu_401_ce : STD_LOGIC;
    signal grp_fu_405_ce : STD_LOGIC;
    signal grp_fu_409_ce : STD_LOGIC;
    signal grp_fu_413_ce : STD_LOGIC;
    signal grp_fu_417_ce : STD_LOGIC;
    signal grp_fu_421_ce : STD_LOGIC;
    signal grp_fu_425_ce : STD_LOGIC;
    signal grp_fu_430_ce : STD_LOGIC;
    signal grp_fu_435_ce : STD_LOGIC;
    signal grp_fu_440_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_condition_817 : BOOLEAN;
    signal ap_condition_924 : BOOLEAN;

    component dwt_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dwt_fsub_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dwt_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dwt_image_even IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dwt_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        imageIn : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageOut0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageOut1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageOut2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageOut3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dwt_IMAGE_IN_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dwt_IMAGE_OUT0_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dwt_IMAGE_OUT1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dwt_IMAGE_OUT2_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dwt_IMAGE_OUT3_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dwt_CONTROL_BUS_s_axi_U : component dwt_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        imageIn => imageIn,
        imageOut0 => imageOut0,
        imageOut1 => imageOut1,
        imageOut2 => imageOut2,
        imageOut3 => imageOut3);

    dwt_IMAGE_IN_m_axi_U : component dwt_IMAGE_IN_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN_AWVALID,
        AWREADY => m_axi_IMAGE_IN_AWREADY,
        AWADDR => m_axi_IMAGE_IN_AWADDR,
        AWID => m_axi_IMAGE_IN_AWID,
        AWLEN => m_axi_IMAGE_IN_AWLEN,
        AWSIZE => m_axi_IMAGE_IN_AWSIZE,
        AWBURST => m_axi_IMAGE_IN_AWBURST,
        AWLOCK => m_axi_IMAGE_IN_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN_AWCACHE,
        AWPROT => m_axi_IMAGE_IN_AWPROT,
        AWQOS => m_axi_IMAGE_IN_AWQOS,
        AWREGION => m_axi_IMAGE_IN_AWREGION,
        AWUSER => m_axi_IMAGE_IN_AWUSER,
        WVALID => m_axi_IMAGE_IN_WVALID,
        WREADY => m_axi_IMAGE_IN_WREADY,
        WDATA => m_axi_IMAGE_IN_WDATA,
        WSTRB => m_axi_IMAGE_IN_WSTRB,
        WLAST => m_axi_IMAGE_IN_WLAST,
        WID => m_axi_IMAGE_IN_WID,
        WUSER => m_axi_IMAGE_IN_WUSER,
        ARVALID => m_axi_IMAGE_IN_ARVALID,
        ARREADY => m_axi_IMAGE_IN_ARREADY,
        ARADDR => m_axi_IMAGE_IN_ARADDR,
        ARID => m_axi_IMAGE_IN_ARID,
        ARLEN => m_axi_IMAGE_IN_ARLEN,
        ARSIZE => m_axi_IMAGE_IN_ARSIZE,
        ARBURST => m_axi_IMAGE_IN_ARBURST,
        ARLOCK => m_axi_IMAGE_IN_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN_ARCACHE,
        ARPROT => m_axi_IMAGE_IN_ARPROT,
        ARQOS => m_axi_IMAGE_IN_ARQOS,
        ARREGION => m_axi_IMAGE_IN_ARREGION,
        ARUSER => m_axi_IMAGE_IN_ARUSER,
        RVALID => m_axi_IMAGE_IN_RVALID,
        RREADY => m_axi_IMAGE_IN_RREADY,
        RDATA => m_axi_IMAGE_IN_RDATA,
        RLAST => m_axi_IMAGE_IN_RLAST,
        RID => m_axi_IMAGE_IN_RID,
        RUSER => m_axi_IMAGE_IN_RUSER,
        RRESP => m_axi_IMAGE_IN_RRESP,
        BVALID => m_axi_IMAGE_IN_BVALID,
        BREADY => m_axi_IMAGE_IN_BREADY,
        BRESP => m_axi_IMAGE_IN_BRESP,
        BID => m_axi_IMAGE_IN_BID,
        BUSER => m_axi_IMAGE_IN_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN_ARVALID,
        I_ARREADY => IMAGE_IN_ARREADY,
        I_ARADDR => IMAGE_IN_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_800,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN_RVALID,
        I_RREADY => IMAGE_IN_RREADY,
        I_RDATA => IMAGE_IN_RDATA,
        I_RID => IMAGE_IN_RID,
        I_RUSER => IMAGE_IN_RUSER,
        I_RRESP => IMAGE_IN_RRESP,
        I_RLAST => IMAGE_IN_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN_BRESP,
        I_BID => IMAGE_IN_BID,
        I_BUSER => IMAGE_IN_BUSER);

    dwt_IMAGE_OUT0_m_axi_U : component dwt_IMAGE_OUT0_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_OUT0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_OUT0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_OUT0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_OUT0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_OUT0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_OUT0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_OUT0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_OUT0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_OUT0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_OUT0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_OUT0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_OUT0_AWVALID,
        AWREADY => m_axi_IMAGE_OUT0_AWREADY,
        AWADDR => m_axi_IMAGE_OUT0_AWADDR,
        AWID => m_axi_IMAGE_OUT0_AWID,
        AWLEN => m_axi_IMAGE_OUT0_AWLEN,
        AWSIZE => m_axi_IMAGE_OUT0_AWSIZE,
        AWBURST => m_axi_IMAGE_OUT0_AWBURST,
        AWLOCK => m_axi_IMAGE_OUT0_AWLOCK,
        AWCACHE => m_axi_IMAGE_OUT0_AWCACHE,
        AWPROT => m_axi_IMAGE_OUT0_AWPROT,
        AWQOS => m_axi_IMAGE_OUT0_AWQOS,
        AWREGION => m_axi_IMAGE_OUT0_AWREGION,
        AWUSER => m_axi_IMAGE_OUT0_AWUSER,
        WVALID => m_axi_IMAGE_OUT0_WVALID,
        WREADY => m_axi_IMAGE_OUT0_WREADY,
        WDATA => m_axi_IMAGE_OUT0_WDATA,
        WSTRB => m_axi_IMAGE_OUT0_WSTRB,
        WLAST => m_axi_IMAGE_OUT0_WLAST,
        WID => m_axi_IMAGE_OUT0_WID,
        WUSER => m_axi_IMAGE_OUT0_WUSER,
        ARVALID => m_axi_IMAGE_OUT0_ARVALID,
        ARREADY => m_axi_IMAGE_OUT0_ARREADY,
        ARADDR => m_axi_IMAGE_OUT0_ARADDR,
        ARID => m_axi_IMAGE_OUT0_ARID,
        ARLEN => m_axi_IMAGE_OUT0_ARLEN,
        ARSIZE => m_axi_IMAGE_OUT0_ARSIZE,
        ARBURST => m_axi_IMAGE_OUT0_ARBURST,
        ARLOCK => m_axi_IMAGE_OUT0_ARLOCK,
        ARCACHE => m_axi_IMAGE_OUT0_ARCACHE,
        ARPROT => m_axi_IMAGE_OUT0_ARPROT,
        ARQOS => m_axi_IMAGE_OUT0_ARQOS,
        ARREGION => m_axi_IMAGE_OUT0_ARREGION,
        ARUSER => m_axi_IMAGE_OUT0_ARUSER,
        RVALID => m_axi_IMAGE_OUT0_RVALID,
        RREADY => m_axi_IMAGE_OUT0_RREADY,
        RDATA => m_axi_IMAGE_OUT0_RDATA,
        RLAST => m_axi_IMAGE_OUT0_RLAST,
        RID => m_axi_IMAGE_OUT0_RID,
        RUSER => m_axi_IMAGE_OUT0_RUSER,
        RRESP => m_axi_IMAGE_OUT0_RRESP,
        BVALID => m_axi_IMAGE_OUT0_BVALID,
        BREADY => m_axi_IMAGE_OUT0_BREADY,
        BRESP => m_axi_IMAGE_OUT0_BRESP,
        BID => m_axi_IMAGE_OUT0_BID,
        BUSER => m_axi_IMAGE_OUT0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => IMAGE_OUT0_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_OUT0_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => IMAGE_OUT0_RDATA,
        I_RID => IMAGE_OUT0_RID,
        I_RUSER => IMAGE_OUT0_RUSER,
        I_RRESP => IMAGE_OUT0_RRESP,
        I_RLAST => IMAGE_OUT0_RLAST,
        I_AWVALID => IMAGE_OUT0_AWVALID,
        I_AWREADY => IMAGE_OUT0_AWREADY,
        I_AWADDR => IMAGE_OUT0_addr_reg_838,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_10000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => IMAGE_OUT0_WVALID,
        I_WREADY => IMAGE_OUT0_WREADY,
        I_WDATA => LL_pixel_reg_1067,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => IMAGE_OUT0_BVALID,
        I_BREADY => IMAGE_OUT0_BREADY,
        I_BRESP => IMAGE_OUT0_BRESP,
        I_BID => IMAGE_OUT0_BID,
        I_BUSER => IMAGE_OUT0_BUSER);

    dwt_IMAGE_OUT1_m_axi_U : component dwt_IMAGE_OUT1_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_OUT1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_OUT1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_OUT1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_OUT1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_OUT1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_OUT1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_OUT1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_OUT1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_OUT1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_OUT1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_OUT1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_OUT1_AWVALID,
        AWREADY => m_axi_IMAGE_OUT1_AWREADY,
        AWADDR => m_axi_IMAGE_OUT1_AWADDR,
        AWID => m_axi_IMAGE_OUT1_AWID,
        AWLEN => m_axi_IMAGE_OUT1_AWLEN,
        AWSIZE => m_axi_IMAGE_OUT1_AWSIZE,
        AWBURST => m_axi_IMAGE_OUT1_AWBURST,
        AWLOCK => m_axi_IMAGE_OUT1_AWLOCK,
        AWCACHE => m_axi_IMAGE_OUT1_AWCACHE,
        AWPROT => m_axi_IMAGE_OUT1_AWPROT,
        AWQOS => m_axi_IMAGE_OUT1_AWQOS,
        AWREGION => m_axi_IMAGE_OUT1_AWREGION,
        AWUSER => m_axi_IMAGE_OUT1_AWUSER,
        WVALID => m_axi_IMAGE_OUT1_WVALID,
        WREADY => m_axi_IMAGE_OUT1_WREADY,
        WDATA => m_axi_IMAGE_OUT1_WDATA,
        WSTRB => m_axi_IMAGE_OUT1_WSTRB,
        WLAST => m_axi_IMAGE_OUT1_WLAST,
        WID => m_axi_IMAGE_OUT1_WID,
        WUSER => m_axi_IMAGE_OUT1_WUSER,
        ARVALID => m_axi_IMAGE_OUT1_ARVALID,
        ARREADY => m_axi_IMAGE_OUT1_ARREADY,
        ARADDR => m_axi_IMAGE_OUT1_ARADDR,
        ARID => m_axi_IMAGE_OUT1_ARID,
        ARLEN => m_axi_IMAGE_OUT1_ARLEN,
        ARSIZE => m_axi_IMAGE_OUT1_ARSIZE,
        ARBURST => m_axi_IMAGE_OUT1_ARBURST,
        ARLOCK => m_axi_IMAGE_OUT1_ARLOCK,
        ARCACHE => m_axi_IMAGE_OUT1_ARCACHE,
        ARPROT => m_axi_IMAGE_OUT1_ARPROT,
        ARQOS => m_axi_IMAGE_OUT1_ARQOS,
        ARREGION => m_axi_IMAGE_OUT1_ARREGION,
        ARUSER => m_axi_IMAGE_OUT1_ARUSER,
        RVALID => m_axi_IMAGE_OUT1_RVALID,
        RREADY => m_axi_IMAGE_OUT1_RREADY,
        RDATA => m_axi_IMAGE_OUT1_RDATA,
        RLAST => m_axi_IMAGE_OUT1_RLAST,
        RID => m_axi_IMAGE_OUT1_RID,
        RUSER => m_axi_IMAGE_OUT1_RUSER,
        RRESP => m_axi_IMAGE_OUT1_RRESP,
        BVALID => m_axi_IMAGE_OUT1_BVALID,
        BREADY => m_axi_IMAGE_OUT1_BREADY,
        BRESP => m_axi_IMAGE_OUT1_BRESP,
        BID => m_axi_IMAGE_OUT1_BID,
        BUSER => m_axi_IMAGE_OUT1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => IMAGE_OUT1_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_OUT1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => IMAGE_OUT1_RDATA,
        I_RID => IMAGE_OUT1_RID,
        I_RUSER => IMAGE_OUT1_RUSER,
        I_RRESP => IMAGE_OUT1_RRESP,
        I_RLAST => IMAGE_OUT1_RLAST,
        I_AWVALID => IMAGE_OUT1_AWVALID,
        I_AWREADY => IMAGE_OUT1_AWREADY,
        I_AWADDR => IMAGE_OUT1_addr_reg_833,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_10000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => IMAGE_OUT1_WVALID,
        I_WREADY => IMAGE_OUT1_WREADY,
        I_WDATA => ap_pipeline_reg_pp2_iter28_LH_pixel_reg_1052,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => IMAGE_OUT1_BVALID,
        I_BREADY => IMAGE_OUT1_BREADY,
        I_BRESP => IMAGE_OUT1_BRESP,
        I_BID => IMAGE_OUT1_BID,
        I_BUSER => IMAGE_OUT1_BUSER);

    dwt_IMAGE_OUT2_m_axi_U : component dwt_IMAGE_OUT2_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_OUT2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_OUT2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_OUT2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_OUT2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_OUT2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_OUT2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_OUT2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_OUT2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_OUT2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_OUT2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_OUT2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_OUT2_AWVALID,
        AWREADY => m_axi_IMAGE_OUT2_AWREADY,
        AWADDR => m_axi_IMAGE_OUT2_AWADDR,
        AWID => m_axi_IMAGE_OUT2_AWID,
        AWLEN => m_axi_IMAGE_OUT2_AWLEN,
        AWSIZE => m_axi_IMAGE_OUT2_AWSIZE,
        AWBURST => m_axi_IMAGE_OUT2_AWBURST,
        AWLOCK => m_axi_IMAGE_OUT2_AWLOCK,
        AWCACHE => m_axi_IMAGE_OUT2_AWCACHE,
        AWPROT => m_axi_IMAGE_OUT2_AWPROT,
        AWQOS => m_axi_IMAGE_OUT2_AWQOS,
        AWREGION => m_axi_IMAGE_OUT2_AWREGION,
        AWUSER => m_axi_IMAGE_OUT2_AWUSER,
        WVALID => m_axi_IMAGE_OUT2_WVALID,
        WREADY => m_axi_IMAGE_OUT2_WREADY,
        WDATA => m_axi_IMAGE_OUT2_WDATA,
        WSTRB => m_axi_IMAGE_OUT2_WSTRB,
        WLAST => m_axi_IMAGE_OUT2_WLAST,
        WID => m_axi_IMAGE_OUT2_WID,
        WUSER => m_axi_IMAGE_OUT2_WUSER,
        ARVALID => m_axi_IMAGE_OUT2_ARVALID,
        ARREADY => m_axi_IMAGE_OUT2_ARREADY,
        ARADDR => m_axi_IMAGE_OUT2_ARADDR,
        ARID => m_axi_IMAGE_OUT2_ARID,
        ARLEN => m_axi_IMAGE_OUT2_ARLEN,
        ARSIZE => m_axi_IMAGE_OUT2_ARSIZE,
        ARBURST => m_axi_IMAGE_OUT2_ARBURST,
        ARLOCK => m_axi_IMAGE_OUT2_ARLOCK,
        ARCACHE => m_axi_IMAGE_OUT2_ARCACHE,
        ARPROT => m_axi_IMAGE_OUT2_ARPROT,
        ARQOS => m_axi_IMAGE_OUT2_ARQOS,
        ARREGION => m_axi_IMAGE_OUT2_ARREGION,
        ARUSER => m_axi_IMAGE_OUT2_ARUSER,
        RVALID => m_axi_IMAGE_OUT2_RVALID,
        RREADY => m_axi_IMAGE_OUT2_RREADY,
        RDATA => m_axi_IMAGE_OUT2_RDATA,
        RLAST => m_axi_IMAGE_OUT2_RLAST,
        RID => m_axi_IMAGE_OUT2_RID,
        RUSER => m_axi_IMAGE_OUT2_RUSER,
        RRESP => m_axi_IMAGE_OUT2_RRESP,
        BVALID => m_axi_IMAGE_OUT2_BVALID,
        BREADY => m_axi_IMAGE_OUT2_BREADY,
        BRESP => m_axi_IMAGE_OUT2_BRESP,
        BID => m_axi_IMAGE_OUT2_BID,
        BUSER => m_axi_IMAGE_OUT2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => IMAGE_OUT2_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_OUT2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => IMAGE_OUT2_RDATA,
        I_RID => IMAGE_OUT2_RID,
        I_RUSER => IMAGE_OUT2_RUSER,
        I_RRESP => IMAGE_OUT2_RRESP,
        I_RLAST => IMAGE_OUT2_RLAST,
        I_AWVALID => IMAGE_OUT2_AWVALID,
        I_AWREADY => IMAGE_OUT2_AWREADY,
        I_AWADDR => IMAGE_OUT2_addr_reg_828,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_10000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => IMAGE_OUT2_WVALID,
        I_WREADY => IMAGE_OUT2_WREADY,
        I_WDATA => HL_pixel_reg_1072,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => IMAGE_OUT2_BVALID,
        I_BREADY => IMAGE_OUT2_BREADY,
        I_BRESP => IMAGE_OUT2_BRESP,
        I_BID => IMAGE_OUT2_BID,
        I_BUSER => IMAGE_OUT2_BUSER);

    dwt_IMAGE_OUT3_m_axi_U : component dwt_IMAGE_OUT3_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_OUT3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_OUT3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_OUT3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_OUT3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_OUT3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_OUT3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_OUT3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_OUT3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_OUT3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_OUT3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_OUT3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_OUT3_AWVALID,
        AWREADY => m_axi_IMAGE_OUT3_AWREADY,
        AWADDR => m_axi_IMAGE_OUT3_AWADDR,
        AWID => m_axi_IMAGE_OUT3_AWID,
        AWLEN => m_axi_IMAGE_OUT3_AWLEN,
        AWSIZE => m_axi_IMAGE_OUT3_AWSIZE,
        AWBURST => m_axi_IMAGE_OUT3_AWBURST,
        AWLOCK => m_axi_IMAGE_OUT3_AWLOCK,
        AWCACHE => m_axi_IMAGE_OUT3_AWCACHE,
        AWPROT => m_axi_IMAGE_OUT3_AWPROT,
        AWQOS => m_axi_IMAGE_OUT3_AWQOS,
        AWREGION => m_axi_IMAGE_OUT3_AWREGION,
        AWUSER => m_axi_IMAGE_OUT3_AWUSER,
        WVALID => m_axi_IMAGE_OUT3_WVALID,
        WREADY => m_axi_IMAGE_OUT3_WREADY,
        WDATA => m_axi_IMAGE_OUT3_WDATA,
        WSTRB => m_axi_IMAGE_OUT3_WSTRB,
        WLAST => m_axi_IMAGE_OUT3_WLAST,
        WID => m_axi_IMAGE_OUT3_WID,
        WUSER => m_axi_IMAGE_OUT3_WUSER,
        ARVALID => m_axi_IMAGE_OUT3_ARVALID,
        ARREADY => m_axi_IMAGE_OUT3_ARREADY,
        ARADDR => m_axi_IMAGE_OUT3_ARADDR,
        ARID => m_axi_IMAGE_OUT3_ARID,
        ARLEN => m_axi_IMAGE_OUT3_ARLEN,
        ARSIZE => m_axi_IMAGE_OUT3_ARSIZE,
        ARBURST => m_axi_IMAGE_OUT3_ARBURST,
        ARLOCK => m_axi_IMAGE_OUT3_ARLOCK,
        ARCACHE => m_axi_IMAGE_OUT3_ARCACHE,
        ARPROT => m_axi_IMAGE_OUT3_ARPROT,
        ARQOS => m_axi_IMAGE_OUT3_ARQOS,
        ARREGION => m_axi_IMAGE_OUT3_ARREGION,
        ARUSER => m_axi_IMAGE_OUT3_ARUSER,
        RVALID => m_axi_IMAGE_OUT3_RVALID,
        RREADY => m_axi_IMAGE_OUT3_RREADY,
        RDATA => m_axi_IMAGE_OUT3_RDATA,
        RLAST => m_axi_IMAGE_OUT3_RLAST,
        RID => m_axi_IMAGE_OUT3_RID,
        RUSER => m_axi_IMAGE_OUT3_RUSER,
        RRESP => m_axi_IMAGE_OUT3_RRESP,
        BVALID => m_axi_IMAGE_OUT3_BVALID,
        BREADY => m_axi_IMAGE_OUT3_BREADY,
        BRESP => m_axi_IMAGE_OUT3_BRESP,
        BID => m_axi_IMAGE_OUT3_BID,
        BUSER => m_axi_IMAGE_OUT3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => IMAGE_OUT3_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_OUT3_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => IMAGE_OUT3_RDATA,
        I_RID => IMAGE_OUT3_RID,
        I_RUSER => IMAGE_OUT3_RUSER,
        I_RRESP => IMAGE_OUT3_RRESP,
        I_RLAST => IMAGE_OUT3_RLAST,
        I_AWVALID => IMAGE_OUT3_AWVALID,
        I_AWREADY => IMAGE_OUT3_AWREADY,
        I_AWADDR => IMAGE_OUT3_addr_reg_823,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_10000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => IMAGE_OUT3_WVALID,
        I_WREADY => IMAGE_OUT3_WREADY,
        I_WDATA => ap_pipeline_reg_pp2_iter28_HH_pixel_reg_1062,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => IMAGE_OUT3_BVALID,
        I_BREADY => IMAGE_OUT3_BREADY,
        I_BRESP => IMAGE_OUT3_BRESP,
        I_BID => IMAGE_OUT3_BID,
        I_BUSER => IMAGE_OUT3_BUSER);

    image_even_U : component dwt_image_even
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_even_address0,
        ce0 => image_even_ce0,
        we0 => image_even_we0,
        d0 => reg_445,
        q0 => image_even_q0,
        address1 => image_even_address1,
        ce1 => image_even_ce1,
        q1 => image_even_q1);

    image_odd_U : component dwt_image_even
    generic map (
        DataWidth => 32,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_odd_address0,
        ce0 => image_odd_ce0,
        we0 => image_odd_we0,
        d0 => reg_445,
        q0 => image_odd_q0,
        address1 => image_odd_address1,
        ce1 => image_odd_ce1,
        q1 => image_odd_q1);

    dwt_fadd_32ns_32nbkb_U1 : component dwt_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => pixel0_reg_989,
        din1 => pixel1_reg_995,
        ce => grp_fu_393_ce,
        dout => grp_fu_393_p2);

    dwt_fsub_32ns_32ncud_U2 : component dwt_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => pixel0_reg_989,
        din1 => pixel1_reg_995,
        ce => grp_fu_397_ce,
        dout => grp_fu_397_p2);

    dwt_fadd_32ns_32nbkb_U3 : component dwt_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => pixel2_reg_1001,
        din1 => pixel3_reg_1007,
        ce => grp_fu_401_ce,
        dout => grp_fu_401_p2);

    dwt_fsub_32ns_32ncud_U4 : component dwt_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => pixel2_reg_1001,
        din1 => pixel3_reg_1007,
        ce => grp_fu_405_ce,
        dout => grp_fu_405_p2);

    dwt_fadd_32ns_32nbkb_U5 : component dwt_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_line1_reg_1035,
        din1 => sum_line2_reg_1041,
        ce => grp_fu_409_ce,
        dout => grp_fu_409_p2);

    dwt_fsub_32ns_32ncud_U6 : component dwt_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_line1_reg_1035,
        din1 => sum_line2_reg_1041,
        ce => grp_fu_413_ce,
        dout => grp_fu_413_p2);

    dwt_fadd_32ns_32nbkb_U7 : component dwt_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_pipeline_reg_pp2_iter15_diff_line1_reg_1018,
        din1 => ap_pipeline_reg_pp2_iter15_diff_line2_reg_1029,
        ce => grp_fu_417_ce,
        dout => grp_fu_417_p2);

    dwt_fsub_32ns_32ncud_U8 : component dwt_fsub_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_pipeline_reg_pp2_iter15_diff_line1_reg_1018,
        din1 => ap_pipeline_reg_pp2_iter15_diff_line2_reg_1029,
        ce => grp_fu_421_ce,
        dout => grp_fu_421_p2);

    dwt_fmul_32ns_32ndEe_U9 : component dwt_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_23_reg_1013,
        din1 => ap_const_lv32_3F000000,
        ce => grp_fu_425_ce,
        dout => grp_fu_425_p2);

    dwt_fmul_32ns_32ndEe_U10 : component dwt_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_24_reg_1024,
        din1 => ap_const_lv32_3F000000,
        ce => grp_fu_430_ce,
        dout => grp_fu_430_p2);

    dwt_fmul_32ns_32ndEe_U11 : component dwt_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_25_reg_1047,
        din1 => ap_const_lv32_3F000000,
        ce => grp_fu_435_ce,
        dout => grp_fu_435_p2);

    dwt_fmul_32ns_32ndEe_U12 : component dwt_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_26_reg_1057,
        din1 => ap_const_lv32_3F000000,
        ce => grp_fu_440_ce,
        dout => grp_fu_440_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond_fu_595_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond_fu_595_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond_fu_595_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond1_fu_665_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond1_fu_665_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond1_fu_665_p2))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and not((ap_const_lv1_0 = exitcond_flatten_fu_717_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_lv1_0 = exitcond_flatten_fu_717_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and not((ap_const_lv1_0 = exitcond_flatten_fu_717_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter27 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter29 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then 
                    ap_enable_reg_pp2_iter29 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state14) and not((ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN_ARREADY))))) then 
                    ap_reg_ioackin_IMAGE_IN_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = IMAGE_IN_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = IMAGE_IN_ARREADY)))) then 
                    ap_reg_ioackin_IMAGE_IN_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT0_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT0_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then
                    if ((ap_condition_817 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT0_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT0_AWREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT0_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT0_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT0_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then
                    if ((ap_condition_924 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT0_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT0_WREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT0_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT1_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT1_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then
                    if ((ap_condition_817 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT1_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT1_AWREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT1_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT1_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT1_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then
                    if ((ap_condition_924 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT1_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT1_WREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT1_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT2_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT2_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then
                    if ((ap_condition_817 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT2_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT2_AWREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT2_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT2_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT2_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then
                    if ((ap_condition_924 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT2_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT2_WREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT2_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT3_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT3_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then
                    if ((ap_condition_817 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT3_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT3_AWREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT3_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT3_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT3_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then
                    if ((ap_condition_924 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_OUT3_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_OUT3_WREADY)) then 
                        ap_reg_ioackin_IMAGE_OUT3_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    cols_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then 
                cols_reg_382 <= ap_const_lv12_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_717_p2))) then 
                cols_reg_382 <= cols_1_fu_773_p2;
            end if; 
        end if;
    end process;

    indvar1_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond1_fu_665_p2))) then 
                indvar1_reg_349 <= indvar_next1_fu_671_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                indvar1_reg_349 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then 
                indvar_flatten_reg_360 <= ap_const_lv17_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_717_p2))) then 
                indvar_flatten_reg_360 <= indvar_flatten_next_fu_723_p2;
            end if; 
        end if;
    end process;

    indvar_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_fu_595_p2))) then 
                indvar_reg_338 <= indvar_next_fu_601_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                indvar_reg_338 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    rows1_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then 
                rows1_reg_371 <= ap_const_lv8_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_lv1_0 = exitcond_flatten_reg_934) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                rows1_reg_371 <= tmp_12_mid2_v_v_reg_948;
            end if; 
        end if;
    end process;

    rows_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
                rows_reg_326 <= rows_1_fu_711_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                rows_reg_326 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter22_exitcond_flatten_reg_934))) then
                HH_pixel_reg_1062 <= grp_fu_421_p2;
                LH_pixel_reg_1052 <= grp_fu_413_p2;
                tmp_25_reg_1047 <= grp_fu_409_p2;
                tmp_26_reg_1057 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter27_exitcond_flatten_reg_934))) then
                HL_pixel_reg_1072 <= grp_fu_440_p2;
                LL_pixel_reg_1067 <= grp_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                    IMAGE_OUT0_addr_reg_838(29 downto 0) <= tmp_5_fu_521_p1(32 - 1 downto 0)(29 downto 0);
                    IMAGE_OUT1_addr_reg_833(29 downto 0) <= tmp_2_fu_501_p1(32 - 1 downto 0)(29 downto 0);
                    IMAGE_OUT2_addr_reg_828(29 downto 0) <= tmp_s_fu_481_p1(32 - 1 downto 0)(29 downto 0);
                    IMAGE_OUT3_addr_reg_823(29 downto 0) <= tmp_3_fu_461_p1(32 - 1 downto 0)(29 downto 0);
                    tmp_13_cast_reg_843(29 downto 0) <= tmp_13_cast_fu_541_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp0_iter1_exitcond_reg_880 <= exitcond_reg_880;
                ap_pipeline_reg_pp0_iter1_tmp_27_reg_889 <= tmp_27_reg_889;
                ap_pipeline_reg_pp0_iter1_tmp_9_reg_894 <= tmp_9_reg_894;
                exitcond_reg_880 <= exitcond_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp1_iter1_exitcond1_reg_910 <= exitcond1_reg_910;
                ap_pipeline_reg_pp1_iter1_tmp_19_reg_924 <= tmp_19_reg_924;
                ap_pipeline_reg_pp1_iter1_tmp_28_reg_919 <= tmp_28_reg_919;
                exitcond1_reg_910 <= exitcond1_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))))) then
                ap_pipeline_reg_pp2_iter10_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter9_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter11_diff_line1_reg_1018 <= diff_line1_reg_1018;
                ap_pipeline_reg_pp2_iter11_diff_line2_reg_1029 <= diff_line2_reg_1029;
                ap_pipeline_reg_pp2_iter11_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter10_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter12_diff_line1_reg_1018 <= ap_pipeline_reg_pp2_iter11_diff_line1_reg_1018;
                ap_pipeline_reg_pp2_iter12_diff_line2_reg_1029 <= ap_pipeline_reg_pp2_iter11_diff_line2_reg_1029;
                ap_pipeline_reg_pp2_iter12_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter11_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter13_diff_line1_reg_1018 <= ap_pipeline_reg_pp2_iter12_diff_line1_reg_1018;
                ap_pipeline_reg_pp2_iter13_diff_line2_reg_1029 <= ap_pipeline_reg_pp2_iter12_diff_line2_reg_1029;
                ap_pipeline_reg_pp2_iter13_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter12_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter14_diff_line1_reg_1018 <= ap_pipeline_reg_pp2_iter13_diff_line1_reg_1018;
                ap_pipeline_reg_pp2_iter14_diff_line2_reg_1029 <= ap_pipeline_reg_pp2_iter13_diff_line2_reg_1029;
                ap_pipeline_reg_pp2_iter14_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter13_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter15_diff_line1_reg_1018 <= ap_pipeline_reg_pp2_iter14_diff_line1_reg_1018;
                ap_pipeline_reg_pp2_iter15_diff_line2_reg_1029 <= ap_pipeline_reg_pp2_iter14_diff_line2_reg_1029;
                ap_pipeline_reg_pp2_iter15_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter14_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter16_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter15_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter17_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter16_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter18_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter17_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter19_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter18_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter20_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter19_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter21_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter20_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter22_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter21_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter23_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter22_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter24_HH_pixel_reg_1062 <= HH_pixel_reg_1062;
                ap_pipeline_reg_pp2_iter24_LH_pixel_reg_1052 <= LH_pixel_reg_1052;
                ap_pipeline_reg_pp2_iter24_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter23_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter25_HH_pixel_reg_1062 <= ap_pipeline_reg_pp2_iter24_HH_pixel_reg_1062;
                ap_pipeline_reg_pp2_iter25_LH_pixel_reg_1052 <= ap_pipeline_reg_pp2_iter24_LH_pixel_reg_1052;
                ap_pipeline_reg_pp2_iter25_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter24_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter26_HH_pixel_reg_1062 <= ap_pipeline_reg_pp2_iter25_HH_pixel_reg_1062;
                ap_pipeline_reg_pp2_iter26_LH_pixel_reg_1052 <= ap_pipeline_reg_pp2_iter25_LH_pixel_reg_1052;
                ap_pipeline_reg_pp2_iter26_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter25_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter27_HH_pixel_reg_1062 <= ap_pipeline_reg_pp2_iter26_HH_pixel_reg_1062;
                ap_pipeline_reg_pp2_iter27_LH_pixel_reg_1052 <= ap_pipeline_reg_pp2_iter26_LH_pixel_reg_1052;
                ap_pipeline_reg_pp2_iter27_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter26_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter28_HH_pixel_reg_1062 <= ap_pipeline_reg_pp2_iter27_HH_pixel_reg_1062;
                ap_pipeline_reg_pp2_iter28_LH_pixel_reg_1052 <= ap_pipeline_reg_pp2_iter27_LH_pixel_reg_1052;
                ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter27_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter2_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter1_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter3_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter2_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter4_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter3_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter5_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter4_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter6_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter5_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter7_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter6_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter8_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter7_exitcond_flatten_reg_934;
                ap_pipeline_reg_pp2_iter9_exitcond_flatten_reg_934 <= ap_pipeline_reg_pp2_iter8_exitcond_flatten_reg_934;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then
                ap_pipeline_reg_pp2_iter1_exitcond_flatten_reg_934 <= exitcond_flatten_reg_934;
                exitcond_flatten_reg_934 <= exitcond_flatten_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_lv1_0 = exitcond_flatten_fu_717_p2))) then
                cols_mid2_reg_943 <= cols_mid2_fu_743_p3;
                tmp_12_mid2_v_reg_953 <= tmp_12_mid2_v_v_fu_751_p3(7 downto 1);
                tmp_13_reg_959 <= tmp_13_fu_769_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter9_exitcond_flatten_reg_934))) then
                diff_line1_reg_1018 <= grp_fu_397_p2;
                diff_line2_reg_1029 <= grp_fu_405_p2;
                tmp_23_reg_1013 <= grp_fu_393_p2;
                tmp_24_reg_1024 <= grp_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                imageIn2_sum1_reg_899 <= imageIn2_sum1_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_6_fu_545_p3) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then
                imageIn2_sum_reg_863 <= imageIn2_sum_fu_569_p2;
                tmp_10_reg_853 <= tmp_10_fu_553_p1;
                    tmp_1_reg_858(17 downto 11) <= tmp_1_fu_557_p3(17 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond_flatten_reg_934))) then
                pixel0_reg_989 <= image_even_q0;
                pixel1_reg_995 <= image_even_q1;
                pixel2_reg_1001 <= image_odd_q0;
                pixel3_reg_1007 <= image_odd_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0)))))) then
                reg_445 <= IMAGE_IN_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter14_exitcond_flatten_reg_934))) then
                sum_line1_reg_1035 <= grp_fu_425_p2;
                sum_line2_reg_1041 <= grp_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_717_p2))) then
                tmp_12_mid2_v_v_reg_948 <= tmp_12_mid2_v_v_fu_751_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond1_fu_665_p2))) then
                tmp_19_reg_924 <= tmp_17_fu_685_p2(17 downto 11);
                tmp_28_reg_919 <= tmp_28_fu_681_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond_fu_595_p2))) then
                tmp_27_reg_889 <= tmp_27_fu_611_p1;
                tmp_9_reg_894 <= tmp_8_fu_615_p2(17 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                    tmp_7_cast_reg_874(16 downto 10) <= tmp_7_cast_fu_591_p1(16 downto 10);
            end if;
        end if;
    end process;
    IMAGE_OUT3_addr_reg_823(31 downto 30) <= "00";
    IMAGE_OUT2_addr_reg_828(31 downto 30) <= "00";
    IMAGE_OUT1_addr_reg_833(31 downto 30) <= "00";
    IMAGE_OUT0_addr_reg_838(31 downto 30) <= "00";
    tmp_13_cast_reg_843(30) <= '0';
    tmp_1_reg_858(10 downto 0) <= "00000000000";
    tmp_7_cast_reg_874(9 downto 0) <= "0000000000";
    tmp_7_cast_reg_874(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter1, exitcond_reg_880, ap_enable_reg_pp1_iter1, exitcond1_reg_910, tmp_6_fu_545_p3, ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, IMAGE_IN_RVALID, ap_sig_ioackin_IMAGE_OUT0_AWREADY, ap_sig_ioackin_IMAGE_OUT1_AWREADY, ap_sig_ioackin_IMAGE_OUT2_AWREADY, ap_sig_ioackin_IMAGE_OUT3_AWREADY, ap_sig_ioackin_IMAGE_IN_ARREADY, exitcond_fu_595_p2, ap_enable_reg_pp0_iter0, exitcond1_fu_665_p2, ap_enable_reg_pp1_iter0, exitcond_flatten_fu_717_p2, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter28, ap_condition_1260)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_lv1_0 = tmp_6_fu_545_p3) and not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_fu_595_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_fu_595_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond1_fu_665_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond1_fu_665_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter28)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_717_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter28))) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_717_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (not((ap_condition_1260 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    IMAGE_IN_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14, imageIn2_sum_cast_fu_574_p1, imageIn2_sum1_cast_fu_655_p1, ap_reg_ioackin_IMAGE_IN_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN_ARREADY)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_state14)) then 
                IMAGE_IN_ARADDR <= imageIn2_sum1_cast_fu_655_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state3)) then 
                IMAGE_IN_ARADDR <= imageIn2_sum_cast_fu_574_p1(32 - 1 downto 0);
            else 
                IMAGE_IN_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            IMAGE_IN_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMAGE_IN_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14, ap_reg_ioackin_IMAGE_IN_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state14) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN_ARREADY)))) then 
            IMAGE_IN_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_880, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond1_reg_910, IMAGE_IN_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0)))))) then 
            IMAGE_IN_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then 
            IMAGE_IN_blk_n_AR <= m_axi_IMAGE_IN_ARREADY;
        else 
            IMAGE_IN_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN_blk_n_R_assign_proc : process(m_axi_IMAGE_IN_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_880, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond1_reg_910)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910)))) then 
            IMAGE_IN_blk_n_R <= m_axi_IMAGE_IN_RVALID;
        else 
            IMAGE_IN_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT0_AWVALID_assign_proc : process(ap_CS_fsm_state2, tmp_6_fu_545_p3, ap_reg_ioackin_IMAGE_OUT0_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT0_AWREADY))) then 
            IMAGE_OUT0_AWVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT0_BREADY_assign_proc : process(ap_CS_fsm_state59, ap_condition_1260)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59) and not((ap_condition_1260 = ap_const_boolean_1)))) then 
            IMAGE_OUT0_BREADY <= ap_const_logic_1;
        else 
            IMAGE_OUT0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT0_WVALID_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_reg_ioackin_IMAGE_OUT0_WREADY)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT0_WREADY))) then 
            IMAGE_OUT0_WVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT0_blk_n_AW_assign_proc : process(m_axi_IMAGE_OUT0_AWREADY, ap_CS_fsm_state2, tmp_6_fu_545_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then 
            IMAGE_OUT0_blk_n_AW <= m_axi_IMAGE_OUT0_AWREADY;
        else 
            IMAGE_OUT0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT0_blk_n_B_assign_proc : process(m_axi_IMAGE_OUT0_BVALID, ap_CS_fsm_state59)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
            IMAGE_OUT0_blk_n_B <= m_axi_IMAGE_OUT0_BVALID;
        else 
            IMAGE_OUT0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT0_blk_n_W_assign_proc : process(m_axi_IMAGE_OUT0_WREADY, ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then 
            IMAGE_OUT0_blk_n_W <= m_axi_IMAGE_OUT0_WREADY;
        else 
            IMAGE_OUT0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT1_AWVALID_assign_proc : process(ap_CS_fsm_state2, tmp_6_fu_545_p3, ap_reg_ioackin_IMAGE_OUT1_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT1_AWREADY))) then 
            IMAGE_OUT1_AWVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT1_BREADY_assign_proc : process(ap_CS_fsm_state59, ap_condition_1260)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59) and not((ap_condition_1260 = ap_const_boolean_1)))) then 
            IMAGE_OUT1_BREADY <= ap_const_logic_1;
        else 
            IMAGE_OUT1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT1_WVALID_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_reg_ioackin_IMAGE_OUT1_WREADY)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT1_WREADY))) then 
            IMAGE_OUT1_WVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT1_blk_n_AW_assign_proc : process(m_axi_IMAGE_OUT1_AWREADY, ap_CS_fsm_state2, tmp_6_fu_545_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then 
            IMAGE_OUT1_blk_n_AW <= m_axi_IMAGE_OUT1_AWREADY;
        else 
            IMAGE_OUT1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT1_blk_n_B_assign_proc : process(m_axi_IMAGE_OUT1_BVALID, ap_CS_fsm_state59)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
            IMAGE_OUT1_blk_n_B <= m_axi_IMAGE_OUT1_BVALID;
        else 
            IMAGE_OUT1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT1_blk_n_W_assign_proc : process(m_axi_IMAGE_OUT1_WREADY, ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then 
            IMAGE_OUT1_blk_n_W <= m_axi_IMAGE_OUT1_WREADY;
        else 
            IMAGE_OUT1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT2_AWVALID_assign_proc : process(ap_CS_fsm_state2, tmp_6_fu_545_p3, ap_reg_ioackin_IMAGE_OUT2_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT2_AWREADY))) then 
            IMAGE_OUT2_AWVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT2_BREADY_assign_proc : process(ap_CS_fsm_state59, ap_condition_1260)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59) and not((ap_condition_1260 = ap_const_boolean_1)))) then 
            IMAGE_OUT2_BREADY <= ap_const_logic_1;
        else 
            IMAGE_OUT2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT2_WVALID_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_reg_ioackin_IMAGE_OUT2_WREADY)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT2_WREADY))) then 
            IMAGE_OUT2_WVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT2_blk_n_AW_assign_proc : process(m_axi_IMAGE_OUT2_AWREADY, ap_CS_fsm_state2, tmp_6_fu_545_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then 
            IMAGE_OUT2_blk_n_AW <= m_axi_IMAGE_OUT2_AWREADY;
        else 
            IMAGE_OUT2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT2_blk_n_B_assign_proc : process(m_axi_IMAGE_OUT2_BVALID, ap_CS_fsm_state59)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
            IMAGE_OUT2_blk_n_B <= m_axi_IMAGE_OUT2_BVALID;
        else 
            IMAGE_OUT2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT2_blk_n_W_assign_proc : process(m_axi_IMAGE_OUT2_WREADY, ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then 
            IMAGE_OUT2_blk_n_W <= m_axi_IMAGE_OUT2_WREADY;
        else 
            IMAGE_OUT2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT3_AWVALID_assign_proc : process(ap_CS_fsm_state2, tmp_6_fu_545_p3, ap_reg_ioackin_IMAGE_OUT3_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT3_AWREADY))) then 
            IMAGE_OUT3_AWVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT3_BREADY_assign_proc : process(ap_CS_fsm_state59, ap_condition_1260)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59) and not((ap_condition_1260 = ap_const_boolean_1)))) then 
            IMAGE_OUT3_BREADY <= ap_const_logic_1;
        else 
            IMAGE_OUT3_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT3_WVALID_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_reg_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT3_WREADY))) then 
            IMAGE_OUT3_WVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT3_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT3_blk_n_AW_assign_proc : process(m_axi_IMAGE_OUT3_AWREADY, ap_CS_fsm_state2, tmp_6_fu_545_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_6_fu_545_p3)))) then 
            IMAGE_OUT3_blk_n_AW <= m_axi_IMAGE_OUT3_AWREADY;
        else 
            IMAGE_OUT3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT3_blk_n_B_assign_proc : process(m_axi_IMAGE_OUT3_BVALID, ap_CS_fsm_state59)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
            IMAGE_OUT3_blk_n_B <= m_axi_IMAGE_OUT3_BVALID;
        else 
            IMAGE_OUT3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT3_blk_n_W_assign_proc : process(m_axi_IMAGE_OUT3_WREADY, ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934))) then 
            IMAGE_OUT3_blk_n_W <= m_axi_IMAGE_OUT3_WREADY;
        else 
            IMAGE_OUT3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state59 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_condition_1260_assign_proc : process(IMAGE_OUT0_BVALID, IMAGE_OUT1_BVALID, IMAGE_OUT2_BVALID, IMAGE_OUT3_BVALID)
    begin
                ap_condition_1260 <= ((IMAGE_OUT3_BVALID = ap_const_logic_0) or (IMAGE_OUT2_BVALID = ap_const_logic_0) or (IMAGE_OUT1_BVALID = ap_const_logic_0) or (IMAGE_OUT0_BVALID = ap_const_logic_0));
    end process;


    ap_condition_817_assign_proc : process(tmp_6_fu_545_p3, ap_sig_ioackin_IMAGE_OUT0_AWREADY, ap_sig_ioackin_IMAGE_OUT1_AWREADY, ap_sig_ioackin_IMAGE_OUT2_AWREADY, ap_sig_ioackin_IMAGE_OUT3_AWREADY)
    begin
                ap_condition_817 <= not(((not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_AWREADY)) or (not((ap_const_lv1_0 = tmp_6_fu_545_p3)) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_AWREADY))));
    end process;


    ap_condition_924_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
                ap_condition_924 <= not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY)))));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state59, ap_condition_1260)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59) and not((ap_condition_1260 = ap_const_boolean_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state59, ap_condition_1260)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state59) and not((ap_condition_1260 = ap_const_boolean_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_IMAGE_IN_ARREADY_assign_proc : process(IMAGE_IN_ARREADY, ap_reg_ioackin_IMAGE_IN_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN_ARREADY)) then 
            ap_sig_ioackin_IMAGE_IN_ARREADY <= IMAGE_IN_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT0_AWREADY_assign_proc : process(IMAGE_OUT0_AWREADY, ap_reg_ioackin_IMAGE_OUT0_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT0_AWREADY)) then 
            ap_sig_ioackin_IMAGE_OUT0_AWREADY <= IMAGE_OUT0_AWREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT0_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT0_WREADY_assign_proc : process(IMAGE_OUT0_WREADY, ap_reg_ioackin_IMAGE_OUT0_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT0_WREADY)) then 
            ap_sig_ioackin_IMAGE_OUT0_WREADY <= IMAGE_OUT0_WREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT0_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT1_AWREADY_assign_proc : process(IMAGE_OUT1_AWREADY, ap_reg_ioackin_IMAGE_OUT1_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT1_AWREADY)) then 
            ap_sig_ioackin_IMAGE_OUT1_AWREADY <= IMAGE_OUT1_AWREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT1_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT1_WREADY_assign_proc : process(IMAGE_OUT1_WREADY, ap_reg_ioackin_IMAGE_OUT1_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT1_WREADY)) then 
            ap_sig_ioackin_IMAGE_OUT1_WREADY <= IMAGE_OUT1_WREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT1_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT2_AWREADY_assign_proc : process(IMAGE_OUT2_AWREADY, ap_reg_ioackin_IMAGE_OUT2_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT2_AWREADY)) then 
            ap_sig_ioackin_IMAGE_OUT2_AWREADY <= IMAGE_OUT2_AWREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT2_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT2_WREADY_assign_proc : process(IMAGE_OUT2_WREADY, ap_reg_ioackin_IMAGE_OUT2_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT2_WREADY)) then 
            ap_sig_ioackin_IMAGE_OUT2_WREADY <= IMAGE_OUT2_WREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT2_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT3_AWREADY_assign_proc : process(IMAGE_OUT3_AWREADY, ap_reg_ioackin_IMAGE_OUT3_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT3_AWREADY)) then 
            ap_sig_ioackin_IMAGE_OUT3_AWREADY <= IMAGE_OUT3_AWREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT3_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT3_WREADY_assign_proc : process(IMAGE_OUT3_WREADY, ap_reg_ioackin_IMAGE_OUT3_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT3_WREADY)) then 
            ap_sig_ioackin_IMAGE_OUT3_WREADY <= IMAGE_OUT3_WREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT3_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    cols_1_fu_773_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(cols_mid2_fu_743_p3));
    cols_mid2_fu_743_p3 <= 
        ap_const_lv12_0 when (tmp_11_fu_735_p3(0) = '1') else 
        cols_reg_382;
    exitcond1_fu_665_p2 <= "1" when (indvar1_reg_349 = ap_const_lv12_800) else "0";
    exitcond_flatten_fu_717_p2 <= "1" when (indvar_flatten_reg_360 = ap_const_lv17_10000) else "0";
    exitcond_fu_595_p2 <= "1" when (indvar_reg_338 = ap_const_lv12_800) else "0";

    grp_fu_393_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_393_ce <= ap_const_logic_1;
        else 
            grp_fu_393_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_397_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_397_ce <= ap_const_logic_1;
        else 
            grp_fu_397_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_401_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_401_ce <= ap_const_logic_1;
        else 
            grp_fu_401_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_405_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_405_ce <= ap_const_logic_1;
        else 
            grp_fu_405_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_409_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_409_ce <= ap_const_logic_1;
        else 
            grp_fu_409_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_413_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_413_ce <= ap_const_logic_1;
        else 
            grp_fu_413_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_417_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_417_ce <= ap_const_logic_1;
        else 
            grp_fu_417_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_421_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_421_ce <= ap_const_logic_1;
        else 
            grp_fu_421_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_425_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_425_ce <= ap_const_logic_1;
        else 
            grp_fu_425_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_430_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_430_ce <= ap_const_logic_1;
        else 
            grp_fu_430_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_435_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_435_ce <= ap_const_logic_1;
        else 
            grp_fu_435_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_440_ce_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))))) then 
            grp_fu_440_ce <= ap_const_logic_1;
        else 
            grp_fu_440_ce <= ap_const_logic_0;
        end if; 
    end process;

    imageIn2_sum1_cast_fu_655_p1 <= std_logic_vector(resize(unsigned(imageIn2_sum1_reg_899),64));
    imageIn2_sum1_fu_650_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_646_p1) + unsigned(tmp_13_cast_reg_843));
    imageIn2_sum_cast_fu_574_p1 <= std_logic_vector(resize(unsigned(imageIn2_sum_reg_863),64));
    imageIn2_sum_fu_569_p2 <= std_logic_vector(unsigned(tmp_13_cast_reg_843) + unsigned(tmp_2_cast_fu_565_p1));
    imageOut4_fu_471_p4 <= imageOut2(31 downto 2);
    imageOut5_fu_491_p4 <= imageOut1(31 downto 2);
    imageOut6_fu_511_p4 <= imageOut0(31 downto 2);
    imageOut_fu_451_p4 <= imageOut3(31 downto 2);

    image_even_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter1, tmp_22_fu_636_p1, tmp_36_cast_fu_799_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            image_even_address0 <= tmp_36_cast_fu_799_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            image_even_address0 <= tmp_22_fu_636_p1(17 - 1 downto 0);
        else 
            image_even_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_even_address1 <= tmp_20_fu_817_p1(17 - 1 downto 0);

    image_even_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_880, ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, IMAGE_IN_RVALID, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1)) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            image_even_ce0 <= ap_const_logic_1;
        else 
            image_even_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_even_ce1_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            image_even_ce1 <= ap_const_logic_1;
        else 
            image_even_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_even_we0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_880, IMAGE_IN_RVALID, ap_pipeline_reg_pp0_iter1_exitcond_reg_880, ap_enable_reg_pp0_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_880 = ap_const_lv1_0) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_reg_880)))) then 
            image_even_we0 <= ap_const_logic_1;
        else 
            image_even_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_odd_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, tmp_30_fu_706_p1, tmp_36_cast_fu_799_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            image_odd_address0 <= tmp_36_cast_fu_799_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp1_iter2)) then 
            image_odd_address0 <= tmp_30_fu_706_p1(17 - 1 downto 0);
        else 
            image_odd_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_odd_address1 <= tmp_20_fu_817_p1(17 - 1 downto 0);

    image_odd_ce0_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_910, ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, IMAGE_IN_RVALID, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1)) or (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)))) then 
            image_odd_ce0 <= ap_const_logic_1;
        else 
            image_odd_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_odd_ce1_assign_proc : process(ap_enable_reg_pp2_iter29, ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934, ap_CS_fsm_pp2_stage0, ap_sig_ioackin_IMAGE_OUT0_WREADY, ap_sig_ioackin_IMAGE_OUT1_WREADY, ap_sig_ioackin_IMAGE_OUT2_WREADY, ap_sig_ioackin_IMAGE_OUT3_WREADY, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter29) and (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT0_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT1_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT2_WREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter28_exitcond_flatten_reg_934) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT3_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            image_odd_ce1 <= ap_const_logic_1;
        else 
            image_odd_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_odd_we0_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_910, IMAGE_IN_RVALID, ap_pipeline_reg_pp1_iter1_exitcond1_reg_910, ap_enable_reg_pp1_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_910) and (IMAGE_IN_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond1_reg_910)))) then 
            image_odd_we0 <= ap_const_logic_1;
        else 
            image_odd_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar1_cast3_fu_677_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_349),18));
    indvar_cast5_fu_607_p1 <= std_logic_vector(resize(unsigned(indvar_reg_338),18));
    indvar_flatten_next_fu_723_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_360) + unsigned(ap_const_lv17_1));
    indvar_next1_fu_671_p2 <= std_logic_vector(unsigned(indvar1_reg_349) + unsigned(ap_const_lv12_1));
    indvar_next_fu_601_p2 <= std_logic_vector(unsigned(indvar_reg_338) + unsigned(ap_const_lv12_1));

    rows1_phi_fu_375_p4_assign_proc : process(exitcond_flatten_reg_934, rows1_reg_371, ap_CS_fsm_pp2_stage0, tmp_12_mid2_v_v_reg_948, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_934) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            rows1_phi_fu_375_p4 <= tmp_12_mid2_v_v_reg_948;
        else 
            rows1_phi_fu_375_p4 <= rows1_reg_371;
        end if; 
    end process;

    rows_1_fu_711_p2 <= std_logic_vector(unsigned(rows_reg_326) + unsigned(ap_const_lv8_2));
    rows_2_fu_729_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(rows1_phi_fu_375_p4));
    tmp_10_fu_553_p1 <= rows_reg_326(7 - 1 downto 0);
    tmp_11_fu_735_p3 <= cols_reg_382(11 downto 11);
    tmp_12_fu_779_p3 <= (tmp_12_mid2_v_reg_953 & ap_const_lv11_0);
    tmp_12_mid2_v_v_fu_751_p3 <= 
        rows_2_fu_729_p2 when (tmp_11_fu_735_p3(0) = '1') else 
        rows1_phi_fu_375_p4;
    tmp_13_cast_fu_541_p1 <= std_logic_vector(resize(unsigned(tmp_fu_531_p4),31));
    tmp_13_fu_769_p1 <= cols_mid2_fu_743_p3(11 - 1 downto 0);
    tmp_15_fu_793_p2 <= std_logic_vector(unsigned(tmp_34_cast_fu_786_p1) + unsigned(tmp_24_cast_fu_790_p1));
    tmp_16_fu_805_p2 <= (tmp_13_reg_959 or ap_const_lv11_1);
    tmp_17_fu_685_p2 <= std_logic_vector(unsigned(indvar1_cast3_fu_677_p1) + unsigned(tmp_7_cast_reg_874));
    tmp_18_fu_810_p3 <= (tmp_12_mid2_v_reg_953 & tmp_16_fu_805_p2);
    tmp_1_fu_557_p3 <= (tmp_10_fu_553_p1 & ap_const_lv11_0);
    tmp_20_fu_817_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_810_p3),64));
    tmp_21_fu_630_p3 <= (ap_pipeline_reg_pp0_iter1_tmp_9_reg_894 & ap_pipeline_reg_pp0_iter1_tmp_27_reg_889);
    tmp_22_fu_636_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_630_p3),64));
    tmp_24_cast_fu_790_p1 <= std_logic_vector(resize(unsigned(cols_mid2_reg_943),19));
    tmp_27_fu_611_p1 <= indvar_reg_338(11 - 1 downto 0);
    tmp_28_fu_681_p1 <= indvar1_reg_349(11 - 1 downto 0);
    tmp_29_fu_700_p3 <= (ap_pipeline_reg_pp1_iter1_tmp_19_reg_924 & ap_pipeline_reg_pp1_iter1_tmp_28_reg_919);
    tmp_2_cast_fu_565_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_557_p3),31));
    tmp_2_fu_501_p1 <= std_logic_vector(resize(unsigned(imageOut5_fu_491_p4),64));
    tmp_30_fu_706_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_700_p3),64));
    tmp_34_cast_fu_786_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_779_p3),19));
    tmp_36_cast_fu_799_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_793_p2),64));
    tmp_3_fu_461_p1 <= std_logic_vector(resize(unsigned(imageOut_fu_451_p4),64));
    tmp_4_fu_641_p2 <= (tmp_1_reg_858 or ap_const_lv18_800);
    tmp_5_cast_fu_646_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_641_p2),31));
    tmp_5_fu_521_p1 <= std_logic_vector(resize(unsigned(imageOut6_fu_511_p4),64));
    tmp_6_fu_545_p3 <= rows_reg_326(7 downto 7);
    tmp_7_cast_fu_591_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_584_p3),18));
    tmp_7_fu_584_p3 <= (tmp_10_reg_853 & ap_const_lv10_0);
    tmp_8_fu_615_p2 <= std_logic_vector(unsigned(indvar_cast5_fu_607_p1) + unsigned(tmp_7_cast_reg_874));
    tmp_fu_531_p4 <= imageIn(31 downto 2);
    tmp_s_fu_481_p1 <= std_logic_vector(resize(unsigned(imageOut4_fu_471_p4),64));
end behav;
