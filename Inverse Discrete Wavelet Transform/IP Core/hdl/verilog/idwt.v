// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="idwt,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=525178,HLS_SYN_TPT=none,HLS_SYN_MEM=526,HLS_SYN_DSP=20,HLS_SYN_FF=7971,HLS_SYN_LUT=9433}" *)

module idwt (
        ap_clk,
        ap_rst_n,
        m_axi_IMAGE_IN0_AWVALID,
        m_axi_IMAGE_IN0_AWREADY,
        m_axi_IMAGE_IN0_AWADDR,
        m_axi_IMAGE_IN0_AWID,
        m_axi_IMAGE_IN0_AWLEN,
        m_axi_IMAGE_IN0_AWSIZE,
        m_axi_IMAGE_IN0_AWBURST,
        m_axi_IMAGE_IN0_AWLOCK,
        m_axi_IMAGE_IN0_AWCACHE,
        m_axi_IMAGE_IN0_AWPROT,
        m_axi_IMAGE_IN0_AWQOS,
        m_axi_IMAGE_IN0_AWREGION,
        m_axi_IMAGE_IN0_AWUSER,
        m_axi_IMAGE_IN0_WVALID,
        m_axi_IMAGE_IN0_WREADY,
        m_axi_IMAGE_IN0_WDATA,
        m_axi_IMAGE_IN0_WSTRB,
        m_axi_IMAGE_IN0_WLAST,
        m_axi_IMAGE_IN0_WID,
        m_axi_IMAGE_IN0_WUSER,
        m_axi_IMAGE_IN0_ARVALID,
        m_axi_IMAGE_IN0_ARREADY,
        m_axi_IMAGE_IN0_ARADDR,
        m_axi_IMAGE_IN0_ARID,
        m_axi_IMAGE_IN0_ARLEN,
        m_axi_IMAGE_IN0_ARSIZE,
        m_axi_IMAGE_IN0_ARBURST,
        m_axi_IMAGE_IN0_ARLOCK,
        m_axi_IMAGE_IN0_ARCACHE,
        m_axi_IMAGE_IN0_ARPROT,
        m_axi_IMAGE_IN0_ARQOS,
        m_axi_IMAGE_IN0_ARREGION,
        m_axi_IMAGE_IN0_ARUSER,
        m_axi_IMAGE_IN0_RVALID,
        m_axi_IMAGE_IN0_RREADY,
        m_axi_IMAGE_IN0_RDATA,
        m_axi_IMAGE_IN0_RLAST,
        m_axi_IMAGE_IN0_RID,
        m_axi_IMAGE_IN0_RUSER,
        m_axi_IMAGE_IN0_RRESP,
        m_axi_IMAGE_IN0_BVALID,
        m_axi_IMAGE_IN0_BREADY,
        m_axi_IMAGE_IN0_BRESP,
        m_axi_IMAGE_IN0_BID,
        m_axi_IMAGE_IN0_BUSER,
        m_axi_IMAGE_IN1_AWVALID,
        m_axi_IMAGE_IN1_AWREADY,
        m_axi_IMAGE_IN1_AWADDR,
        m_axi_IMAGE_IN1_AWID,
        m_axi_IMAGE_IN1_AWLEN,
        m_axi_IMAGE_IN1_AWSIZE,
        m_axi_IMAGE_IN1_AWBURST,
        m_axi_IMAGE_IN1_AWLOCK,
        m_axi_IMAGE_IN1_AWCACHE,
        m_axi_IMAGE_IN1_AWPROT,
        m_axi_IMAGE_IN1_AWQOS,
        m_axi_IMAGE_IN1_AWREGION,
        m_axi_IMAGE_IN1_AWUSER,
        m_axi_IMAGE_IN1_WVALID,
        m_axi_IMAGE_IN1_WREADY,
        m_axi_IMAGE_IN1_WDATA,
        m_axi_IMAGE_IN1_WSTRB,
        m_axi_IMAGE_IN1_WLAST,
        m_axi_IMAGE_IN1_WID,
        m_axi_IMAGE_IN1_WUSER,
        m_axi_IMAGE_IN1_ARVALID,
        m_axi_IMAGE_IN1_ARREADY,
        m_axi_IMAGE_IN1_ARADDR,
        m_axi_IMAGE_IN1_ARID,
        m_axi_IMAGE_IN1_ARLEN,
        m_axi_IMAGE_IN1_ARSIZE,
        m_axi_IMAGE_IN1_ARBURST,
        m_axi_IMAGE_IN1_ARLOCK,
        m_axi_IMAGE_IN1_ARCACHE,
        m_axi_IMAGE_IN1_ARPROT,
        m_axi_IMAGE_IN1_ARQOS,
        m_axi_IMAGE_IN1_ARREGION,
        m_axi_IMAGE_IN1_ARUSER,
        m_axi_IMAGE_IN1_RVALID,
        m_axi_IMAGE_IN1_RREADY,
        m_axi_IMAGE_IN1_RDATA,
        m_axi_IMAGE_IN1_RLAST,
        m_axi_IMAGE_IN1_RID,
        m_axi_IMAGE_IN1_RUSER,
        m_axi_IMAGE_IN1_RRESP,
        m_axi_IMAGE_IN1_BVALID,
        m_axi_IMAGE_IN1_BREADY,
        m_axi_IMAGE_IN1_BRESP,
        m_axi_IMAGE_IN1_BID,
        m_axi_IMAGE_IN1_BUSER,
        m_axi_IMAGE_IN2_AWVALID,
        m_axi_IMAGE_IN2_AWREADY,
        m_axi_IMAGE_IN2_AWADDR,
        m_axi_IMAGE_IN2_AWID,
        m_axi_IMAGE_IN2_AWLEN,
        m_axi_IMAGE_IN2_AWSIZE,
        m_axi_IMAGE_IN2_AWBURST,
        m_axi_IMAGE_IN2_AWLOCK,
        m_axi_IMAGE_IN2_AWCACHE,
        m_axi_IMAGE_IN2_AWPROT,
        m_axi_IMAGE_IN2_AWQOS,
        m_axi_IMAGE_IN2_AWREGION,
        m_axi_IMAGE_IN2_AWUSER,
        m_axi_IMAGE_IN2_WVALID,
        m_axi_IMAGE_IN2_WREADY,
        m_axi_IMAGE_IN2_WDATA,
        m_axi_IMAGE_IN2_WSTRB,
        m_axi_IMAGE_IN2_WLAST,
        m_axi_IMAGE_IN2_WID,
        m_axi_IMAGE_IN2_WUSER,
        m_axi_IMAGE_IN2_ARVALID,
        m_axi_IMAGE_IN2_ARREADY,
        m_axi_IMAGE_IN2_ARADDR,
        m_axi_IMAGE_IN2_ARID,
        m_axi_IMAGE_IN2_ARLEN,
        m_axi_IMAGE_IN2_ARSIZE,
        m_axi_IMAGE_IN2_ARBURST,
        m_axi_IMAGE_IN2_ARLOCK,
        m_axi_IMAGE_IN2_ARCACHE,
        m_axi_IMAGE_IN2_ARPROT,
        m_axi_IMAGE_IN2_ARQOS,
        m_axi_IMAGE_IN2_ARREGION,
        m_axi_IMAGE_IN2_ARUSER,
        m_axi_IMAGE_IN2_RVALID,
        m_axi_IMAGE_IN2_RREADY,
        m_axi_IMAGE_IN2_RDATA,
        m_axi_IMAGE_IN2_RLAST,
        m_axi_IMAGE_IN2_RID,
        m_axi_IMAGE_IN2_RUSER,
        m_axi_IMAGE_IN2_RRESP,
        m_axi_IMAGE_IN2_BVALID,
        m_axi_IMAGE_IN2_BREADY,
        m_axi_IMAGE_IN2_BRESP,
        m_axi_IMAGE_IN2_BID,
        m_axi_IMAGE_IN2_BUSER,
        m_axi_IMAGE_IN3_AWVALID,
        m_axi_IMAGE_IN3_AWREADY,
        m_axi_IMAGE_IN3_AWADDR,
        m_axi_IMAGE_IN3_AWID,
        m_axi_IMAGE_IN3_AWLEN,
        m_axi_IMAGE_IN3_AWSIZE,
        m_axi_IMAGE_IN3_AWBURST,
        m_axi_IMAGE_IN3_AWLOCK,
        m_axi_IMAGE_IN3_AWCACHE,
        m_axi_IMAGE_IN3_AWPROT,
        m_axi_IMAGE_IN3_AWQOS,
        m_axi_IMAGE_IN3_AWREGION,
        m_axi_IMAGE_IN3_AWUSER,
        m_axi_IMAGE_IN3_WVALID,
        m_axi_IMAGE_IN3_WREADY,
        m_axi_IMAGE_IN3_WDATA,
        m_axi_IMAGE_IN3_WSTRB,
        m_axi_IMAGE_IN3_WLAST,
        m_axi_IMAGE_IN3_WID,
        m_axi_IMAGE_IN3_WUSER,
        m_axi_IMAGE_IN3_ARVALID,
        m_axi_IMAGE_IN3_ARREADY,
        m_axi_IMAGE_IN3_ARADDR,
        m_axi_IMAGE_IN3_ARID,
        m_axi_IMAGE_IN3_ARLEN,
        m_axi_IMAGE_IN3_ARSIZE,
        m_axi_IMAGE_IN3_ARBURST,
        m_axi_IMAGE_IN3_ARLOCK,
        m_axi_IMAGE_IN3_ARCACHE,
        m_axi_IMAGE_IN3_ARPROT,
        m_axi_IMAGE_IN3_ARQOS,
        m_axi_IMAGE_IN3_ARREGION,
        m_axi_IMAGE_IN3_ARUSER,
        m_axi_IMAGE_IN3_RVALID,
        m_axi_IMAGE_IN3_RREADY,
        m_axi_IMAGE_IN3_RDATA,
        m_axi_IMAGE_IN3_RLAST,
        m_axi_IMAGE_IN3_RID,
        m_axi_IMAGE_IN3_RUSER,
        m_axi_IMAGE_IN3_RRESP,
        m_axi_IMAGE_IN3_BVALID,
        m_axi_IMAGE_IN3_BREADY,
        m_axi_IMAGE_IN3_BRESP,
        m_axi_IMAGE_IN3_BID,
        m_axi_IMAGE_IN3_BUSER,
        m_axi_IMAGE_OUT_AWVALID,
        m_axi_IMAGE_OUT_AWREADY,
        m_axi_IMAGE_OUT_AWADDR,
        m_axi_IMAGE_OUT_AWID,
        m_axi_IMAGE_OUT_AWLEN,
        m_axi_IMAGE_OUT_AWSIZE,
        m_axi_IMAGE_OUT_AWBURST,
        m_axi_IMAGE_OUT_AWLOCK,
        m_axi_IMAGE_OUT_AWCACHE,
        m_axi_IMAGE_OUT_AWPROT,
        m_axi_IMAGE_OUT_AWQOS,
        m_axi_IMAGE_OUT_AWREGION,
        m_axi_IMAGE_OUT_AWUSER,
        m_axi_IMAGE_OUT_WVALID,
        m_axi_IMAGE_OUT_WREADY,
        m_axi_IMAGE_OUT_WDATA,
        m_axi_IMAGE_OUT_WSTRB,
        m_axi_IMAGE_OUT_WLAST,
        m_axi_IMAGE_OUT_WID,
        m_axi_IMAGE_OUT_WUSER,
        m_axi_IMAGE_OUT_ARVALID,
        m_axi_IMAGE_OUT_ARREADY,
        m_axi_IMAGE_OUT_ARADDR,
        m_axi_IMAGE_OUT_ARID,
        m_axi_IMAGE_OUT_ARLEN,
        m_axi_IMAGE_OUT_ARSIZE,
        m_axi_IMAGE_OUT_ARBURST,
        m_axi_IMAGE_OUT_ARLOCK,
        m_axi_IMAGE_OUT_ARCACHE,
        m_axi_IMAGE_OUT_ARPROT,
        m_axi_IMAGE_OUT_ARQOS,
        m_axi_IMAGE_OUT_ARREGION,
        m_axi_IMAGE_OUT_ARUSER,
        m_axi_IMAGE_OUT_RVALID,
        m_axi_IMAGE_OUT_RREADY,
        m_axi_IMAGE_OUT_RDATA,
        m_axi_IMAGE_OUT_RLAST,
        m_axi_IMAGE_OUT_RID,
        m_axi_IMAGE_OUT_RUSER,
        m_axi_IMAGE_OUT_RRESP,
        m_axi_IMAGE_OUT_BVALID,
        m_axi_IMAGE_OUT_BREADY,
        m_axi_IMAGE_OUT_BRESP,
        m_axi_IMAGE_OUT_BID,
        m_axi_IMAGE_OUT_BUSER,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_pp0_stage0 = 22'd512;
parameter    ap_ST_fsm_state13 = 22'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 22'd2048;
parameter    ap_ST_fsm_state17 = 22'd4096;
parameter    ap_ST_fsm_pp2_stage0 = 22'd8192;
parameter    ap_ST_fsm_state21 = 22'd16384;
parameter    ap_ST_fsm_pp3_stage0 = 22'd32768;
parameter    ap_ST_fsm_state25 = 22'd65536;
parameter    ap_ST_fsm_pp4_stage0 = 22'd131072;
parameter    ap_ST_fsm_pp4_stage1 = 22'd262144;
parameter    ap_ST_fsm_pp4_stage2 = 22'd524288;
parameter    ap_ST_fsm_pp4_stage3 = 22'd1048576;
parameter    ap_ST_fsm_state79 = 22'd2097152;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN0_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN0_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN0_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN0_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN0_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN0_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN0_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN0_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN1_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN1_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN1_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN1_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN1_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN1_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN1_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN1_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN1_CACHE_VALUE = 3;
parameter    C_M_AXI_IMAGE_IN2_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN2_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN2_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN2_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN2_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN2_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN2_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN2_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN2_CACHE_VALUE = 3;
parameter    C_M_AXI_IMAGE_IN3_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN3_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN3_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_IN3_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN3_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN3_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN3_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN3_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_IN3_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN3_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_IN3_CACHE_VALUE = 3;
parameter    C_M_AXI_IMAGE_OUT_ID_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT_DATA_WIDTH = 32;
parameter    C_M_AXI_IMAGE_OUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMAGE_OUT_USER_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT_PROT_VALUE = 0;
parameter    C_M_AXI_IMAGE_OUT_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_IN0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_IN1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_IN2_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_IN3_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMAGE_OUT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IMAGE_IN0_AWVALID;
input   m_axi_IMAGE_IN0_AWREADY;
output  [C_M_AXI_IMAGE_IN0_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN0_AWADDR;
output  [C_M_AXI_IMAGE_IN0_ID_WIDTH - 1:0] m_axi_IMAGE_IN0_AWID;
output  [7:0] m_axi_IMAGE_IN0_AWLEN;
output  [2:0] m_axi_IMAGE_IN0_AWSIZE;
output  [1:0] m_axi_IMAGE_IN0_AWBURST;
output  [1:0] m_axi_IMAGE_IN0_AWLOCK;
output  [3:0] m_axi_IMAGE_IN0_AWCACHE;
output  [2:0] m_axi_IMAGE_IN0_AWPROT;
output  [3:0] m_axi_IMAGE_IN0_AWQOS;
output  [3:0] m_axi_IMAGE_IN0_AWREGION;
output  [C_M_AXI_IMAGE_IN0_AWUSER_WIDTH - 1:0] m_axi_IMAGE_IN0_AWUSER;
output   m_axi_IMAGE_IN0_WVALID;
input   m_axi_IMAGE_IN0_WREADY;
output  [C_M_AXI_IMAGE_IN0_DATA_WIDTH - 1:0] m_axi_IMAGE_IN0_WDATA;
output  [C_M_AXI_IMAGE_IN0_WSTRB_WIDTH - 1:0] m_axi_IMAGE_IN0_WSTRB;
output   m_axi_IMAGE_IN0_WLAST;
output  [C_M_AXI_IMAGE_IN0_ID_WIDTH - 1:0] m_axi_IMAGE_IN0_WID;
output  [C_M_AXI_IMAGE_IN0_WUSER_WIDTH - 1:0] m_axi_IMAGE_IN0_WUSER;
output   m_axi_IMAGE_IN0_ARVALID;
input   m_axi_IMAGE_IN0_ARREADY;
output  [C_M_AXI_IMAGE_IN0_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN0_ARADDR;
output  [C_M_AXI_IMAGE_IN0_ID_WIDTH - 1:0] m_axi_IMAGE_IN0_ARID;
output  [7:0] m_axi_IMAGE_IN0_ARLEN;
output  [2:0] m_axi_IMAGE_IN0_ARSIZE;
output  [1:0] m_axi_IMAGE_IN0_ARBURST;
output  [1:0] m_axi_IMAGE_IN0_ARLOCK;
output  [3:0] m_axi_IMAGE_IN0_ARCACHE;
output  [2:0] m_axi_IMAGE_IN0_ARPROT;
output  [3:0] m_axi_IMAGE_IN0_ARQOS;
output  [3:0] m_axi_IMAGE_IN0_ARREGION;
output  [C_M_AXI_IMAGE_IN0_ARUSER_WIDTH - 1:0] m_axi_IMAGE_IN0_ARUSER;
input   m_axi_IMAGE_IN0_RVALID;
output   m_axi_IMAGE_IN0_RREADY;
input  [C_M_AXI_IMAGE_IN0_DATA_WIDTH - 1:0] m_axi_IMAGE_IN0_RDATA;
input   m_axi_IMAGE_IN0_RLAST;
input  [C_M_AXI_IMAGE_IN0_ID_WIDTH - 1:0] m_axi_IMAGE_IN0_RID;
input  [C_M_AXI_IMAGE_IN0_RUSER_WIDTH - 1:0] m_axi_IMAGE_IN0_RUSER;
input  [1:0] m_axi_IMAGE_IN0_RRESP;
input   m_axi_IMAGE_IN0_BVALID;
output   m_axi_IMAGE_IN0_BREADY;
input  [1:0] m_axi_IMAGE_IN0_BRESP;
input  [C_M_AXI_IMAGE_IN0_ID_WIDTH - 1:0] m_axi_IMAGE_IN0_BID;
input  [C_M_AXI_IMAGE_IN0_BUSER_WIDTH - 1:0] m_axi_IMAGE_IN0_BUSER;
output   m_axi_IMAGE_IN1_AWVALID;
input   m_axi_IMAGE_IN1_AWREADY;
output  [C_M_AXI_IMAGE_IN1_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN1_AWADDR;
output  [C_M_AXI_IMAGE_IN1_ID_WIDTH - 1:0] m_axi_IMAGE_IN1_AWID;
output  [7:0] m_axi_IMAGE_IN1_AWLEN;
output  [2:0] m_axi_IMAGE_IN1_AWSIZE;
output  [1:0] m_axi_IMAGE_IN1_AWBURST;
output  [1:0] m_axi_IMAGE_IN1_AWLOCK;
output  [3:0] m_axi_IMAGE_IN1_AWCACHE;
output  [2:0] m_axi_IMAGE_IN1_AWPROT;
output  [3:0] m_axi_IMAGE_IN1_AWQOS;
output  [3:0] m_axi_IMAGE_IN1_AWREGION;
output  [C_M_AXI_IMAGE_IN1_AWUSER_WIDTH - 1:0] m_axi_IMAGE_IN1_AWUSER;
output   m_axi_IMAGE_IN1_WVALID;
input   m_axi_IMAGE_IN1_WREADY;
output  [C_M_AXI_IMAGE_IN1_DATA_WIDTH - 1:0] m_axi_IMAGE_IN1_WDATA;
output  [C_M_AXI_IMAGE_IN1_WSTRB_WIDTH - 1:0] m_axi_IMAGE_IN1_WSTRB;
output   m_axi_IMAGE_IN1_WLAST;
output  [C_M_AXI_IMAGE_IN1_ID_WIDTH - 1:0] m_axi_IMAGE_IN1_WID;
output  [C_M_AXI_IMAGE_IN1_WUSER_WIDTH - 1:0] m_axi_IMAGE_IN1_WUSER;
output   m_axi_IMAGE_IN1_ARVALID;
input   m_axi_IMAGE_IN1_ARREADY;
output  [C_M_AXI_IMAGE_IN1_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN1_ARADDR;
output  [C_M_AXI_IMAGE_IN1_ID_WIDTH - 1:0] m_axi_IMAGE_IN1_ARID;
output  [7:0] m_axi_IMAGE_IN1_ARLEN;
output  [2:0] m_axi_IMAGE_IN1_ARSIZE;
output  [1:0] m_axi_IMAGE_IN1_ARBURST;
output  [1:0] m_axi_IMAGE_IN1_ARLOCK;
output  [3:0] m_axi_IMAGE_IN1_ARCACHE;
output  [2:0] m_axi_IMAGE_IN1_ARPROT;
output  [3:0] m_axi_IMAGE_IN1_ARQOS;
output  [3:0] m_axi_IMAGE_IN1_ARREGION;
output  [C_M_AXI_IMAGE_IN1_ARUSER_WIDTH - 1:0] m_axi_IMAGE_IN1_ARUSER;
input   m_axi_IMAGE_IN1_RVALID;
output   m_axi_IMAGE_IN1_RREADY;
input  [C_M_AXI_IMAGE_IN1_DATA_WIDTH - 1:0] m_axi_IMAGE_IN1_RDATA;
input   m_axi_IMAGE_IN1_RLAST;
input  [C_M_AXI_IMAGE_IN1_ID_WIDTH - 1:0] m_axi_IMAGE_IN1_RID;
input  [C_M_AXI_IMAGE_IN1_RUSER_WIDTH - 1:0] m_axi_IMAGE_IN1_RUSER;
input  [1:0] m_axi_IMAGE_IN1_RRESP;
input   m_axi_IMAGE_IN1_BVALID;
output   m_axi_IMAGE_IN1_BREADY;
input  [1:0] m_axi_IMAGE_IN1_BRESP;
input  [C_M_AXI_IMAGE_IN1_ID_WIDTH - 1:0] m_axi_IMAGE_IN1_BID;
input  [C_M_AXI_IMAGE_IN1_BUSER_WIDTH - 1:0] m_axi_IMAGE_IN1_BUSER;
output   m_axi_IMAGE_IN2_AWVALID;
input   m_axi_IMAGE_IN2_AWREADY;
output  [C_M_AXI_IMAGE_IN2_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN2_AWADDR;
output  [C_M_AXI_IMAGE_IN2_ID_WIDTH - 1:0] m_axi_IMAGE_IN2_AWID;
output  [7:0] m_axi_IMAGE_IN2_AWLEN;
output  [2:0] m_axi_IMAGE_IN2_AWSIZE;
output  [1:0] m_axi_IMAGE_IN2_AWBURST;
output  [1:0] m_axi_IMAGE_IN2_AWLOCK;
output  [3:0] m_axi_IMAGE_IN2_AWCACHE;
output  [2:0] m_axi_IMAGE_IN2_AWPROT;
output  [3:0] m_axi_IMAGE_IN2_AWQOS;
output  [3:0] m_axi_IMAGE_IN2_AWREGION;
output  [C_M_AXI_IMAGE_IN2_AWUSER_WIDTH - 1:0] m_axi_IMAGE_IN2_AWUSER;
output   m_axi_IMAGE_IN2_WVALID;
input   m_axi_IMAGE_IN2_WREADY;
output  [C_M_AXI_IMAGE_IN2_DATA_WIDTH - 1:0] m_axi_IMAGE_IN2_WDATA;
output  [C_M_AXI_IMAGE_IN2_WSTRB_WIDTH - 1:0] m_axi_IMAGE_IN2_WSTRB;
output   m_axi_IMAGE_IN2_WLAST;
output  [C_M_AXI_IMAGE_IN2_ID_WIDTH - 1:0] m_axi_IMAGE_IN2_WID;
output  [C_M_AXI_IMAGE_IN2_WUSER_WIDTH - 1:0] m_axi_IMAGE_IN2_WUSER;
output   m_axi_IMAGE_IN2_ARVALID;
input   m_axi_IMAGE_IN2_ARREADY;
output  [C_M_AXI_IMAGE_IN2_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN2_ARADDR;
output  [C_M_AXI_IMAGE_IN2_ID_WIDTH - 1:0] m_axi_IMAGE_IN2_ARID;
output  [7:0] m_axi_IMAGE_IN2_ARLEN;
output  [2:0] m_axi_IMAGE_IN2_ARSIZE;
output  [1:0] m_axi_IMAGE_IN2_ARBURST;
output  [1:0] m_axi_IMAGE_IN2_ARLOCK;
output  [3:0] m_axi_IMAGE_IN2_ARCACHE;
output  [2:0] m_axi_IMAGE_IN2_ARPROT;
output  [3:0] m_axi_IMAGE_IN2_ARQOS;
output  [3:0] m_axi_IMAGE_IN2_ARREGION;
output  [C_M_AXI_IMAGE_IN2_ARUSER_WIDTH - 1:0] m_axi_IMAGE_IN2_ARUSER;
input   m_axi_IMAGE_IN2_RVALID;
output   m_axi_IMAGE_IN2_RREADY;
input  [C_M_AXI_IMAGE_IN2_DATA_WIDTH - 1:0] m_axi_IMAGE_IN2_RDATA;
input   m_axi_IMAGE_IN2_RLAST;
input  [C_M_AXI_IMAGE_IN2_ID_WIDTH - 1:0] m_axi_IMAGE_IN2_RID;
input  [C_M_AXI_IMAGE_IN2_RUSER_WIDTH - 1:0] m_axi_IMAGE_IN2_RUSER;
input  [1:0] m_axi_IMAGE_IN2_RRESP;
input   m_axi_IMAGE_IN2_BVALID;
output   m_axi_IMAGE_IN2_BREADY;
input  [1:0] m_axi_IMAGE_IN2_BRESP;
input  [C_M_AXI_IMAGE_IN2_ID_WIDTH - 1:0] m_axi_IMAGE_IN2_BID;
input  [C_M_AXI_IMAGE_IN2_BUSER_WIDTH - 1:0] m_axi_IMAGE_IN2_BUSER;
output   m_axi_IMAGE_IN3_AWVALID;
input   m_axi_IMAGE_IN3_AWREADY;
output  [C_M_AXI_IMAGE_IN3_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN3_AWADDR;
output  [C_M_AXI_IMAGE_IN3_ID_WIDTH - 1:0] m_axi_IMAGE_IN3_AWID;
output  [7:0] m_axi_IMAGE_IN3_AWLEN;
output  [2:0] m_axi_IMAGE_IN3_AWSIZE;
output  [1:0] m_axi_IMAGE_IN3_AWBURST;
output  [1:0] m_axi_IMAGE_IN3_AWLOCK;
output  [3:0] m_axi_IMAGE_IN3_AWCACHE;
output  [2:0] m_axi_IMAGE_IN3_AWPROT;
output  [3:0] m_axi_IMAGE_IN3_AWQOS;
output  [3:0] m_axi_IMAGE_IN3_AWREGION;
output  [C_M_AXI_IMAGE_IN3_AWUSER_WIDTH - 1:0] m_axi_IMAGE_IN3_AWUSER;
output   m_axi_IMAGE_IN3_WVALID;
input   m_axi_IMAGE_IN3_WREADY;
output  [C_M_AXI_IMAGE_IN3_DATA_WIDTH - 1:0] m_axi_IMAGE_IN3_WDATA;
output  [C_M_AXI_IMAGE_IN3_WSTRB_WIDTH - 1:0] m_axi_IMAGE_IN3_WSTRB;
output   m_axi_IMAGE_IN3_WLAST;
output  [C_M_AXI_IMAGE_IN3_ID_WIDTH - 1:0] m_axi_IMAGE_IN3_WID;
output  [C_M_AXI_IMAGE_IN3_WUSER_WIDTH - 1:0] m_axi_IMAGE_IN3_WUSER;
output   m_axi_IMAGE_IN3_ARVALID;
input   m_axi_IMAGE_IN3_ARREADY;
output  [C_M_AXI_IMAGE_IN3_ADDR_WIDTH - 1:0] m_axi_IMAGE_IN3_ARADDR;
output  [C_M_AXI_IMAGE_IN3_ID_WIDTH - 1:0] m_axi_IMAGE_IN3_ARID;
output  [7:0] m_axi_IMAGE_IN3_ARLEN;
output  [2:0] m_axi_IMAGE_IN3_ARSIZE;
output  [1:0] m_axi_IMAGE_IN3_ARBURST;
output  [1:0] m_axi_IMAGE_IN3_ARLOCK;
output  [3:0] m_axi_IMAGE_IN3_ARCACHE;
output  [2:0] m_axi_IMAGE_IN3_ARPROT;
output  [3:0] m_axi_IMAGE_IN3_ARQOS;
output  [3:0] m_axi_IMAGE_IN3_ARREGION;
output  [C_M_AXI_IMAGE_IN3_ARUSER_WIDTH - 1:0] m_axi_IMAGE_IN3_ARUSER;
input   m_axi_IMAGE_IN3_RVALID;
output   m_axi_IMAGE_IN3_RREADY;
input  [C_M_AXI_IMAGE_IN3_DATA_WIDTH - 1:0] m_axi_IMAGE_IN3_RDATA;
input   m_axi_IMAGE_IN3_RLAST;
input  [C_M_AXI_IMAGE_IN3_ID_WIDTH - 1:0] m_axi_IMAGE_IN3_RID;
input  [C_M_AXI_IMAGE_IN3_RUSER_WIDTH - 1:0] m_axi_IMAGE_IN3_RUSER;
input  [1:0] m_axi_IMAGE_IN3_RRESP;
input   m_axi_IMAGE_IN3_BVALID;
output   m_axi_IMAGE_IN3_BREADY;
input  [1:0] m_axi_IMAGE_IN3_BRESP;
input  [C_M_AXI_IMAGE_IN3_ID_WIDTH - 1:0] m_axi_IMAGE_IN3_BID;
input  [C_M_AXI_IMAGE_IN3_BUSER_WIDTH - 1:0] m_axi_IMAGE_IN3_BUSER;
output   m_axi_IMAGE_OUT_AWVALID;
input   m_axi_IMAGE_OUT_AWREADY;
output  [C_M_AXI_IMAGE_OUT_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT_AWADDR;
output  [C_M_AXI_IMAGE_OUT_ID_WIDTH - 1:0] m_axi_IMAGE_OUT_AWID;
output  [7:0] m_axi_IMAGE_OUT_AWLEN;
output  [2:0] m_axi_IMAGE_OUT_AWSIZE;
output  [1:0] m_axi_IMAGE_OUT_AWBURST;
output  [1:0] m_axi_IMAGE_OUT_AWLOCK;
output  [3:0] m_axi_IMAGE_OUT_AWCACHE;
output  [2:0] m_axi_IMAGE_OUT_AWPROT;
output  [3:0] m_axi_IMAGE_OUT_AWQOS;
output  [3:0] m_axi_IMAGE_OUT_AWREGION;
output  [C_M_AXI_IMAGE_OUT_AWUSER_WIDTH - 1:0] m_axi_IMAGE_OUT_AWUSER;
output   m_axi_IMAGE_OUT_WVALID;
input   m_axi_IMAGE_OUT_WREADY;
output  [C_M_AXI_IMAGE_OUT_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT_WDATA;
output  [C_M_AXI_IMAGE_OUT_WSTRB_WIDTH - 1:0] m_axi_IMAGE_OUT_WSTRB;
output   m_axi_IMAGE_OUT_WLAST;
output  [C_M_AXI_IMAGE_OUT_ID_WIDTH - 1:0] m_axi_IMAGE_OUT_WID;
output  [C_M_AXI_IMAGE_OUT_WUSER_WIDTH - 1:0] m_axi_IMAGE_OUT_WUSER;
output   m_axi_IMAGE_OUT_ARVALID;
input   m_axi_IMAGE_OUT_ARREADY;
output  [C_M_AXI_IMAGE_OUT_ADDR_WIDTH - 1:0] m_axi_IMAGE_OUT_ARADDR;
output  [C_M_AXI_IMAGE_OUT_ID_WIDTH - 1:0] m_axi_IMAGE_OUT_ARID;
output  [7:0] m_axi_IMAGE_OUT_ARLEN;
output  [2:0] m_axi_IMAGE_OUT_ARSIZE;
output  [1:0] m_axi_IMAGE_OUT_ARBURST;
output  [1:0] m_axi_IMAGE_OUT_ARLOCK;
output  [3:0] m_axi_IMAGE_OUT_ARCACHE;
output  [2:0] m_axi_IMAGE_OUT_ARPROT;
output  [3:0] m_axi_IMAGE_OUT_ARQOS;
output  [3:0] m_axi_IMAGE_OUT_ARREGION;
output  [C_M_AXI_IMAGE_OUT_ARUSER_WIDTH - 1:0] m_axi_IMAGE_OUT_ARUSER;
input   m_axi_IMAGE_OUT_RVALID;
output   m_axi_IMAGE_OUT_RREADY;
input  [C_M_AXI_IMAGE_OUT_DATA_WIDTH - 1:0] m_axi_IMAGE_OUT_RDATA;
input   m_axi_IMAGE_OUT_RLAST;
input  [C_M_AXI_IMAGE_OUT_ID_WIDTH - 1:0] m_axi_IMAGE_OUT_RID;
input  [C_M_AXI_IMAGE_OUT_RUSER_WIDTH - 1:0] m_axi_IMAGE_OUT_RUSER;
input  [1:0] m_axi_IMAGE_OUT_RRESP;
input   m_axi_IMAGE_OUT_BVALID;
output   m_axi_IMAGE_OUT_BREADY;
input  [1:0] m_axi_IMAGE_OUT_BRESP;
input  [C_M_AXI_IMAGE_OUT_ID_WIDTH - 1:0] m_axi_IMAGE_OUT_BID;
input  [C_M_AXI_IMAGE_OUT_BUSER_WIDTH - 1:0] m_axi_IMAGE_OUT_BUSER;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] imageIn0;
wire   [31:0] imageIn1;
wire   [31:0] imageIn2;
wire   [31:0] imageIn3;
wire   [31:0] imageOut;
reg    IMAGE_IN0_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    IMAGE_IN0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_1156;
reg    IMAGE_IN1_blk_n_AR;
reg    IMAGE_IN1_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_1180;
reg    IMAGE_IN2_blk_n_AR;
reg    IMAGE_IN2_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond2_reg_1204;
reg    IMAGE_IN3_blk_n_AR;
reg    IMAGE_IN3_blk_n_R;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond3_reg_1228;
reg    IMAGE_OUT_blk_n_AW;
wire    ap_CS_fsm_pp4_stage3;
reg    ap_enable_reg_pp4_iter10;
wire    ap_block_pp4_stage3;
reg   [0:0] exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter10_exitcond_flatten_reg_1252;
reg    IMAGE_OUT_blk_n_W;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter11;
wire    ap_block_pp4_stage0;
reg    IMAGE_OUT_blk_n_B;
wire    ap_CS_fsm_pp4_stage1;
reg    ap_enable_reg_pp4_iter12;
wire    ap_block_pp4_stage1;
reg   [0:0] ap_reg_pp4_iter12_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter11_exitcond_flatten_reg_1252;
wire    ap_CS_fsm_pp4_stage2;
wire    ap_block_pp4_stage2;
reg    ap_enable_reg_pp4_iter13;
wire    IMAGE_IN0_AWREADY;
wire    IMAGE_IN0_WREADY;
reg    IMAGE_IN0_ARVALID;
wire    IMAGE_IN0_ARREADY;
wire   [31:0] IMAGE_IN0_ARADDR;
wire    IMAGE_IN0_RVALID;
reg    IMAGE_IN0_RREADY;
wire   [31:0] IMAGE_IN0_RDATA;
wire    IMAGE_IN0_RLAST;
wire   [0:0] IMAGE_IN0_RID;
wire   [0:0] IMAGE_IN0_RUSER;
wire   [1:0] IMAGE_IN0_RRESP;
wire    IMAGE_IN0_BVALID;
wire   [1:0] IMAGE_IN0_BRESP;
wire   [0:0] IMAGE_IN0_BID;
wire   [0:0] IMAGE_IN0_BUSER;
wire    IMAGE_IN1_AWREADY;
wire    IMAGE_IN1_WREADY;
reg    IMAGE_IN1_ARVALID;
wire    IMAGE_IN1_ARREADY;
wire   [31:0] IMAGE_IN1_ARADDR;
wire    IMAGE_IN1_RVALID;
reg    IMAGE_IN1_RREADY;
wire   [31:0] IMAGE_IN1_RDATA;
wire    IMAGE_IN1_RLAST;
wire   [0:0] IMAGE_IN1_RID;
wire   [0:0] IMAGE_IN1_RUSER;
wire   [1:0] IMAGE_IN1_RRESP;
wire    IMAGE_IN1_BVALID;
wire   [1:0] IMAGE_IN1_BRESP;
wire   [0:0] IMAGE_IN1_BID;
wire   [0:0] IMAGE_IN1_BUSER;
wire    IMAGE_IN2_AWREADY;
wire    IMAGE_IN2_WREADY;
reg    IMAGE_IN2_ARVALID;
wire    IMAGE_IN2_ARREADY;
wire   [31:0] IMAGE_IN2_ARADDR;
wire    IMAGE_IN2_RVALID;
reg    IMAGE_IN2_RREADY;
wire   [31:0] IMAGE_IN2_RDATA;
wire    IMAGE_IN2_RLAST;
wire   [0:0] IMAGE_IN2_RID;
wire   [0:0] IMAGE_IN2_RUSER;
wire   [1:0] IMAGE_IN2_RRESP;
wire    IMAGE_IN2_BVALID;
wire   [1:0] IMAGE_IN2_BRESP;
wire   [0:0] IMAGE_IN2_BID;
wire   [0:0] IMAGE_IN2_BUSER;
wire    IMAGE_IN3_AWREADY;
wire    IMAGE_IN3_WREADY;
reg    IMAGE_IN3_ARVALID;
wire    IMAGE_IN3_ARREADY;
wire   [31:0] IMAGE_IN3_ARADDR;
wire    IMAGE_IN3_RVALID;
reg    IMAGE_IN3_RREADY;
wire   [31:0] IMAGE_IN3_RDATA;
wire    IMAGE_IN3_RLAST;
wire   [0:0] IMAGE_IN3_RID;
wire   [0:0] IMAGE_IN3_RUSER;
wire   [1:0] IMAGE_IN3_RRESP;
wire    IMAGE_IN3_BVALID;
wire   [1:0] IMAGE_IN3_BRESP;
wire   [0:0] IMAGE_IN3_BID;
wire   [0:0] IMAGE_IN3_BUSER;
reg    IMAGE_OUT_AWVALID;
wire    IMAGE_OUT_AWREADY;
reg   [31:0] IMAGE_OUT_AWADDR;
reg    IMAGE_OUT_WVALID;
wire    IMAGE_OUT_WREADY;
wire    IMAGE_OUT_ARREADY;
wire    IMAGE_OUT_RVALID;
wire   [31:0] IMAGE_OUT_RDATA;
wire    IMAGE_OUT_RLAST;
wire   [0:0] IMAGE_OUT_RID;
wire   [0:0] IMAGE_OUT_RUSER;
wire   [1:0] IMAGE_OUT_RRESP;
wire    IMAGE_OUT_BVALID;
reg    IMAGE_OUT_BREADY;
wire   [1:0] IMAGE_OUT_BRESP;
wire   [0:0] IMAGE_OUT_BID;
wire   [0:0] IMAGE_OUT_BUSER;
reg   [10:0] indvar_reg_445;
reg   [10:0] indvar1_reg_456;
reg   [10:0] indvar2_reg_467;
reg   [10:0] indvar3_reg_478;
reg   [16:0] indvar_flatten_reg_489;
reg   [7:0] rows1_reg_500;
reg   [11:0] cols_reg_512;
wire   [31:0] grp_fu_524_p1;
reg   [31:0] reg_548;
wire    ap_block_state29_pp4_stage3_iter0;
wire    ap_block_state33_pp4_stage3_iter1;
wire    ap_block_state37_pp4_stage3_iter2;
wire    ap_block_state41_pp4_stage3_iter3;
wire    ap_block_state45_pp4_stage3_iter4;
wire    ap_block_state49_pp4_stage3_iter5;
wire    ap_block_state53_pp4_stage3_iter6;
wire    ap_block_state57_pp4_stage3_iter7;
wire    ap_block_state61_pp4_stage3_iter8;
wire    ap_block_state65_pp4_stage3_iter9;
wire    ap_block_state69_pp4_stage3_iter10;
reg    ap_sig_ioackin_IMAGE_OUT_AWREADY;
reg    ap_block_state69_io;
wire    ap_block_state73_pp4_stage3_iter11;
reg    ap_sig_ioackin_IMAGE_OUT_WREADY;
reg    ap_block_state73_io;
reg    ap_block_state77_pp4_stage3_iter12;
reg    ap_block_pp4_stage3_11001;
wire    ap_block_state26_pp4_stage0_iter0;
wire    ap_block_state30_pp4_stage0_iter1;
wire    ap_block_state34_pp4_stage0_iter2;
wire    ap_block_state38_pp4_stage0_iter3;
wire    ap_block_state42_pp4_stage0_iter4;
wire    ap_block_state46_pp4_stage0_iter5;
wire    ap_block_state50_pp4_stage0_iter6;
wire    ap_block_state54_pp4_stage0_iter7;
wire    ap_block_state58_pp4_stage0_iter8;
wire    ap_block_state62_pp4_stage0_iter9;
wire    ap_block_state66_pp4_stage0_iter10;
wire    ap_block_state70_pp4_stage0_iter11;
reg    ap_block_state70_io;
wire    ap_block_state74_pp4_stage0_iter12;
reg    ap_block_state78_pp4_stage0_iter13;
reg    ap_block_pp4_stage0_11001;
wire    ap_block_state27_pp4_stage1_iter0;
wire    ap_block_state31_pp4_stage1_iter1;
wire    ap_block_state35_pp4_stage1_iter2;
wire    ap_block_state39_pp4_stage1_iter3;
wire    ap_block_state43_pp4_stage1_iter4;
wire    ap_block_state47_pp4_stage1_iter5;
wire    ap_block_state51_pp4_stage1_iter6;
wire    ap_block_state55_pp4_stage1_iter7;
wire    ap_block_state59_pp4_stage1_iter8;
wire    ap_block_state63_pp4_stage1_iter9;
wire    ap_block_state67_pp4_stage1_iter10;
wire    ap_block_state71_pp4_stage1_iter11;
reg    ap_block_state71_io;
reg    ap_block_state75_pp4_stage1_iter12;
reg    ap_block_pp4_stage1_11001;
wire    ap_block_state28_pp4_stage2_iter0;
wire    ap_block_state32_pp4_stage2_iter1;
wire    ap_block_state36_pp4_stage2_iter2;
wire    ap_block_state40_pp4_stage2_iter3;
wire    ap_block_state44_pp4_stage2_iter4;
wire    ap_block_state48_pp4_stage2_iter5;
wire    ap_block_state52_pp4_stage2_iter6;
wire    ap_block_state56_pp4_stage2_iter7;
wire    ap_block_state60_pp4_stage2_iter8;
wire    ap_block_state64_pp4_stage2_iter9;
wire    ap_block_state68_pp4_stage2_iter10;
wire    ap_block_state72_pp4_stage2_iter11;
reg    ap_block_state72_io;
reg    ap_block_state76_pp4_stage2_iter12;
reg    ap_block_pp4_stage2_11001;
reg   [29:0] tmp_2_reg_1082;
reg   [29:0] imageIn_reg_1087;
reg   [29:0] imageIn4_reg_1092;
reg   [29:0] imageIn5_reg_1097;
reg   [29:0] imageIn6_reg_1102;
reg    ap_sig_ioackin_IMAGE_IN0_ARREADY;
reg    ap_sig_ioackin_IMAGE_IN1_ARREADY;
reg    ap_sig_ioackin_IMAGE_IN2_ARREADY;
reg    ap_sig_ioackin_IMAGE_IN3_ARREADY;
reg    ap_block_state2_io;
wire   [30:0] tmp_2_cast_fu_646_p1;
reg   [30:0] tmp_2_cast_reg_1131;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_fu_649_p2;
wire    ap_CS_fsm_state9;
wire   [6:0] rows_2_fu_655_p2;
reg   [6:0] rows_2_reg_1143;
wire   [15:0] tmp_1_fu_665_p3;
reg   [15:0] tmp_1_reg_1148;
wire   [0:0] exitcond_fu_673_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_1156;
wire   [10:0] indvar_next_fu_679_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] tmp_34_fu_689_p1;
reg   [9:0] tmp_34_reg_1165;
reg   [9:0] ap_reg_pp0_iter1_tmp_34_reg_1165;
reg   [5:0] tmp_9_reg_1170;
reg   [5:0] ap_reg_pp0_iter1_tmp_9_reg_1170;
reg   [31:0] IMAGE_IN0_addr_read_reg_1175;
wire   [0:0] exitcond1_fu_719_p2;
wire    ap_block_state14_pp1_stage0_iter0;
reg    ap_block_state15_pp1_stage0_iter1;
wire    ap_block_state16_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond1_reg_1180;
wire   [10:0] indvar_next1_fu_725_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [9:0] tmp_37_fu_735_p1;
reg   [9:0] tmp_37_reg_1189;
reg   [9:0] ap_reg_pp1_iter1_tmp_37_reg_1189;
reg   [5:0] tmp_38_reg_1194;
reg   [5:0] ap_reg_pp1_iter1_tmp_38_reg_1194;
reg   [31:0] IMAGE_IN1_addr_read_reg_1199;
wire   [0:0] exitcond2_fu_765_p2;
wire    ap_block_state18_pp2_stage0_iter0;
reg    ap_block_state19_pp2_stage0_iter1;
wire    ap_block_state20_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] ap_reg_pp2_iter1_exitcond2_reg_1204;
wire   [10:0] indvar_next2_fu_771_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [9:0] tmp_41_fu_781_p1;
reg   [9:0] tmp_41_reg_1213;
reg   [9:0] ap_reg_pp2_iter1_tmp_41_reg_1213;
reg   [5:0] tmp_42_reg_1218;
reg   [5:0] ap_reg_pp2_iter1_tmp_42_reg_1218;
reg   [31:0] IMAGE_IN2_addr_read_reg_1223;
wire   [0:0] exitcond3_fu_811_p2;
wire    ap_block_state22_pp3_stage0_iter0;
reg    ap_block_state23_pp3_stage0_iter1;
wire    ap_block_state24_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [0:0] ap_reg_pp3_iter1_exitcond3_reg_1228;
wire   [10:0] indvar_next3_fu_817_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [9:0] tmp_45_fu_827_p1;
reg   [9:0] tmp_45_reg_1237;
reg   [9:0] ap_reg_pp3_iter1_tmp_45_reg_1237;
reg   [5:0] tmp_46_reg_1242;
reg   [5:0] ap_reg_pp3_iter1_tmp_46_reg_1242;
reg   [31:0] IMAGE_IN3_addr_read_reg_1247;
wire   [0:0] exitcond_flatten_fu_857_p2;
reg   [0:0] ap_reg_pp4_iter1_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter2_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter3_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter4_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter5_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter6_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter7_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter8_exitcond_flatten_reg_1252;
reg   [0:0] ap_reg_pp4_iter9_exitcond_flatten_reg_1252;
wire   [16:0] indvar_flatten_next_fu_863_p2;
reg   [16:0] indvar_flatten_next_reg_1256;
reg    ap_enable_reg_pp4_iter0;
wire   [7:0] rows_1_fu_869_p2;
reg   [7:0] rows_1_reg_1261;
wire   [11:0] cols_mid2_fu_883_p3;
reg   [11:0] cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter1_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter2_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter3_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter4_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter5_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter6_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter7_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter8_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter9_cols_mid2_reg_1266;
reg   [11:0] ap_reg_pp4_iter10_cols_mid2_reg_1266;
wire   [7:0] tmp_5_mid2_v_v_fu_891_p3;
reg   [7:0] tmp_5_mid2_v_v_reg_1272;
wire   [17:0] tmp_13_fu_960_p2;
reg   [17:0] tmp_13_reg_1277;
reg   [5:0] tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter1_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter2_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter3_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter4_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter5_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter6_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter7_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter8_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter9_tmp_31_reg_1282;
reg   [5:0] ap_reg_pp4_iter10_tmp_31_reg_1282;
wire   [18:0] idx2_fu_976_p2;
reg   [18:0] idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter1_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter2_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter3_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter4_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter5_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter6_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter7_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter8_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter9_idx2_reg_1287;
reg   [18:0] ap_reg_pp4_iter10_idx2_reg_1287;
wire   [63:0] tmp_41_cast_fu_982_p1;
reg   [63:0] tmp_41_cast_reg_1293;
wire   [31:0] image1_q0;
reg   [31:0] pixelIn1_reg_1310;
wire   [31:0] image2_q0;
reg   [31:0] pixelIn2_reg_1315;
reg    ap_enable_reg_pp4_iter1;
wire   [63:0] grp_fu_527_p1;
reg   [63:0] tmp_15_reg_1320;
wire   [11:0] cols_1_fu_986_p2;
reg   [11:0] cols_1_reg_1325;
reg   [63:0] tmp_18_reg_1340;
wire   [31:0] image0_q0;
reg   [31:0] pixelIn0_reg_1345;
reg   [31:0] ap_reg_pp4_iter2_pixelIn0_reg_1345;
wire   [31:0] image3_q0;
reg   [31:0] pixelIn3_reg_1350;
reg   [63:0] tmp_21_reg_1355;
reg   [63:0] tmp_14_reg_1360;
reg    ap_enable_reg_pp4_iter3;
wire   [63:0] grp_fu_542_p2;
reg   [63:0] tmp_16_reg_1366;
reg   [63:0] tmp_19_reg_1372;
reg   [63:0] ap_reg_pp4_iter4_tmp_19_reg_1372;
reg   [63:0] ap_reg_pp4_iter5_tmp_19_reg_1372;
reg   [63:0] tmp_22_reg_1379;
reg    ap_enable_reg_pp4_iter4;
reg   [63:0] ap_reg_pp4_iter5_tmp_22_reg_1379;
reg   [63:0] ap_reg_pp4_iter6_tmp_22_reg_1379;
reg   [63:0] ap_reg_pp4_iter7_tmp_22_reg_1379;
reg   [63:0] ap_reg_pp4_iter8_tmp_22_reg_1379;
wire   [63:0] grp_fu_530_p2;
reg   [63:0] tmp_17_reg_1386;
reg    ap_enable_reg_pp4_iter5;
wire   [63:0] grp_fu_534_p2;
reg   [63:0] tmp_26_reg_1392;
reg   [63:0] tmp_20_reg_1398;
reg    ap_enable_reg_pp4_iter8;
reg   [63:0] tmp_24_reg_1403;
wire   [63:0] grp_fu_538_p2;
reg   [63:0] tmp_27_reg_1408;
reg   [63:0] tmp_29_reg_1413;
reg   [63:0] tmp_23_reg_1418;
reg   [63:0] tmp_25_reg_1423;
reg   [63:0] tmp_28_reg_1428;
reg   [63:0] tmp_30_reg_1433;
wire   [17:0] idx1_fu_991_p3;
reg   [17:0] idx1_reg_1438;
wire   [30:0] imageOut10_sum_fu_1001_p2;
reg   [30:0] imageOut10_sum_reg_1443;
wire   [30:0] imageOut10_sum1_fu_1025_p2;
reg   [30:0] imageOut10_sum1_reg_1454;
wire   [30:0] imageOut10_sum2_fu_1043_p2;
reg   [30:0] imageOut10_sum2_reg_1465;
wire   [30:0] imageOut10_sum3_fu_1067_p2;
reg   [30:0] imageOut10_sum3_reg_1476;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state13;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state17;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state18;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state21;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state22;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state26;
reg    ap_block_pp4_stage3_subdone;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter6;
reg    ap_enable_reg_pp4_iter7;
reg    ap_enable_reg_pp4_iter9;
reg   [15:0] image0_address0;
reg    image0_ce0;
reg    image0_we0;
reg   [15:0] image1_address0;
reg    image1_ce0;
reg    image1_we0;
reg   [15:0] image2_address0;
reg    image2_ce0;
reg    image2_we0;
reg   [15:0] image3_address0;
reg    image3_ce0;
reg    image3_we0;
reg   [6:0] rows_reg_434;
wire    ap_CS_fsm_state25;
reg   [16:0] ap_phi_mux_indvar_flatten_phi_fu_493_p4;
reg   [7:0] ap_phi_mux_rows1_phi_fu_504_p4;
reg   [11:0] ap_phi_mux_cols_phi_fu_516_p4;
wire   [63:0] tmp_36_fu_714_p1;
wire   [63:0] tmp_40_fu_760_p1;
wire   [63:0] tmp_44_fu_806_p1;
wire   [63:0] tmp_48_fu_852_p1;
wire   [63:0] tmp_3_fu_606_p1;
wire   [63:0] tmp_4_fu_616_p1;
wire   [63:0] tmp_5_fu_626_p1;
wire   [63:0] tmp_6_fu_636_p1;
wire   [63:0] imageOut10_sum_cast_fu_1006_p1;
wire   [63:0] imageOut10_sum1_cast_fu_1030_p1;
wire   [63:0] imageOut10_sum2_cast_fu_1048_p1;
wire   [63:0] imageOut10_sum3_cast_fu_1072_p1;
reg    ap_reg_ioackin_IMAGE_IN0_ARREADY;
reg    ap_reg_ioackin_IMAGE_IN1_ARREADY;
reg    ap_reg_ioackin_IMAGE_IN2_ARREADY;
reg    ap_reg_ioackin_IMAGE_IN3_ARREADY;
reg    ap_reg_ioackin_IMAGE_OUT_AWREADY;
reg    ap_block_pp4_stage3_01001;
reg    ap_reg_ioackin_IMAGE_OUT_WREADY;
reg    ap_block_pp4_stage0_01001;
reg    ap_block_pp4_stage1_01001;
reg    ap_block_pp4_stage2_01001;
reg   [63:0] grp_fu_524_p0;
reg   [31:0] grp_fu_527_p0;
reg   [63:0] grp_fu_530_p0;
reg   [63:0] grp_fu_530_p1;
reg   [63:0] grp_fu_534_p0;
reg   [63:0] grp_fu_534_p1;
reg   [63:0] grp_fu_538_p0;
reg   [63:0] grp_fu_538_p1;
reg   [63:0] grp_fu_542_p0;
reg   [63:0] grp_fu_542_p1;
wire   [5:0] tmp_7_fu_661_p1;
wire   [15:0] indvar_cast9_fu_685_p1;
wire   [15:0] imageIn0_addr_fu_693_p2;
wire   [15:0] tmp_35_fu_708_p3;
wire   [15:0] indvar1_cast7_fu_731_p1;
wire   [15:0] imageIn1_addr_fu_739_p2;
wire   [15:0] tmp_39_fu_754_p3;
wire   [15:0] indvar2_cast5_fu_777_p1;
wire   [15:0] imageIn2_addr_fu_785_p2;
wire   [15:0] tmp_43_fu_800_p3;
wire   [15:0] indvar3_cast3_fu_823_p1;
wire   [15:0] imageIn3_addr_fu_831_p2;
wire   [15:0] tmp_47_fu_846_p3;
wire   [0:0] tmp_8_fu_875_p3;
wire   [6:0] tmp_5_mid2_v_fu_898_p4;
wire   [16:0] tmp_s_fu_908_p3;
wire   [6:0] tmp_10_fu_920_p1;
wire   [17:0] tmp_7_cast_mid2_v_v_fu_924_p3;
wire   [17:0] tmp_7_cast_mid2_v_fu_932_p2;
wire   [10:0] tmp_12_fu_946_p4;
wire   [17:0] tmp_11_cast_fu_916_p1;
wire   [17:0] tmp_14_cast_fu_956_p1;
wire   [18:0] cols_cast1_fu_942_p1;
wire   [18:0] tmp_7_cast_mid2_fu_938_p1;
wire   [30:0] tmp_32_cast_fu_997_p1;
wire   [17:0] tmp_32_fu_1016_p2;
wire   [30:0] tmp_34_cast_fu_1021_p1;
wire   [30:0] tmp_35_cast_fu_1040_p1;
wire   [18:0] tmp_33_fu_1058_p2;
wire   [30:0] tmp_37_cast_fu_1063_p1;
reg    grp_fu_524_ce;
reg   [1:0] grp_fu_530_opcode;
reg    ap_block_pp4_stage3_00001;
reg    ap_block_pp4_stage0_00001;
reg    ap_block_pp4_stage1_00001;
reg    ap_block_pp4_stage2_00001;
reg    grp_fu_530_ce;
reg   [1:0] grp_fu_534_opcode;
reg    grp_fu_534_ce;
reg   [1:0] grp_fu_538_opcode;
reg    grp_fu_538_ce;
reg    grp_fu_542_ce;
wire    ap_CS_fsm_state79;
reg   [21:0] ap_NS_fsm;
reg    ap_block_pp4_stage1_subdone;
reg    ap_block_pp4_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_condition_1626;
reg    ap_condition_1639;
reg    ap_condition_1656;
reg    ap_condition_1673;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter10 = 1'b0;
#0 ap_enable_reg_pp4_iter11 = 1'b0;
#0 ap_enable_reg_pp4_iter12 = 1'b0;
#0 ap_enable_reg_pp4_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter9 = 1'b0;
#0 ap_reg_ioackin_IMAGE_IN0_ARREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_IN1_ARREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_IN2_ARREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_IN3_ARREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT_AWREADY = 1'b0;
#0 ap_reg_ioackin_IMAGE_OUT_WREADY = 1'b0;
end

idwt_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
idwt_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .imageIn0(imageIn0),
    .imageIn1(imageIn1),
    .imageIn2(imageIn2),
    .imageIn3(imageIn3),
    .imageOut(imageOut)
);

idwt_IMAGE_IN0_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_IN0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_IN0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_IN0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_IN0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_IN0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_IN0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_IN0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_IN0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_IN0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_IN0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_IN0_CACHE_VALUE ))
idwt_IMAGE_IN0_m_axi_U(
    .AWVALID(m_axi_IMAGE_IN0_AWVALID),
    .AWREADY(m_axi_IMAGE_IN0_AWREADY),
    .AWADDR(m_axi_IMAGE_IN0_AWADDR),
    .AWID(m_axi_IMAGE_IN0_AWID),
    .AWLEN(m_axi_IMAGE_IN0_AWLEN),
    .AWSIZE(m_axi_IMAGE_IN0_AWSIZE),
    .AWBURST(m_axi_IMAGE_IN0_AWBURST),
    .AWLOCK(m_axi_IMAGE_IN0_AWLOCK),
    .AWCACHE(m_axi_IMAGE_IN0_AWCACHE),
    .AWPROT(m_axi_IMAGE_IN0_AWPROT),
    .AWQOS(m_axi_IMAGE_IN0_AWQOS),
    .AWREGION(m_axi_IMAGE_IN0_AWREGION),
    .AWUSER(m_axi_IMAGE_IN0_AWUSER),
    .WVALID(m_axi_IMAGE_IN0_WVALID),
    .WREADY(m_axi_IMAGE_IN0_WREADY),
    .WDATA(m_axi_IMAGE_IN0_WDATA),
    .WSTRB(m_axi_IMAGE_IN0_WSTRB),
    .WLAST(m_axi_IMAGE_IN0_WLAST),
    .WID(m_axi_IMAGE_IN0_WID),
    .WUSER(m_axi_IMAGE_IN0_WUSER),
    .ARVALID(m_axi_IMAGE_IN0_ARVALID),
    .ARREADY(m_axi_IMAGE_IN0_ARREADY),
    .ARADDR(m_axi_IMAGE_IN0_ARADDR),
    .ARID(m_axi_IMAGE_IN0_ARID),
    .ARLEN(m_axi_IMAGE_IN0_ARLEN),
    .ARSIZE(m_axi_IMAGE_IN0_ARSIZE),
    .ARBURST(m_axi_IMAGE_IN0_ARBURST),
    .ARLOCK(m_axi_IMAGE_IN0_ARLOCK),
    .ARCACHE(m_axi_IMAGE_IN0_ARCACHE),
    .ARPROT(m_axi_IMAGE_IN0_ARPROT),
    .ARQOS(m_axi_IMAGE_IN0_ARQOS),
    .ARREGION(m_axi_IMAGE_IN0_ARREGION),
    .ARUSER(m_axi_IMAGE_IN0_ARUSER),
    .RVALID(m_axi_IMAGE_IN0_RVALID),
    .RREADY(m_axi_IMAGE_IN0_RREADY),
    .RDATA(m_axi_IMAGE_IN0_RDATA),
    .RLAST(m_axi_IMAGE_IN0_RLAST),
    .RID(m_axi_IMAGE_IN0_RID),
    .RUSER(m_axi_IMAGE_IN0_RUSER),
    .RRESP(m_axi_IMAGE_IN0_RRESP),
    .BVALID(m_axi_IMAGE_IN0_BVALID),
    .BREADY(m_axi_IMAGE_IN0_BREADY),
    .BRESP(m_axi_IMAGE_IN0_BRESP),
    .BID(m_axi_IMAGE_IN0_BID),
    .BUSER(m_axi_IMAGE_IN0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IMAGE_IN0_ARVALID),
    .I_ARREADY(IMAGE_IN0_ARREADY),
    .I_ARADDR(IMAGE_IN0_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd65536),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_IN0_RVALID),
    .I_RREADY(IMAGE_IN0_RREADY),
    .I_RDATA(IMAGE_IN0_RDATA),
    .I_RID(IMAGE_IN0_RID),
    .I_RUSER(IMAGE_IN0_RUSER),
    .I_RRESP(IMAGE_IN0_RRESP),
    .I_RLAST(IMAGE_IN0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IMAGE_IN0_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IMAGE_IN0_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(IMAGE_IN0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IMAGE_IN0_BRESP),
    .I_BID(IMAGE_IN0_BID),
    .I_BUSER(IMAGE_IN0_BUSER)
);

idwt_IMAGE_IN1_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_IN1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_IN1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_IN1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_IN1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_IN1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_IN1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_IN1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_IN1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_IN1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_IN1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_IN1_CACHE_VALUE ))
idwt_IMAGE_IN1_m_axi_U(
    .AWVALID(m_axi_IMAGE_IN1_AWVALID),
    .AWREADY(m_axi_IMAGE_IN1_AWREADY),
    .AWADDR(m_axi_IMAGE_IN1_AWADDR),
    .AWID(m_axi_IMAGE_IN1_AWID),
    .AWLEN(m_axi_IMAGE_IN1_AWLEN),
    .AWSIZE(m_axi_IMAGE_IN1_AWSIZE),
    .AWBURST(m_axi_IMAGE_IN1_AWBURST),
    .AWLOCK(m_axi_IMAGE_IN1_AWLOCK),
    .AWCACHE(m_axi_IMAGE_IN1_AWCACHE),
    .AWPROT(m_axi_IMAGE_IN1_AWPROT),
    .AWQOS(m_axi_IMAGE_IN1_AWQOS),
    .AWREGION(m_axi_IMAGE_IN1_AWREGION),
    .AWUSER(m_axi_IMAGE_IN1_AWUSER),
    .WVALID(m_axi_IMAGE_IN1_WVALID),
    .WREADY(m_axi_IMAGE_IN1_WREADY),
    .WDATA(m_axi_IMAGE_IN1_WDATA),
    .WSTRB(m_axi_IMAGE_IN1_WSTRB),
    .WLAST(m_axi_IMAGE_IN1_WLAST),
    .WID(m_axi_IMAGE_IN1_WID),
    .WUSER(m_axi_IMAGE_IN1_WUSER),
    .ARVALID(m_axi_IMAGE_IN1_ARVALID),
    .ARREADY(m_axi_IMAGE_IN1_ARREADY),
    .ARADDR(m_axi_IMAGE_IN1_ARADDR),
    .ARID(m_axi_IMAGE_IN1_ARID),
    .ARLEN(m_axi_IMAGE_IN1_ARLEN),
    .ARSIZE(m_axi_IMAGE_IN1_ARSIZE),
    .ARBURST(m_axi_IMAGE_IN1_ARBURST),
    .ARLOCK(m_axi_IMAGE_IN1_ARLOCK),
    .ARCACHE(m_axi_IMAGE_IN1_ARCACHE),
    .ARPROT(m_axi_IMAGE_IN1_ARPROT),
    .ARQOS(m_axi_IMAGE_IN1_ARQOS),
    .ARREGION(m_axi_IMAGE_IN1_ARREGION),
    .ARUSER(m_axi_IMAGE_IN1_ARUSER),
    .RVALID(m_axi_IMAGE_IN1_RVALID),
    .RREADY(m_axi_IMAGE_IN1_RREADY),
    .RDATA(m_axi_IMAGE_IN1_RDATA),
    .RLAST(m_axi_IMAGE_IN1_RLAST),
    .RID(m_axi_IMAGE_IN1_RID),
    .RUSER(m_axi_IMAGE_IN1_RUSER),
    .RRESP(m_axi_IMAGE_IN1_RRESP),
    .BVALID(m_axi_IMAGE_IN1_BVALID),
    .BREADY(m_axi_IMAGE_IN1_BREADY),
    .BRESP(m_axi_IMAGE_IN1_BRESP),
    .BID(m_axi_IMAGE_IN1_BID),
    .BUSER(m_axi_IMAGE_IN1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IMAGE_IN1_ARVALID),
    .I_ARREADY(IMAGE_IN1_ARREADY),
    .I_ARADDR(IMAGE_IN1_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd65536),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_IN1_RVALID),
    .I_RREADY(IMAGE_IN1_RREADY),
    .I_RDATA(IMAGE_IN1_RDATA),
    .I_RID(IMAGE_IN1_RID),
    .I_RUSER(IMAGE_IN1_RUSER),
    .I_RRESP(IMAGE_IN1_RRESP),
    .I_RLAST(IMAGE_IN1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IMAGE_IN1_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IMAGE_IN1_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(IMAGE_IN1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IMAGE_IN1_BRESP),
    .I_BID(IMAGE_IN1_BID),
    .I_BUSER(IMAGE_IN1_BUSER)
);

idwt_IMAGE_IN2_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_IN2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_IN2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_IN2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_IN2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_IN2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_IN2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_IN2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_IN2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_IN2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_IN2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_IN2_CACHE_VALUE ))
idwt_IMAGE_IN2_m_axi_U(
    .AWVALID(m_axi_IMAGE_IN2_AWVALID),
    .AWREADY(m_axi_IMAGE_IN2_AWREADY),
    .AWADDR(m_axi_IMAGE_IN2_AWADDR),
    .AWID(m_axi_IMAGE_IN2_AWID),
    .AWLEN(m_axi_IMAGE_IN2_AWLEN),
    .AWSIZE(m_axi_IMAGE_IN2_AWSIZE),
    .AWBURST(m_axi_IMAGE_IN2_AWBURST),
    .AWLOCK(m_axi_IMAGE_IN2_AWLOCK),
    .AWCACHE(m_axi_IMAGE_IN2_AWCACHE),
    .AWPROT(m_axi_IMAGE_IN2_AWPROT),
    .AWQOS(m_axi_IMAGE_IN2_AWQOS),
    .AWREGION(m_axi_IMAGE_IN2_AWREGION),
    .AWUSER(m_axi_IMAGE_IN2_AWUSER),
    .WVALID(m_axi_IMAGE_IN2_WVALID),
    .WREADY(m_axi_IMAGE_IN2_WREADY),
    .WDATA(m_axi_IMAGE_IN2_WDATA),
    .WSTRB(m_axi_IMAGE_IN2_WSTRB),
    .WLAST(m_axi_IMAGE_IN2_WLAST),
    .WID(m_axi_IMAGE_IN2_WID),
    .WUSER(m_axi_IMAGE_IN2_WUSER),
    .ARVALID(m_axi_IMAGE_IN2_ARVALID),
    .ARREADY(m_axi_IMAGE_IN2_ARREADY),
    .ARADDR(m_axi_IMAGE_IN2_ARADDR),
    .ARID(m_axi_IMAGE_IN2_ARID),
    .ARLEN(m_axi_IMAGE_IN2_ARLEN),
    .ARSIZE(m_axi_IMAGE_IN2_ARSIZE),
    .ARBURST(m_axi_IMAGE_IN2_ARBURST),
    .ARLOCK(m_axi_IMAGE_IN2_ARLOCK),
    .ARCACHE(m_axi_IMAGE_IN2_ARCACHE),
    .ARPROT(m_axi_IMAGE_IN2_ARPROT),
    .ARQOS(m_axi_IMAGE_IN2_ARQOS),
    .ARREGION(m_axi_IMAGE_IN2_ARREGION),
    .ARUSER(m_axi_IMAGE_IN2_ARUSER),
    .RVALID(m_axi_IMAGE_IN2_RVALID),
    .RREADY(m_axi_IMAGE_IN2_RREADY),
    .RDATA(m_axi_IMAGE_IN2_RDATA),
    .RLAST(m_axi_IMAGE_IN2_RLAST),
    .RID(m_axi_IMAGE_IN2_RID),
    .RUSER(m_axi_IMAGE_IN2_RUSER),
    .RRESP(m_axi_IMAGE_IN2_RRESP),
    .BVALID(m_axi_IMAGE_IN2_BVALID),
    .BREADY(m_axi_IMAGE_IN2_BREADY),
    .BRESP(m_axi_IMAGE_IN2_BRESP),
    .BID(m_axi_IMAGE_IN2_BID),
    .BUSER(m_axi_IMAGE_IN2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IMAGE_IN2_ARVALID),
    .I_ARREADY(IMAGE_IN2_ARREADY),
    .I_ARADDR(IMAGE_IN2_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd65536),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_IN2_RVALID),
    .I_RREADY(IMAGE_IN2_RREADY),
    .I_RDATA(IMAGE_IN2_RDATA),
    .I_RID(IMAGE_IN2_RID),
    .I_RUSER(IMAGE_IN2_RUSER),
    .I_RRESP(IMAGE_IN2_RRESP),
    .I_RLAST(IMAGE_IN2_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IMAGE_IN2_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IMAGE_IN2_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(IMAGE_IN2_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IMAGE_IN2_BRESP),
    .I_BID(IMAGE_IN2_BID),
    .I_BUSER(IMAGE_IN2_BUSER)
);

idwt_IMAGE_IN3_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_IN3_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_IN3_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_IN3_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_IN3_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_IN3_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_IN3_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_IN3_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_IN3_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_IN3_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_IN3_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_IN3_CACHE_VALUE ))
idwt_IMAGE_IN3_m_axi_U(
    .AWVALID(m_axi_IMAGE_IN3_AWVALID),
    .AWREADY(m_axi_IMAGE_IN3_AWREADY),
    .AWADDR(m_axi_IMAGE_IN3_AWADDR),
    .AWID(m_axi_IMAGE_IN3_AWID),
    .AWLEN(m_axi_IMAGE_IN3_AWLEN),
    .AWSIZE(m_axi_IMAGE_IN3_AWSIZE),
    .AWBURST(m_axi_IMAGE_IN3_AWBURST),
    .AWLOCK(m_axi_IMAGE_IN3_AWLOCK),
    .AWCACHE(m_axi_IMAGE_IN3_AWCACHE),
    .AWPROT(m_axi_IMAGE_IN3_AWPROT),
    .AWQOS(m_axi_IMAGE_IN3_AWQOS),
    .AWREGION(m_axi_IMAGE_IN3_AWREGION),
    .AWUSER(m_axi_IMAGE_IN3_AWUSER),
    .WVALID(m_axi_IMAGE_IN3_WVALID),
    .WREADY(m_axi_IMAGE_IN3_WREADY),
    .WDATA(m_axi_IMAGE_IN3_WDATA),
    .WSTRB(m_axi_IMAGE_IN3_WSTRB),
    .WLAST(m_axi_IMAGE_IN3_WLAST),
    .WID(m_axi_IMAGE_IN3_WID),
    .WUSER(m_axi_IMAGE_IN3_WUSER),
    .ARVALID(m_axi_IMAGE_IN3_ARVALID),
    .ARREADY(m_axi_IMAGE_IN3_ARREADY),
    .ARADDR(m_axi_IMAGE_IN3_ARADDR),
    .ARID(m_axi_IMAGE_IN3_ARID),
    .ARLEN(m_axi_IMAGE_IN3_ARLEN),
    .ARSIZE(m_axi_IMAGE_IN3_ARSIZE),
    .ARBURST(m_axi_IMAGE_IN3_ARBURST),
    .ARLOCK(m_axi_IMAGE_IN3_ARLOCK),
    .ARCACHE(m_axi_IMAGE_IN3_ARCACHE),
    .ARPROT(m_axi_IMAGE_IN3_ARPROT),
    .ARQOS(m_axi_IMAGE_IN3_ARQOS),
    .ARREGION(m_axi_IMAGE_IN3_ARREGION),
    .ARUSER(m_axi_IMAGE_IN3_ARUSER),
    .RVALID(m_axi_IMAGE_IN3_RVALID),
    .RREADY(m_axi_IMAGE_IN3_RREADY),
    .RDATA(m_axi_IMAGE_IN3_RDATA),
    .RLAST(m_axi_IMAGE_IN3_RLAST),
    .RID(m_axi_IMAGE_IN3_RID),
    .RUSER(m_axi_IMAGE_IN3_RUSER),
    .RRESP(m_axi_IMAGE_IN3_RRESP),
    .BVALID(m_axi_IMAGE_IN3_BVALID),
    .BREADY(m_axi_IMAGE_IN3_BREADY),
    .BRESP(m_axi_IMAGE_IN3_BRESP),
    .BID(m_axi_IMAGE_IN3_BID),
    .BUSER(m_axi_IMAGE_IN3_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IMAGE_IN3_ARVALID),
    .I_ARREADY(IMAGE_IN3_ARREADY),
    .I_ARADDR(IMAGE_IN3_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd65536),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_IN3_RVALID),
    .I_RREADY(IMAGE_IN3_RREADY),
    .I_RDATA(IMAGE_IN3_RDATA),
    .I_RID(IMAGE_IN3_RID),
    .I_RUSER(IMAGE_IN3_RUSER),
    .I_RRESP(IMAGE_IN3_RRESP),
    .I_RLAST(IMAGE_IN3_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IMAGE_IN3_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IMAGE_IN3_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(IMAGE_IN3_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IMAGE_IN3_BRESP),
    .I_BID(IMAGE_IN3_BID),
    .I_BUSER(IMAGE_IN3_BUSER)
);

idwt_IMAGE_OUT_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMAGE_OUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMAGE_OUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMAGE_OUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMAGE_OUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMAGE_OUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMAGE_OUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMAGE_OUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMAGE_OUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMAGE_OUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMAGE_OUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMAGE_OUT_CACHE_VALUE ))
idwt_IMAGE_OUT_m_axi_U(
    .AWVALID(m_axi_IMAGE_OUT_AWVALID),
    .AWREADY(m_axi_IMAGE_OUT_AWREADY),
    .AWADDR(m_axi_IMAGE_OUT_AWADDR),
    .AWID(m_axi_IMAGE_OUT_AWID),
    .AWLEN(m_axi_IMAGE_OUT_AWLEN),
    .AWSIZE(m_axi_IMAGE_OUT_AWSIZE),
    .AWBURST(m_axi_IMAGE_OUT_AWBURST),
    .AWLOCK(m_axi_IMAGE_OUT_AWLOCK),
    .AWCACHE(m_axi_IMAGE_OUT_AWCACHE),
    .AWPROT(m_axi_IMAGE_OUT_AWPROT),
    .AWQOS(m_axi_IMAGE_OUT_AWQOS),
    .AWREGION(m_axi_IMAGE_OUT_AWREGION),
    .AWUSER(m_axi_IMAGE_OUT_AWUSER),
    .WVALID(m_axi_IMAGE_OUT_WVALID),
    .WREADY(m_axi_IMAGE_OUT_WREADY),
    .WDATA(m_axi_IMAGE_OUT_WDATA),
    .WSTRB(m_axi_IMAGE_OUT_WSTRB),
    .WLAST(m_axi_IMAGE_OUT_WLAST),
    .WID(m_axi_IMAGE_OUT_WID),
    .WUSER(m_axi_IMAGE_OUT_WUSER),
    .ARVALID(m_axi_IMAGE_OUT_ARVALID),
    .ARREADY(m_axi_IMAGE_OUT_ARREADY),
    .ARADDR(m_axi_IMAGE_OUT_ARADDR),
    .ARID(m_axi_IMAGE_OUT_ARID),
    .ARLEN(m_axi_IMAGE_OUT_ARLEN),
    .ARSIZE(m_axi_IMAGE_OUT_ARSIZE),
    .ARBURST(m_axi_IMAGE_OUT_ARBURST),
    .ARLOCK(m_axi_IMAGE_OUT_ARLOCK),
    .ARCACHE(m_axi_IMAGE_OUT_ARCACHE),
    .ARPROT(m_axi_IMAGE_OUT_ARPROT),
    .ARQOS(m_axi_IMAGE_OUT_ARQOS),
    .ARREGION(m_axi_IMAGE_OUT_ARREGION),
    .ARUSER(m_axi_IMAGE_OUT_ARUSER),
    .RVALID(m_axi_IMAGE_OUT_RVALID),
    .RREADY(m_axi_IMAGE_OUT_RREADY),
    .RDATA(m_axi_IMAGE_OUT_RDATA),
    .RLAST(m_axi_IMAGE_OUT_RLAST),
    .RID(m_axi_IMAGE_OUT_RID),
    .RUSER(m_axi_IMAGE_OUT_RUSER),
    .RRESP(m_axi_IMAGE_OUT_RRESP),
    .BVALID(m_axi_IMAGE_OUT_BVALID),
    .BREADY(m_axi_IMAGE_OUT_BREADY),
    .BRESP(m_axi_IMAGE_OUT_BRESP),
    .BID(m_axi_IMAGE_OUT_BID),
    .BUSER(m_axi_IMAGE_OUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(IMAGE_OUT_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IMAGE_OUT_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(IMAGE_OUT_RDATA),
    .I_RID(IMAGE_OUT_RID),
    .I_RUSER(IMAGE_OUT_RUSER),
    .I_RRESP(IMAGE_OUT_RRESP),
    .I_RLAST(IMAGE_OUT_RLAST),
    .I_AWVALID(IMAGE_OUT_AWVALID),
    .I_AWREADY(IMAGE_OUT_AWREADY),
    .I_AWADDR(IMAGE_OUT_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(IMAGE_OUT_WVALID),
    .I_WREADY(IMAGE_OUT_WREADY),
    .I_WDATA(reg_548),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(IMAGE_OUT_BVALID),
    .I_BREADY(IMAGE_OUT_BREADY),
    .I_BRESP(IMAGE_OUT_BRESP),
    .I_BID(IMAGE_OUT_BID),
    .I_BUSER(IMAGE_OUT_BUSER)
);

idwt_image0 #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
image0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image0_address0),
    .ce0(image0_ce0),
    .we0(image0_we0),
    .d0(IMAGE_IN0_addr_read_reg_1175),
    .q0(image0_q0)
);

idwt_image0 #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
image1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image1_address0),
    .ce0(image1_ce0),
    .we0(image1_we0),
    .d0(IMAGE_IN1_addr_read_reg_1199),
    .q0(image1_q0)
);

idwt_image0 #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
image2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image2_address0),
    .ce0(image2_ce0),
    .we0(image2_we0),
    .d0(IMAGE_IN2_addr_read_reg_1223),
    .q0(image2_q0)
);

idwt_image0 #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
image3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image3_address0),
    .ce0(image3_ce0),
    .we0(image3_we0),
    .d0(IMAGE_IN3_addr_read_reg_1247),
    .q0(image3_q0)
);

idwt_fptrunc_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
idwt_fptrunc_64nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_524_p0),
    .ce(grp_fu_524_ce),
    .dout(grp_fu_524_p1)
);

idwt_fpext_32ns_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
idwt_fpext_32ns_6cud_U2(
    .din0(grp_fu_527_p0),
    .dout(grp_fu_527_p1)
);

idwt_dadddsub_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
idwt_dadddsub_64ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_530_p0),
    .din1(grp_fu_530_p1),
    .opcode(grp_fu_530_opcode),
    .ce(grp_fu_530_ce),
    .dout(grp_fu_530_p2)
);

idwt_dadddsub_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
idwt_dadddsub_64ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_534_p0),
    .din1(grp_fu_534_p1),
    .opcode(grp_fu_534_opcode),
    .ce(grp_fu_534_ce),
    .dout(grp_fu_534_p2)
);

idwt_dadddsub_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
idwt_dadddsub_64ndEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_538_p0),
    .din1(grp_fu_538_p1),
    .opcode(grp_fu_538_opcode),
    .ce(grp_fu_538_ce),
    .dout(grp_fu_538_p2)
);

idwt_dmul_64ns_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
idwt_dmul_64ns_64eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_542_p0),
    .din1(grp_fu_542_p1),
    .ce(grp_fu_542_ce),
    .dout(grp_fu_542_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((tmp_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state14)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state18) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state18)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state22) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state22)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state22);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state26) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_649_p2 == 1'd1))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state26)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter11 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter12 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter13 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone)))) begin
            ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
        end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_649_p2 == 1'd1))) begin
            ap_enable_reg_pp4_iter13 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_subdone))) begin
            ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_IN0_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_IN0_ARREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_IN0_ARREADY)) begin
                ap_reg_ioackin_IMAGE_IN0_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_IN1_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_IN1_ARREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_IN1_ARREADY)) begin
                ap_reg_ioackin_IMAGE_IN1_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_IN2_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_IN2_ARREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_IN2_ARREADY)) begin
                ap_reg_ioackin_IMAGE_IN2_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_IN3_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_IMAGE_IN3_ARREADY <= 1'b0;
            end else if ((1'b1 == IMAGE_IN3_ARREADY)) begin
                ap_reg_ioackin_IMAGE_IN3_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT_AWREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
            ap_reg_ioackin_IMAGE_OUT_AWREADY <= 1'b0;
        end else if ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_AWREADY) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage2_01001)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_AWREADY) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage1_01001)) | ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_AWREADY) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001)) | ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_AWREADY) & (ap_enable_reg_pp4_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_01001)))) begin
            ap_reg_ioackin_IMAGE_OUT_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_IMAGE_OUT_WREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
            ap_reg_ioackin_IMAGE_OUT_WREADY <= 1'b0;
        end else if ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_WREADY) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage2_01001)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_WREADY) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage1_01001)) | ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_WREADY) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == IMAGE_OUT_WREADY) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_01001)))) begin
            ap_reg_ioackin_IMAGE_OUT_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_649_p2 == 1'd1))) begin
        cols_reg_512 <= 12'd0;
    end else if (((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        cols_reg_512 <= cols_1_reg_1325;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar1_reg_456 <= 11'd0;
    end else if (((exitcond1_fu_719_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar1_reg_456 <= indvar_next1_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar2_reg_467 <= 11'd0;
    end else if (((exitcond2_fu_765_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar2_reg_467 <= indvar_next2_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        indvar3_reg_478 <= 11'd0;
    end else if (((exitcond3_fu_811_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        indvar3_reg_478 <= indvar_next3_fu_817_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_649_p2 == 1'd1))) begin
        indvar_flatten_reg_489 <= 17'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        indvar_flatten_reg_489 <= indvar_flatten_next_reg_1256;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_reg_445 <= indvar_next_fu_679_p2;
    end else if (((tmp_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        indvar_reg_445 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_649_p2 == 1'd1))) begin
        rows1_reg_500 <= 8'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        rows1_reg_500 <= tmp_5_mid2_v_v_reg_1272;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        rows_reg_434 <= rows_2_reg_1143;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        rows_reg_434 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_1156 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IMAGE_IN0_addr_read_reg_1175 <= IMAGE_IN0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1180 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        IMAGE_IN1_addr_read_reg_1199 <= IMAGE_IN1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_1204 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        IMAGE_IN2_addr_read_reg_1223 <= IMAGE_IN2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_1228 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        IMAGE_IN3_addr_read_reg_1247 <= IMAGE_IN3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_reg_1156 <= exitcond_reg_1156;
        ap_reg_pp0_iter1_tmp_34_reg_1165 <= tmp_34_reg_1165;
        ap_reg_pp0_iter1_tmp_9_reg_1170 <= tmp_9_reg_1170;
        exitcond_reg_1156 <= exitcond_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_reg_pp1_iter1_exitcond1_reg_1180 <= exitcond1_reg_1180;
        ap_reg_pp1_iter1_tmp_37_reg_1189 <= tmp_37_reg_1189;
        ap_reg_pp1_iter1_tmp_38_reg_1194 <= tmp_38_reg_1194;
        exitcond1_reg_1180 <= exitcond1_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ap_reg_pp2_iter1_exitcond2_reg_1204 <= exitcond2_reg_1204;
        ap_reg_pp2_iter1_tmp_41_reg_1213 <= tmp_41_reg_1213;
        ap_reg_pp2_iter1_tmp_42_reg_1218 <= tmp_42_reg_1218;
        exitcond2_reg_1204 <= exitcond2_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        ap_reg_pp3_iter1_exitcond3_reg_1228 <= exitcond3_reg_1228;
        ap_reg_pp3_iter1_tmp_45_reg_1237 <= tmp_45_reg_1237;
        ap_reg_pp3_iter1_tmp_46_reg_1242 <= tmp_46_reg_1242;
        exitcond3_reg_1228 <= exitcond3_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        ap_reg_pp4_iter10_cols_mid2_reg_1266 <= ap_reg_pp4_iter9_cols_mid2_reg_1266;
        ap_reg_pp4_iter10_idx2_reg_1287 <= ap_reg_pp4_iter9_idx2_reg_1287;
        ap_reg_pp4_iter10_tmp_31_reg_1282 <= ap_reg_pp4_iter9_tmp_31_reg_1282;
        ap_reg_pp4_iter1_cols_mid2_reg_1266 <= cols_mid2_reg_1266;
        ap_reg_pp4_iter1_idx2_reg_1287 <= idx2_reg_1287;
        ap_reg_pp4_iter1_tmp_31_reg_1282 <= tmp_31_reg_1282;
        ap_reg_pp4_iter2_cols_mid2_reg_1266 <= ap_reg_pp4_iter1_cols_mid2_reg_1266;
        ap_reg_pp4_iter2_idx2_reg_1287 <= ap_reg_pp4_iter1_idx2_reg_1287;
        ap_reg_pp4_iter2_tmp_31_reg_1282 <= ap_reg_pp4_iter1_tmp_31_reg_1282;
        ap_reg_pp4_iter3_cols_mid2_reg_1266 <= ap_reg_pp4_iter2_cols_mid2_reg_1266;
        ap_reg_pp4_iter3_idx2_reg_1287 <= ap_reg_pp4_iter2_idx2_reg_1287;
        ap_reg_pp4_iter3_tmp_31_reg_1282 <= ap_reg_pp4_iter2_tmp_31_reg_1282;
        ap_reg_pp4_iter4_cols_mid2_reg_1266 <= ap_reg_pp4_iter3_cols_mid2_reg_1266;
        ap_reg_pp4_iter4_idx2_reg_1287 <= ap_reg_pp4_iter3_idx2_reg_1287;
        ap_reg_pp4_iter4_tmp_31_reg_1282 <= ap_reg_pp4_iter3_tmp_31_reg_1282;
        ap_reg_pp4_iter5_cols_mid2_reg_1266 <= ap_reg_pp4_iter4_cols_mid2_reg_1266;
        ap_reg_pp4_iter5_idx2_reg_1287 <= ap_reg_pp4_iter4_idx2_reg_1287;
        ap_reg_pp4_iter5_tmp_22_reg_1379 <= tmp_22_reg_1379;
        ap_reg_pp4_iter5_tmp_31_reg_1282 <= ap_reg_pp4_iter4_tmp_31_reg_1282;
        ap_reg_pp4_iter6_cols_mid2_reg_1266 <= ap_reg_pp4_iter5_cols_mid2_reg_1266;
        ap_reg_pp4_iter6_idx2_reg_1287 <= ap_reg_pp4_iter5_idx2_reg_1287;
        ap_reg_pp4_iter6_tmp_22_reg_1379 <= ap_reg_pp4_iter5_tmp_22_reg_1379;
        ap_reg_pp4_iter6_tmp_31_reg_1282 <= ap_reg_pp4_iter5_tmp_31_reg_1282;
        ap_reg_pp4_iter7_cols_mid2_reg_1266 <= ap_reg_pp4_iter6_cols_mid2_reg_1266;
        ap_reg_pp4_iter7_idx2_reg_1287 <= ap_reg_pp4_iter6_idx2_reg_1287;
        ap_reg_pp4_iter7_tmp_22_reg_1379 <= ap_reg_pp4_iter6_tmp_22_reg_1379;
        ap_reg_pp4_iter7_tmp_31_reg_1282 <= ap_reg_pp4_iter6_tmp_31_reg_1282;
        ap_reg_pp4_iter8_cols_mid2_reg_1266 <= ap_reg_pp4_iter7_cols_mid2_reg_1266;
        ap_reg_pp4_iter8_idx2_reg_1287 <= ap_reg_pp4_iter7_idx2_reg_1287;
        ap_reg_pp4_iter8_tmp_22_reg_1379 <= ap_reg_pp4_iter7_tmp_22_reg_1379;
        ap_reg_pp4_iter8_tmp_31_reg_1282 <= ap_reg_pp4_iter7_tmp_31_reg_1282;
        ap_reg_pp4_iter9_cols_mid2_reg_1266 <= ap_reg_pp4_iter8_cols_mid2_reg_1266;
        ap_reg_pp4_iter9_idx2_reg_1287 <= ap_reg_pp4_iter8_idx2_reg_1287;
        ap_reg_pp4_iter9_tmp_31_reg_1282 <= ap_reg_pp4_iter8_tmp_31_reg_1282;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        ap_reg_pp4_iter10_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter9_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter11_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter10_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter12_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter11_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter1_exitcond_flatten_reg_1252 <= exitcond_flatten_reg_1252;
        ap_reg_pp4_iter2_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter1_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter3_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter2_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter4_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter3_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter5_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter4_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter6_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter5_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter7_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter6_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter8_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter7_exitcond_flatten_reg_1252;
        ap_reg_pp4_iter9_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter8_exitcond_flatten_reg_1252;
        exitcond_flatten_reg_1252 <= exitcond_flatten_fu_857_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        ap_reg_pp4_iter2_pixelIn0_reg_1345 <= pixelIn0_reg_1345;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        ap_reg_pp4_iter4_tmp_19_reg_1372 <= tmp_19_reg_1372;
        ap_reg_pp4_iter5_tmp_19_reg_1372 <= ap_reg_pp4_iter4_tmp_19_reg_1372;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        cols_1_reg_1325 <= cols_1_fu_986_p2;
        pixelIn2_reg_1315 <= image2_q0;
        tmp_15_reg_1320 <= grp_fu_527_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        cols_mid2_reg_1266 <= cols_mid2_fu_883_p3;
        idx2_reg_1287 <= idx2_fu_976_p2;
        tmp_13_reg_1277 <= tmp_13_fu_960_p2;
        tmp_31_reg_1282 <= {{tmp_5_mid2_v_v_fu_891_p3[6:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        idx1_reg_1438 <= idx1_fu_991_p3;
        imageOut10_sum_reg_1443 <= imageOut10_sum_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        imageIn4_reg_1092 <= {{imageIn2[31:2]}};
        imageIn5_reg_1097 <= {{imageIn1[31:2]}};
        imageIn6_reg_1102 <= {{imageIn0[31:2]}};
        imageIn_reg_1087 <= {{imageIn3[31:2]}};
        tmp_2_reg_1082 <= {{imageOut[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        imageOut10_sum1_reg_1454 <= imageOut10_sum1_fu_1025_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        imageOut10_sum2_reg_1465 <= imageOut10_sum2_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        imageOut10_sum3_reg_1476 <= imageOut10_sum3_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_1256 <= indvar_flatten_next_fu_863_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        pixelIn0_reg_1345 <= image0_q0;
        pixelIn3_reg_1350 <= image3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage3_11001) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        pixelIn1_reg_1310 <= image1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        reg_548 <= grp_fu_524_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (exitcond_flatten_fu_857_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        rows_1_reg_1261 <= rows_1_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        rows_2_reg_1143 <= rows_2_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter3_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        tmp_14_reg_1360 <= grp_fu_527_p1;
        tmp_16_reg_1366 <= grp_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter5_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter5 == 1'b1))) begin
        tmp_17_reg_1386 <= grp_fu_530_p2;
        tmp_26_reg_1392 <= grp_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        tmp_18_reg_1340 <= grp_fu_527_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter3_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        tmp_19_reg_1372 <= grp_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_1_reg_1148[15 : 10] <= tmp_1_fu_665_p3[15 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_reg_pp4_iter7_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        tmp_20_reg_1398 <= grp_fu_530_p2;
        tmp_24_reg_1403 <= grp_fu_534_p2;
        tmp_27_reg_1408 <= grp_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        tmp_21_reg_1355 <= grp_fu_527_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter4_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter4 == 1'b1))) begin
        tmp_22_reg_1379 <= grp_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter10 == 1'b1))) begin
        tmp_23_reg_1418 <= grp_fu_534_p2;
        tmp_25_reg_1423 <= grp_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter10 == 1'b1))) begin
        tmp_28_reg_1428 <= grp_fu_530_p2;
        tmp_30_reg_1433 <= grp_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter8_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        tmp_29_reg_1413 <= grp_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_2_cast_reg_1131[29 : 0] <= tmp_2_cast_fu_646_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_34_reg_1165 <= tmp_34_fu_689_p1;
        tmp_9_reg_1170 <= {{imageIn0_addr_fu_693_p2[15:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_719_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_37_reg_1189 <= tmp_37_fu_735_p1;
        tmp_38_reg_1194 <= {{imageIn1_addr_fu_739_p2[15:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        tmp_41_cast_reg_1293[17 : 0] <= tmp_41_cast_fu_982_p1[17 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_765_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_41_reg_1213 <= tmp_41_fu_781_p1;
        tmp_42_reg_1218 <= {{imageIn2_addr_fu_785_p2[15:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_811_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        tmp_45_reg_1237 <= tmp_45_fu_827_p1;
        tmp_46_reg_1242 <= {{imageIn3_addr_fu_831_p2[15:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        tmp_5_mid2_v_v_reg_1272 <= tmp_5_mid2_v_v_fu_891_p3;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMAGE_IN0_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_IN0_ARVALID = 1'b1;
    end else begin
        IMAGE_IN0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1156 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IMAGE_IN0_RREADY = 1'b1;
    end else begin
        IMAGE_IN0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IMAGE_IN0_blk_n_AR = m_axi_IMAGE_IN0_ARREADY;
    end else begin
        IMAGE_IN0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_1156 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IMAGE_IN0_blk_n_R = m_axi_IMAGE_IN0_RVALID;
    end else begin
        IMAGE_IN0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMAGE_IN1_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_IN1_ARVALID = 1'b1;
    end else begin
        IMAGE_IN1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_1180 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        IMAGE_IN1_RREADY = 1'b1;
    end else begin
        IMAGE_IN1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IMAGE_IN1_blk_n_AR = m_axi_IMAGE_IN1_ARREADY;
    end else begin
        IMAGE_IN1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond1_reg_1180 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        IMAGE_IN1_blk_n_R = m_axi_IMAGE_IN1_RVALID;
    end else begin
        IMAGE_IN1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMAGE_IN2_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_IN2_ARVALID = 1'b1;
    end else begin
        IMAGE_IN2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_reg_1204 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        IMAGE_IN2_RREADY = 1'b1;
    end else begin
        IMAGE_IN2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IMAGE_IN2_blk_n_AR = m_axi_IMAGE_IN2_ARREADY;
    end else begin
        IMAGE_IN2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond2_reg_1204 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        IMAGE_IN2_blk_n_R = m_axi_IMAGE_IN2_RVALID;
    end else begin
        IMAGE_IN2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_IMAGE_IN3_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        IMAGE_IN3_ARVALID = 1'b1;
    end else begin
        IMAGE_IN3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_1228 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        IMAGE_IN3_RREADY = 1'b1;
    end else begin
        IMAGE_IN3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IMAGE_IN3_blk_n_AR = m_axi_IMAGE_IN3_ARREADY;
    end else begin
        IMAGE_IN3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (exitcond3_reg_1228 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        IMAGE_IN3_blk_n_R = m_axi_IMAGE_IN3_RVALID;
    end else begin
        IMAGE_IN3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_1673)) begin
            IMAGE_OUT_AWADDR = imageOut10_sum3_cast_fu_1072_p1;
        end else if ((1'b1 == ap_condition_1656)) begin
            IMAGE_OUT_AWADDR = imageOut10_sum2_cast_fu_1048_p1;
        end else if ((1'b1 == ap_condition_1639)) begin
            IMAGE_OUT_AWADDR = imageOut10_sum1_cast_fu_1030_p1;
        end else if ((1'b1 == ap_condition_1626)) begin
            IMAGE_OUT_AWADDR = imageOut10_sum_cast_fu_1006_p1;
        end else begin
            IMAGE_OUT_AWADDR = 'bx;
        end
    end else begin
        IMAGE_OUT_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage2_01001)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage1_01001)) | ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_AWREADY == 1'b0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001)) | ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_AWREADY == 1'b0) & (ap_enable_reg_pp4_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_01001)))) begin
        IMAGE_OUT_AWVALID = 1'b1;
    end else begin
        IMAGE_OUT_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter13 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        IMAGE_OUT_BREADY = 1'b1;
    end else begin
        IMAGE_OUT_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage2_01001)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage1_01001)) | ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_WREADY == 1'b0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_reg_ioackin_IMAGE_OUT_WREADY == 1'b0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_01001)))) begin
        IMAGE_OUT_WVALID = 1'b1;
    end else begin
        IMAGE_OUT_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        IMAGE_OUT_blk_n_AW = m_axi_IMAGE_OUT_AWREADY;
    end else begin
        IMAGE_OUT_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter13 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3) & (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        IMAGE_OUT_blk_n_B = m_axi_IMAGE_OUT_BVALID;
    end else begin
        IMAGE_OUT_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3) & (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        IMAGE_OUT_blk_n_W = m_axi_IMAGE_OUT_WREADY;
    end else begin
        IMAGE_OUT_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_673_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_719_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_765_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_811_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_857_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter13 == 1'b0) & (ap_enable_reg_pp4_iter12 == 1'b0) & (ap_enable_reg_pp4_iter11 == 1'b0) & (ap_enable_reg_pp4_iter10 == 1'b0) & (ap_enable_reg_pp4_iter9 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter8 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1) & (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ap_phi_mux_cols_phi_fu_516_p4 = cols_1_reg_1325;
    end else begin
        ap_phi_mux_cols_phi_fu_516_p4 = cols_reg_512;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_493_p4 = indvar_flatten_next_reg_1256;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_493_p4 = indvar_flatten_reg_489;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ap_phi_mux_rows1_phi_fu_504_p4 = tmp_5_mid2_v_v_reg_1272;
    end else begin
        ap_phi_mux_rows1_phi_fu_504_p4 = rows1_reg_500;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_IN0_ARREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_IN0_ARREADY = IMAGE_IN0_ARREADY;
    end else begin
        ap_sig_ioackin_IMAGE_IN0_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_IN1_ARREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_IN1_ARREADY = IMAGE_IN1_ARREADY;
    end else begin
        ap_sig_ioackin_IMAGE_IN1_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_IN2_ARREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_IN2_ARREADY = IMAGE_IN2_ARREADY;
    end else begin
        ap_sig_ioackin_IMAGE_IN2_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_IN3_ARREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_IN3_ARREADY = IMAGE_IN3_ARREADY;
    end else begin
        ap_sig_ioackin_IMAGE_IN3_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT_AWREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT_AWREADY = IMAGE_OUT_AWREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_IMAGE_OUT_WREADY == 1'b0)) begin
        ap_sig_ioackin_IMAGE_OUT_WREADY = IMAGE_OUT_WREADY;
    end else begin
        ap_sig_ioackin_IMAGE_OUT_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        grp_fu_524_ce = 1'b1;
    end else begin
        grp_fu_524_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1))) begin
        grp_fu_524_p0 = tmp_30_reg_1433;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        grp_fu_524_p0 = tmp_28_reg_1428;
    end else if (((1'b0 == ap_block_pp4_stage3) & (ap_enable_reg_pp4_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        grp_fu_524_p0 = tmp_25_reg_1423;
    end else if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter10 == 1'b1))) begin
        grp_fu_524_p0 = tmp_23_reg_1418;
    end else begin
        grp_fu_524_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        grp_fu_527_p0 = ap_reg_pp4_iter2_pixelIn0_reg_1345;
    end else if (((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        grp_fu_527_p0 = pixelIn3_reg_1350;
    end else if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        grp_fu_527_p0 = pixelIn2_reg_1315;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        grp_fu_527_p0 = pixelIn1_reg_1310;
    end else begin
        grp_fu_527_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        grp_fu_530_ce = 1'b1;
    end else begin
        grp_fu_530_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage2_00001)) | ((ap_reg_pp4_iter6_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter6 == 1'b1) & (1'b0 == ap_block_pp4_stage1_00001)))) begin
        grp_fu_530_opcode = 2'd1;
    end else if ((((ap_reg_pp4_iter5_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1) & (1'b0 == ap_block_pp4_stage0_00001)) | ((ap_reg_pp4_iter3_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage3_00001)))) begin
        grp_fu_530_opcode = 2'd0;
    end else begin
        grp_fu_530_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_530_p0 = tmp_27_reg_1408;
    end else if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter6 == 1'b1))) begin
        grp_fu_530_p0 = tmp_26_reg_1392;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1))) begin
        grp_fu_530_p0 = tmp_17_reg_1386;
    end else if (((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        grp_fu_530_p0 = tmp_14_reg_1360;
    end else begin
        grp_fu_530_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_530_p1 = ap_reg_pp4_iter8_tmp_22_reg_1379;
    end else if ((((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter6 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1)))) begin
        grp_fu_530_p1 = ap_reg_pp4_iter5_tmp_19_reg_1372;
    end else if (((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        grp_fu_530_p1 = tmp_16_reg_1366;
    end else begin
        grp_fu_530_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        grp_fu_534_ce = 1'b1;
    end else begin
        grp_fu_534_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp4_iter5_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1) & (1'b0 == ap_block_pp4_stage0_00001)) | ((ap_reg_pp4_iter3_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter3 == 1'b1) & (1'b0 == ap_block_pp4_stage3_00001)))) begin
        grp_fu_534_opcode = 2'd1;
    end else if ((((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage2_00001)) | ((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage1_00001)))) begin
        grp_fu_534_opcode = 2'd0;
    end else begin
        grp_fu_534_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_534_p0 = tmp_29_reg_1413;
    end else if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_534_p0 = tmp_20_reg_1398;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1))) begin
        grp_fu_534_p0 = tmp_17_reg_1386;
    end else if (((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        grp_fu_534_p0 = tmp_14_reg_1360;
    end else begin
        grp_fu_534_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_534_p1 = ap_reg_pp4_iter8_tmp_22_reg_1379;
    end else if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_534_p1 = ap_reg_pp4_iter7_tmp_22_reg_1379;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1))) begin
        grp_fu_534_p1 = ap_reg_pp4_iter5_tmp_19_reg_1372;
    end else if (((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        grp_fu_534_p1 = tmp_16_reg_1366;
    end else begin
        grp_fu_534_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        grp_fu_538_ce = 1'b1;
    end else begin
        grp_fu_538_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter8 == 1'b1) & (1'b0 == ap_block_pp4_stage1_00001))) begin
        grp_fu_538_opcode = 2'd1;
    end else if (((ap_reg_pp4_iter5_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1) & (1'b0 == ap_block_pp4_stage0_00001))) begin
        grp_fu_538_opcode = 2'd0;
    end else begin
        grp_fu_538_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_538_p0 = tmp_24_reg_1403;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1))) begin
        grp_fu_538_p0 = tmp_26_reg_1392;
    end else begin
        grp_fu_538_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter8 == 1'b1))) begin
        grp_fu_538_p1 = ap_reg_pp4_iter7_tmp_22_reg_1379;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter6 == 1'b1))) begin
        grp_fu_538_p1 = ap_reg_pp4_iter5_tmp_19_reg_1372;
    end else begin
        grp_fu_538_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
        grp_fu_542_ce = 1'b1;
    end else begin
        grp_fu_542_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        grp_fu_542_p0 = tmp_21_reg_1355;
    end else if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        grp_fu_542_p0 = tmp_18_reg_1340;
    end else if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        grp_fu_542_p0 = tmp_15_reg_1320;
    end else begin
        grp_fu_542_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        grp_fu_542_p1 = 64'd4598175219545276416;
    end else if ((((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1)))) begin
        grp_fu_542_p1 = 64'd4602678819172646912;
    end else begin
        grp_fu_542_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        image0_address0 = tmp_41_cast_reg_1293;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        image0_address0 = tmp_36_fu_714_p1;
    end else begin
        image0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        image0_ce0 = 1'b1;
    end else begin
        image0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_reg_1156 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        image0_we0 = 1'b1;
    end else begin
        image0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        image1_address0 = tmp_41_cast_fu_982_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        image1_address0 = tmp_40_fu_760_p1;
    end else begin
        image1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        image1_ce0 = 1'b1;
    end else begin
        image1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp1_iter1_exitcond1_reg_1180 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        image1_we0 = 1'b1;
    end else begin
        image1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        image2_address0 = tmp_41_cast_reg_1293;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        image2_address0 = tmp_44_fu_806_p1;
    end else begin
        image2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        image2_ce0 = 1'b1;
    end else begin
        image2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp2_iter1_exitcond2_reg_1204 == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        image2_we0 = 1'b1;
    end else begin
        image2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        image3_address0 = tmp_41_cast_reg_1293;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        image3_address0 = tmp_48_fu_852_p1;
    end else begin
        image3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        image3_ce0 = 1'b1;
    end else begin
        image3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp3_iter1_exitcond3_reg_1228 == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        image3_we0 = 1'b1;
    end else begin
        image3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_fu_649_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_673_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_673_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond1_fu_719_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond1_fu_719_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond2_fu_765_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond2_fu_765_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond3_fu_811_p2 == 1'd1)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond3_fu_811_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond_flatten_fu_857_p2 == 1'd1)) & ~((ap_enable_reg_pp4_iter12 == 1'b0) & (ap_enable_reg_pp4_iter13 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone)) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else if ((((ap_enable_reg_pp4_iter12 == 1'b0) & (ap_enable_reg_pp4_iter13 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond_flatten_fu_857_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_pp4_stage2 : begin
            if ((1'b0 == ap_block_pp4_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end
        end
        ap_ST_fsm_pp4_stage3 : begin
            if ((1'b0 == ap_block_pp4_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IMAGE_IN0_ARADDR = tmp_6_fu_636_p1;

assign IMAGE_IN1_ARADDR = tmp_5_fu_626_p1;

assign IMAGE_IN2_ARADDR = tmp_4_fu_616_p1;

assign IMAGE_IN3_ARADDR = tmp_3_fu_606_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp4_stage2 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp4_stage3 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_1156 == 1'd0) & (1'b0 == IMAGE_IN0_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_1156 == 1'd0) & (1'b0 == IMAGE_IN0_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond1_reg_1180 == 1'd0) & (1'b0 == IMAGE_IN1_RVALID) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond1_reg_1180 == 1'd0) & (1'b0 == IMAGE_IN1_RVALID) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((exitcond2_reg_1204 == 1'd0) & (1'b0 == IMAGE_IN2_RVALID) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((exitcond2_reg_1204 == 1'd0) & (1'b0 == IMAGE_IN2_RVALID) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((exitcond3_reg_1228 == 1'd0) & (1'b0 == IMAGE_IN3_RVALID) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((exitcond3_reg_1228 == 1'd0) & (1'b0 == IMAGE_IN3_RVALID) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_00001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter13 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter13 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter13 == 1'b1)) | ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp4_iter11 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter13 == 1'b1)) | ((1'b1 == ap_block_state70_io) & (ap_enable_reg_pp4_iter11 == 1'b1)));
end

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage1_00001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage1_01001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage1_11001 = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b1 == ap_block_state71_io) & (ap_enable_reg_pp4_iter11 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage1_subdone = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b1 == ap_block_state71_io) & (ap_enable_reg_pp4_iter11 == 1'b1)));
end

assign ap_block_pp4_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage2_00001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage2_01001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage2_11001 = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b1 == ap_block_state72_io) & (ap_enable_reg_pp4_iter11 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage2_subdone = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b1 == ap_block_state72_io) & (ap_enable_reg_pp4_iter11 == 1'b1)));
end

assign ap_block_pp4_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage3_00001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage3_01001 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage3_11001 = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b1 == ap_block_state73_io) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b1 == ap_block_state69_io) & (ap_enable_reg_pp4_iter10 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage3_subdone = (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID) & (ap_enable_reg_pp4_iter12 == 1'b1)) | ((1'b1 == ap_block_state73_io) & (ap_enable_reg_pp4_iter11 == 1'b1)) | ((1'b1 == ap_block_state69_io) & (ap_enable_reg_pp4_iter10 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((exitcond_reg_1156 == 1'd0) & (1'b0 == IMAGE_IN0_RVALID));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp1_stage0_iter1 = ((exitcond1_reg_1180 == 1'd0) & (1'b0 == IMAGE_IN1_RVALID));
end

assign ap_block_state16_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp2_stage0_iter1 = ((exitcond2_reg_1204 == 1'd0) & (1'b0 == IMAGE_IN2_RVALID));
end

assign ap_block_state20_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp3_stage0_iter1 = ((exitcond3_reg_1228 == 1'd0) & (1'b0 == IMAGE_IN3_RVALID));
end

assign ap_block_state24_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp4_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp4_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp4_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((ap_sig_ioackin_IMAGE_IN3_ARREADY == 1'b0) | (ap_sig_ioackin_IMAGE_IN2_ARREADY == 1'b0) | (ap_sig_ioackin_IMAGE_IN1_ARREADY == 1'b0) | (ap_sig_ioackin_IMAGE_IN0_ARREADY == 1'b0));
end

assign ap_block_state30_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp4_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp4_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp4_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp4_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp4_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp4_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp4_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp4_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp4_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp4_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp4_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp4_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp4_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp4_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp4_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp4_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp4_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp4_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp4_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp4_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp4_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp4_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp4_stage3_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp4_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp4_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp4_stage2_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state69_io = ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_AWREADY == 1'b0));
end

assign ap_block_state69_pp4_stage3_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state70_io = (((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_WREADY == 1'b0)) | ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_AWREADY == 1'b0)));
end

assign ap_block_state70_pp4_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state71_io = (((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_WREADY == 1'b0)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_AWREADY == 1'b0)));
end

assign ap_block_state71_pp4_stage1_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_io = (((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_WREADY == 1'b0)) | ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_AWREADY == 1'b0)));
end

assign ap_block_state72_pp4_stage2_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_io = ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (ap_sig_ioackin_IMAGE_OUT_WREADY == 1'b0));
end

assign ap_block_state73_pp4_stage3_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp4_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_pp4_stage1_iter12 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID));
end

always @ (*) begin
    ap_block_state76_pp4_stage2_iter12 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID));
end

always @ (*) begin
    ap_block_state77_pp4_stage3_iter12 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID));
end

always @ (*) begin
    ap_block_state78_pp4_stage0_iter13 = ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 == 1'd0) & (1'b0 == IMAGE_OUT_BVALID));
end

always @ (*) begin
    ap_condition_1626 = ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3) & (1'b0 == ap_block_pp4_stage3_01001));
end

always @ (*) begin
    ap_condition_1639 = ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 == 1'd0) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001));
end

always @ (*) begin
    ap_condition_1656 = ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage1_01001));
end

always @ (*) begin
    ap_condition_1673 = ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter11 == 1'b1) & (1'b0 == ap_block_pp4_stage2_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cols_1_fu_986_p2 = (12'd2 + cols_mid2_reg_1266);

assign cols_cast1_fu_942_p1 = cols_mid2_fu_883_p3;

assign cols_mid2_fu_883_p3 = ((tmp_8_fu_875_p3[0:0] === 1'b1) ? 12'd0 : ap_phi_mux_cols_phi_fu_516_p4);

assign exitcond1_fu_719_p2 = ((indvar1_reg_456 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond2_fu_765_p2 = ((indvar2_reg_467 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond3_fu_811_p2 = ((indvar3_reg_478 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_857_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_493_p4 == 17'd65536) ? 1'b1 : 1'b0);

assign exitcond_fu_673_p2 = ((indvar_reg_445 == 11'd1024) ? 1'b1 : 1'b0);

assign idx1_fu_991_p3 = {{ap_reg_pp4_iter10_tmp_31_reg_1282}, {ap_reg_pp4_iter10_cols_mid2_reg_1266}};

assign idx2_fu_976_p2 = (cols_cast1_fu_942_p1 + tmp_7_cast_mid2_fu_938_p1);

assign imageIn0_addr_fu_693_p2 = (indvar_cast9_fu_685_p1 + tmp_1_reg_1148);

assign imageIn1_addr_fu_739_p2 = (indvar1_cast7_fu_731_p1 + tmp_1_reg_1148);

assign imageIn2_addr_fu_785_p2 = (indvar2_cast5_fu_777_p1 + tmp_1_reg_1148);

assign imageIn3_addr_fu_831_p2 = (indvar3_cast3_fu_823_p1 + tmp_1_reg_1148);

assign imageOut10_sum1_cast_fu_1030_p1 = imageOut10_sum1_reg_1454;

assign imageOut10_sum1_fu_1025_p2 = (tmp_2_cast_reg_1131 + tmp_34_cast_fu_1021_p1);

assign imageOut10_sum2_cast_fu_1048_p1 = imageOut10_sum2_reg_1465;

assign imageOut10_sum2_fu_1043_p2 = (tmp_2_cast_reg_1131 + tmp_35_cast_fu_1040_p1);

assign imageOut10_sum3_cast_fu_1072_p1 = imageOut10_sum3_reg_1476;

assign imageOut10_sum3_fu_1067_p2 = (tmp_2_cast_reg_1131 + tmp_37_cast_fu_1063_p1);

assign imageOut10_sum_cast_fu_1006_p1 = imageOut10_sum_reg_1443;

assign imageOut10_sum_fu_1001_p2 = (tmp_2_cast_reg_1131 + tmp_32_cast_fu_997_p1);

assign indvar1_cast7_fu_731_p1 = indvar1_reg_456;

assign indvar2_cast5_fu_777_p1 = indvar2_reg_467;

assign indvar3_cast3_fu_823_p1 = indvar3_reg_478;

assign indvar_cast9_fu_685_p1 = indvar_reg_445;

assign indvar_flatten_next_fu_863_p2 = (ap_phi_mux_indvar_flatten_phi_fu_493_p4 + 17'd1);

assign indvar_next1_fu_725_p2 = (indvar1_reg_456 + 11'd1);

assign indvar_next2_fu_771_p2 = (indvar2_reg_467 + 11'd1);

assign indvar_next3_fu_817_p2 = (indvar3_reg_478 + 11'd1);

assign indvar_next_fu_679_p2 = (indvar_reg_445 + 11'd1);

assign rows_1_fu_869_p2 = (8'd2 + ap_phi_mux_rows1_phi_fu_504_p4);

assign rows_2_fu_655_p2 = (rows_reg_434 + 7'd1);

assign tmp_10_fu_920_p1 = tmp_5_mid2_v_v_fu_891_p3[6:0];

assign tmp_11_cast_fu_916_p1 = tmp_s_fu_908_p3;

assign tmp_12_fu_946_p4 = {{cols_mid2_fu_883_p3[11:1]}};

assign tmp_13_fu_960_p2 = (tmp_11_cast_fu_916_p1 + tmp_14_cast_fu_956_p1);

assign tmp_14_cast_fu_956_p1 = tmp_12_fu_946_p4;

assign tmp_1_fu_665_p3 = {{tmp_7_fu_661_p1}, {10'd0}};

assign tmp_2_cast_fu_646_p1 = tmp_2_reg_1082;

assign tmp_32_cast_fu_997_p1 = idx1_fu_991_p3;

assign tmp_32_fu_1016_p2 = (idx1_reg_1438 | 18'd1);

assign tmp_33_fu_1058_p2 = (ap_reg_pp4_iter10_idx2_reg_1287 | 19'd1);

assign tmp_34_cast_fu_1021_p1 = tmp_32_fu_1016_p2;

assign tmp_34_fu_689_p1 = indvar_reg_445[9:0];

assign tmp_35_cast_fu_1040_p1 = ap_reg_pp4_iter10_idx2_reg_1287;

assign tmp_35_fu_708_p3 = {{ap_reg_pp0_iter1_tmp_9_reg_1170}, {ap_reg_pp0_iter1_tmp_34_reg_1165}};

assign tmp_36_fu_714_p1 = tmp_35_fu_708_p3;

assign tmp_37_cast_fu_1063_p1 = tmp_33_fu_1058_p2;

assign tmp_37_fu_735_p1 = indvar1_reg_456[9:0];

assign tmp_39_fu_754_p3 = {{ap_reg_pp1_iter1_tmp_38_reg_1194}, {ap_reg_pp1_iter1_tmp_37_reg_1189}};

assign tmp_3_fu_606_p1 = imageIn_reg_1087;

assign tmp_40_fu_760_p1 = tmp_39_fu_754_p3;

assign tmp_41_cast_fu_982_p1 = tmp_13_reg_1277;

assign tmp_41_fu_781_p1 = indvar2_reg_467[9:0];

assign tmp_43_fu_800_p3 = {{ap_reg_pp2_iter1_tmp_42_reg_1218}, {ap_reg_pp2_iter1_tmp_41_reg_1213}};

assign tmp_44_fu_806_p1 = tmp_43_fu_800_p3;

assign tmp_45_fu_827_p1 = indvar3_reg_478[9:0];

assign tmp_47_fu_846_p3 = {{ap_reg_pp3_iter1_tmp_46_reg_1242}, {ap_reg_pp3_iter1_tmp_45_reg_1237}};

assign tmp_48_fu_852_p1 = tmp_47_fu_846_p3;

assign tmp_4_fu_616_p1 = imageIn4_reg_1092;

assign tmp_5_fu_626_p1 = imageIn5_reg_1097;

assign tmp_5_mid2_v_fu_898_p4 = {{tmp_5_mid2_v_v_fu_891_p3[7:1]}};

assign tmp_5_mid2_v_v_fu_891_p3 = ((tmp_8_fu_875_p3[0:0] === 1'b1) ? rows_1_reg_1261 : rows1_reg_500);

assign tmp_6_fu_636_p1 = imageIn6_reg_1102;

assign tmp_7_cast_mid2_fu_938_p1 = tmp_7_cast_mid2_v_fu_932_p2;

assign tmp_7_cast_mid2_v_fu_932_p2 = (tmp_7_cast_mid2_v_v_fu_924_p3 | 18'd2048);

assign tmp_7_cast_mid2_v_v_fu_924_p3 = {{tmp_10_fu_920_p1}, {11'd0}};

assign tmp_7_fu_661_p1 = rows_reg_434[5:0];

assign tmp_8_fu_875_p3 = ap_phi_mux_cols_phi_fu_516_p4[32'd11];

assign tmp_fu_649_p2 = ((rows_reg_434 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_s_fu_908_p3 = {{tmp_5_mid2_v_fu_898_p4}, {10'd0}};

always @ (posedge ap_clk) begin
    tmp_2_cast_reg_1131[30] <= 1'b0;
    tmp_1_reg_1148[9:0] <= 10'b0000000000;
    tmp_41_cast_reg_1293[63:18] <= 46'b0000000000000000000000000000000000000000000000;
end

endmodule //idwt
