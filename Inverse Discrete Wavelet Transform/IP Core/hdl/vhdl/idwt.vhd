-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity idwt is
generic (
    C_M_AXI_IMAGE_IN0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN0_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN1_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN2_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN3_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IMAGE_IN0_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN0_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN0_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN0_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN1_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN1_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN1_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN2_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN2_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN2_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN3_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN3_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN3_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_OUT_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_OUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of idwt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "idwt,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=525178,HLS_SYN_TPT=none,HLS_SYN_MEM=526,HLS_SYN_DSP=20,HLS_SYN_FF=7971,HLS_SYN_LUT=9433}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_pp4_stage2 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_pp4_stage3 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv18_800 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal imageIn0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageIn1 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageIn2 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageIn3 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IMAGE_IN0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_blk_n_AR : STD_LOGIC;
    signal IMAGE_IN1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond1_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_blk_n_AR : STD_LOGIC;
    signal IMAGE_IN2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond2_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_blk_n_AR : STD_LOGIC;
    signal IMAGE_IN3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond3_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage3 : signal is "none";
    signal ap_enable_reg_pp4_iter10 : STD_LOGIC := '0';
    signal ap_block_pp4_stage3 : BOOLEAN;
    signal exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter10_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter11 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal IMAGE_OUT_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_enable_reg_pp4_iter12 : STD_LOGIC := '0';
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal ap_reg_pp4_iter12_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter11_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage2 : signal is "none";
    signal ap_block_pp4_stage2 : BOOLEAN;
    signal ap_enable_reg_pp4_iter13 : STD_LOGIC := '0';
    signal IMAGE_IN0_AWREADY : STD_LOGIC;
    signal IMAGE_IN0_WREADY : STD_LOGIC;
    signal IMAGE_IN0_ARVALID : STD_LOGIC;
    signal IMAGE_IN0_ARREADY : STD_LOGIC;
    signal IMAGE_IN0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN0_RVALID : STD_LOGIC;
    signal IMAGE_IN0_RREADY : STD_LOGIC;
    signal IMAGE_IN0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN0_RLAST : STD_LOGIC;
    signal IMAGE_IN0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN0_BVALID : STD_LOGIC;
    signal IMAGE_IN0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_AWREADY : STD_LOGIC;
    signal IMAGE_IN1_WREADY : STD_LOGIC;
    signal IMAGE_IN1_ARVALID : STD_LOGIC;
    signal IMAGE_IN1_ARREADY : STD_LOGIC;
    signal IMAGE_IN1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN1_RVALID : STD_LOGIC;
    signal IMAGE_IN1_RREADY : STD_LOGIC;
    signal IMAGE_IN1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN1_RLAST : STD_LOGIC;
    signal IMAGE_IN1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN1_BVALID : STD_LOGIC;
    signal IMAGE_IN1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_AWREADY : STD_LOGIC;
    signal IMAGE_IN2_WREADY : STD_LOGIC;
    signal IMAGE_IN2_ARVALID : STD_LOGIC;
    signal IMAGE_IN2_ARREADY : STD_LOGIC;
    signal IMAGE_IN2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN2_RVALID : STD_LOGIC;
    signal IMAGE_IN2_RREADY : STD_LOGIC;
    signal IMAGE_IN2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN2_RLAST : STD_LOGIC;
    signal IMAGE_IN2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN2_BVALID : STD_LOGIC;
    signal IMAGE_IN2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_AWREADY : STD_LOGIC;
    signal IMAGE_IN3_WREADY : STD_LOGIC;
    signal IMAGE_IN3_ARVALID : STD_LOGIC;
    signal IMAGE_IN3_ARREADY : STD_LOGIC;
    signal IMAGE_IN3_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN3_RVALID : STD_LOGIC;
    signal IMAGE_IN3_RREADY : STD_LOGIC;
    signal IMAGE_IN3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN3_RLAST : STD_LOGIC;
    signal IMAGE_IN3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN3_BVALID : STD_LOGIC;
    signal IMAGE_IN3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_AWVALID : STD_LOGIC;
    signal IMAGE_OUT_AWREADY : STD_LOGIC;
    signal IMAGE_OUT_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT_WVALID : STD_LOGIC;
    signal IMAGE_OUT_WREADY : STD_LOGIC;
    signal IMAGE_OUT_ARREADY : STD_LOGIC;
    signal IMAGE_OUT_RVALID : STD_LOGIC;
    signal IMAGE_OUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT_RLAST : STD_LOGIC;
    signal IMAGE_OUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT_BVALID : STD_LOGIC;
    signal IMAGE_OUT_BREADY : STD_LOGIC;
    signal IMAGE_OUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_445 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar1_reg_456 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar2_reg_467 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar3_reg_478 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_reg_489 : STD_LOGIC_VECTOR (16 downto 0);
    signal rows1_reg_500 : STD_LOGIC_VECTOR (7 downto 0);
    signal cols_reg_512 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state29_pp4_stage3_iter0 : BOOLEAN;
    signal ap_block_state33_pp4_stage3_iter1 : BOOLEAN;
    signal ap_block_state37_pp4_stage3_iter2 : BOOLEAN;
    signal ap_block_state41_pp4_stage3_iter3 : BOOLEAN;
    signal ap_block_state45_pp4_stage3_iter4 : BOOLEAN;
    signal ap_block_state49_pp4_stage3_iter5 : BOOLEAN;
    signal ap_block_state53_pp4_stage3_iter6 : BOOLEAN;
    signal ap_block_state57_pp4_stage3_iter7 : BOOLEAN;
    signal ap_block_state61_pp4_stage3_iter8 : BOOLEAN;
    signal ap_block_state65_pp4_stage3_iter9 : BOOLEAN;
    signal ap_block_state69_pp4_stage3_iter10 : BOOLEAN;
    signal ap_sig_ioackin_IMAGE_OUT_AWREADY : STD_LOGIC;
    signal ap_block_state69_io : BOOLEAN;
    signal ap_block_state73_pp4_stage3_iter11 : BOOLEAN;
    signal ap_sig_ioackin_IMAGE_OUT_WREADY : STD_LOGIC;
    signal ap_block_state73_io : BOOLEAN;
    signal ap_block_state77_pp4_stage3_iter12 : BOOLEAN;
    signal ap_block_pp4_stage3_11001 : BOOLEAN;
    signal ap_block_state26_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state38_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state42_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state46_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state54_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_state58_pp4_stage0_iter8 : BOOLEAN;
    signal ap_block_state62_pp4_stage0_iter9 : BOOLEAN;
    signal ap_block_state66_pp4_stage0_iter10 : BOOLEAN;
    signal ap_block_state70_pp4_stage0_iter11 : BOOLEAN;
    signal ap_block_state70_io : BOOLEAN;
    signal ap_block_state74_pp4_stage0_iter12 : BOOLEAN;
    signal ap_block_state78_pp4_stage0_iter13 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal ap_block_state27_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_state31_pp4_stage1_iter1 : BOOLEAN;
    signal ap_block_state35_pp4_stage1_iter2 : BOOLEAN;
    signal ap_block_state39_pp4_stage1_iter3 : BOOLEAN;
    signal ap_block_state43_pp4_stage1_iter4 : BOOLEAN;
    signal ap_block_state47_pp4_stage1_iter5 : BOOLEAN;
    signal ap_block_state51_pp4_stage1_iter6 : BOOLEAN;
    signal ap_block_state55_pp4_stage1_iter7 : BOOLEAN;
    signal ap_block_state59_pp4_stage1_iter8 : BOOLEAN;
    signal ap_block_state63_pp4_stage1_iter9 : BOOLEAN;
    signal ap_block_state67_pp4_stage1_iter10 : BOOLEAN;
    signal ap_block_state71_pp4_stage1_iter11 : BOOLEAN;
    signal ap_block_state71_io : BOOLEAN;
    signal ap_block_state75_pp4_stage1_iter12 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal ap_block_state28_pp4_stage2_iter0 : BOOLEAN;
    signal ap_block_state32_pp4_stage2_iter1 : BOOLEAN;
    signal ap_block_state36_pp4_stage2_iter2 : BOOLEAN;
    signal ap_block_state40_pp4_stage2_iter3 : BOOLEAN;
    signal ap_block_state44_pp4_stage2_iter4 : BOOLEAN;
    signal ap_block_state48_pp4_stage2_iter5 : BOOLEAN;
    signal ap_block_state52_pp4_stage2_iter6 : BOOLEAN;
    signal ap_block_state56_pp4_stage2_iter7 : BOOLEAN;
    signal ap_block_state60_pp4_stage2_iter8 : BOOLEAN;
    signal ap_block_state64_pp4_stage2_iter9 : BOOLEAN;
    signal ap_block_state68_pp4_stage2_iter10 : BOOLEAN;
    signal ap_block_state72_pp4_stage2_iter11 : BOOLEAN;
    signal ap_block_state72_io : BOOLEAN;
    signal ap_block_state76_pp4_stage2_iter12 : BOOLEAN;
    signal ap_block_pp4_stage2_11001 : BOOLEAN;
    signal tmp_2_reg_1082 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn_reg_1087 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn4_reg_1092 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn5_reg_1097 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn6_reg_1102 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_IMAGE_IN0_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_IN1_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_IN2_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_IN3_ARREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_2_cast_fu_646_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_cast_reg_1131 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal rows_2_fu_655_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal rows_2_reg_1143 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_665_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1148 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_679_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_34_fu_689_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_reg_1165 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter1_tmp_34_reg_1165 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_1170 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter1_tmp_9_reg_1170 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN0_addr_read_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond1_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_725_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_37_fu_735_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_reg_1189 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp1_iter1_tmp_37_reg_1189 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_38_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp1_iter1_tmp_38_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN1_addr_read_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state18_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_reg_pp2_iter1_exitcond2_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_771_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_41_fu_781_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_reg_1213 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter1_tmp_41_reg_1213 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_reg_1218 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp2_iter1_tmp_42_reg_1218 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN2_addr_read_reg_1223 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_reg_pp3_iter1_exitcond3_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next3_fu_817_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_45_fu_827_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_reg_1237 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp3_iter1_tmp_45_reg_1237 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_reg_1242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp3_iter1_tmp_46_reg_1242 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN3_addr_read_reg_1247 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter1_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter2_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter3_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter4_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter5_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter6_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter7_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter8_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp4_iter9_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_863_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten_next_reg_1256 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal rows_1_fu_869_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rows_1_reg_1261 : STD_LOGIC_VECTOR (7 downto 0);
    signal cols_mid2_fu_883_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter1_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter2_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter3_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter4_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter5_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter6_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter7_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter8_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter9_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp4_iter10_cols_mid2_reg_1266 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_mid2_v_v_fu_891_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_mid2_v_v_reg_1272 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_960_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_13_reg_1277 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter1_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter2_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter3_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter4_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter5_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter6_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter7_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter8_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter9_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp4_iter10_tmp_31_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx2_fu_976_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter1_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter2_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter3_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter4_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter5_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter6_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter7_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter8_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter9_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp4_iter10_idx2_reg_1287 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_41_cast_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_reg_1293 : STD_LOGIC_VECTOR (63 downto 0);
    signal image1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn1_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal image2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn2_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal grp_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_reg_1320 : STD_LOGIC_VECTOR (63 downto 0);
    signal cols_1_fu_986_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal cols_1_reg_1325 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_reg_1340 : STD_LOGIC_VECTOR (63 downto 0);
    signal image0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn0_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp4_iter2_pixelIn0_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal image3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn3_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1355 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_reg_1360 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_1366 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_1372 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp4_iter4_tmp_19_reg_1372 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp4_iter5_tmp_19_reg_1372 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_reg_pp4_iter5_tmp_22_reg_1379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp4_iter6_tmp_22_reg_1379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp4_iter7_tmp_22_reg_1379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp4_iter8_tmp_22_reg_1379 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_1386 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_reg_1392 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_1398 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp4_iter8 : STD_LOGIC := '0';
    signal tmp_24_reg_1403 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_reg_1408 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_1413 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1418 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_1423 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_1428 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_1433 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx1_fu_991_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal idx1_reg_1438 : STD_LOGIC_VECTOR (17 downto 0);
    signal imageOut10_sum_fu_1001_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum_reg_1443 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum1_fu_1025_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum1_reg_1454 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum2_fu_1043_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum2_reg_1465 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum3_fu_1067_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum3_reg_1476 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state26 : STD_LOGIC;
    signal ap_block_pp4_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter9 : STD_LOGIC := '0';
    signal image0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image0_ce0 : STD_LOGIC;
    signal image0_we0 : STD_LOGIC;
    signal image1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image1_ce0 : STD_LOGIC;
    signal image1_we0 : STD_LOGIC;
    signal image2_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image2_ce0 : STD_LOGIC;
    signal image2_we0 : STD_LOGIC;
    signal image3_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image3_ce0 : STD_LOGIC;
    signal image3_we0 : STD_LOGIC;
    signal rows_reg_434 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_493_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_rows1_phi_fu_504_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_cols_phi_fu_516_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_36_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum_cast_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum1_cast_fu_1030_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum2_cast_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum3_cast_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_IMAGE_IN0_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_IN1_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_IN2_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_IN3_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp4_stage3_01001 : BOOLEAN;
    signal ap_reg_ioackin_IMAGE_OUT_WREADY : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_block_pp4_stage1_01001 : BOOLEAN;
    signal ap_block_pp4_stage2_01001 : BOOLEAN;
    signal grp_fu_524_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_527_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_530_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_534_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_538_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_542_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_661_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_cast9_fu_685_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn0_addr_fu_693_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_708_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar1_cast7_fu_731_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn1_addr_fu_739_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_754_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar2_cast5_fu_777_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn2_addr_fu_785_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_fu_800_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar3_cast3_fu_823_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn3_addr_fu_831_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_846_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_875_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_mid2_v_fu_898_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_908_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_920_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_mid2_v_v_fu_924_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_cast_mid2_v_fu_932_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_fu_946_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_cast_fu_916_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_cast_fu_956_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal cols_cast1_fu_942_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_cast_mid2_fu_938_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_32_cast_fu_997_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_32_fu_1016_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_34_cast_fu_1021_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_cast_fu_1040_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_1058_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_37_cast_fu_1063_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_524_ce : STD_LOGIC;
    signal grp_fu_530_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp4_stage3_00001 : BOOLEAN;
    signal ap_block_pp4_stage0_00001 : BOOLEAN;
    signal ap_block_pp4_stage1_00001 : BOOLEAN;
    signal ap_block_pp4_stage2_00001 : BOOLEAN;
    signal grp_fu_530_ce : STD_LOGIC;
    signal grp_fu_534_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_534_ce : STD_LOGIC;
    signal grp_fu_538_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_538_ce : STD_LOGIC;
    signal grp_fu_542_ce : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_block_pp4_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_condition_1626 : BOOLEAN;
    signal ap_condition_1639 : BOOLEAN;
    signal ap_condition_1656 : BOOLEAN;
    signal ap_condition_1673 : BOOLEAN;

    component idwt_fptrunc_64nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component idwt_fpext_32ns_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component idwt_dadddsub_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component idwt_dmul_64ns_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component idwt_image0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component idwt_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        imageIn0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageIn1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageIn2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageIn3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageOut : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component idwt_IMAGE_IN0_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_IN1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_IN2_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_IN3_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_OUT_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    idwt_CONTROL_BUS_s_axi_U : component idwt_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        imageIn0 => imageIn0,
        imageIn1 => imageIn1,
        imageIn2 => imageIn2,
        imageIn3 => imageIn3,
        imageOut => imageOut);

    idwt_IMAGE_IN0_m_axi_U : component idwt_IMAGE_IN0_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN0_AWVALID,
        AWREADY => m_axi_IMAGE_IN0_AWREADY,
        AWADDR => m_axi_IMAGE_IN0_AWADDR,
        AWID => m_axi_IMAGE_IN0_AWID,
        AWLEN => m_axi_IMAGE_IN0_AWLEN,
        AWSIZE => m_axi_IMAGE_IN0_AWSIZE,
        AWBURST => m_axi_IMAGE_IN0_AWBURST,
        AWLOCK => m_axi_IMAGE_IN0_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN0_AWCACHE,
        AWPROT => m_axi_IMAGE_IN0_AWPROT,
        AWQOS => m_axi_IMAGE_IN0_AWQOS,
        AWREGION => m_axi_IMAGE_IN0_AWREGION,
        AWUSER => m_axi_IMAGE_IN0_AWUSER,
        WVALID => m_axi_IMAGE_IN0_WVALID,
        WREADY => m_axi_IMAGE_IN0_WREADY,
        WDATA => m_axi_IMAGE_IN0_WDATA,
        WSTRB => m_axi_IMAGE_IN0_WSTRB,
        WLAST => m_axi_IMAGE_IN0_WLAST,
        WID => m_axi_IMAGE_IN0_WID,
        WUSER => m_axi_IMAGE_IN0_WUSER,
        ARVALID => m_axi_IMAGE_IN0_ARVALID,
        ARREADY => m_axi_IMAGE_IN0_ARREADY,
        ARADDR => m_axi_IMAGE_IN0_ARADDR,
        ARID => m_axi_IMAGE_IN0_ARID,
        ARLEN => m_axi_IMAGE_IN0_ARLEN,
        ARSIZE => m_axi_IMAGE_IN0_ARSIZE,
        ARBURST => m_axi_IMAGE_IN0_ARBURST,
        ARLOCK => m_axi_IMAGE_IN0_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN0_ARCACHE,
        ARPROT => m_axi_IMAGE_IN0_ARPROT,
        ARQOS => m_axi_IMAGE_IN0_ARQOS,
        ARREGION => m_axi_IMAGE_IN0_ARREGION,
        ARUSER => m_axi_IMAGE_IN0_ARUSER,
        RVALID => m_axi_IMAGE_IN0_RVALID,
        RREADY => m_axi_IMAGE_IN0_RREADY,
        RDATA => m_axi_IMAGE_IN0_RDATA,
        RLAST => m_axi_IMAGE_IN0_RLAST,
        RID => m_axi_IMAGE_IN0_RID,
        RUSER => m_axi_IMAGE_IN0_RUSER,
        RRESP => m_axi_IMAGE_IN0_RRESP,
        BVALID => m_axi_IMAGE_IN0_BVALID,
        BREADY => m_axi_IMAGE_IN0_BREADY,
        BRESP => m_axi_IMAGE_IN0_BRESP,
        BID => m_axi_IMAGE_IN0_BID,
        BUSER => m_axi_IMAGE_IN0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN0_ARVALID,
        I_ARREADY => IMAGE_IN0_ARREADY,
        I_ARADDR => IMAGE_IN0_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN0_RVALID,
        I_RREADY => IMAGE_IN0_RREADY,
        I_RDATA => IMAGE_IN0_RDATA,
        I_RID => IMAGE_IN0_RID,
        I_RUSER => IMAGE_IN0_RUSER,
        I_RRESP => IMAGE_IN0_RRESP,
        I_RLAST => IMAGE_IN0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN0_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN0_BRESP,
        I_BID => IMAGE_IN0_BID,
        I_BUSER => IMAGE_IN0_BUSER);

    idwt_IMAGE_IN1_m_axi_U : component idwt_IMAGE_IN1_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN1_AWVALID,
        AWREADY => m_axi_IMAGE_IN1_AWREADY,
        AWADDR => m_axi_IMAGE_IN1_AWADDR,
        AWID => m_axi_IMAGE_IN1_AWID,
        AWLEN => m_axi_IMAGE_IN1_AWLEN,
        AWSIZE => m_axi_IMAGE_IN1_AWSIZE,
        AWBURST => m_axi_IMAGE_IN1_AWBURST,
        AWLOCK => m_axi_IMAGE_IN1_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN1_AWCACHE,
        AWPROT => m_axi_IMAGE_IN1_AWPROT,
        AWQOS => m_axi_IMAGE_IN1_AWQOS,
        AWREGION => m_axi_IMAGE_IN1_AWREGION,
        AWUSER => m_axi_IMAGE_IN1_AWUSER,
        WVALID => m_axi_IMAGE_IN1_WVALID,
        WREADY => m_axi_IMAGE_IN1_WREADY,
        WDATA => m_axi_IMAGE_IN1_WDATA,
        WSTRB => m_axi_IMAGE_IN1_WSTRB,
        WLAST => m_axi_IMAGE_IN1_WLAST,
        WID => m_axi_IMAGE_IN1_WID,
        WUSER => m_axi_IMAGE_IN1_WUSER,
        ARVALID => m_axi_IMAGE_IN1_ARVALID,
        ARREADY => m_axi_IMAGE_IN1_ARREADY,
        ARADDR => m_axi_IMAGE_IN1_ARADDR,
        ARID => m_axi_IMAGE_IN1_ARID,
        ARLEN => m_axi_IMAGE_IN1_ARLEN,
        ARSIZE => m_axi_IMAGE_IN1_ARSIZE,
        ARBURST => m_axi_IMAGE_IN1_ARBURST,
        ARLOCK => m_axi_IMAGE_IN1_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN1_ARCACHE,
        ARPROT => m_axi_IMAGE_IN1_ARPROT,
        ARQOS => m_axi_IMAGE_IN1_ARQOS,
        ARREGION => m_axi_IMAGE_IN1_ARREGION,
        ARUSER => m_axi_IMAGE_IN1_ARUSER,
        RVALID => m_axi_IMAGE_IN1_RVALID,
        RREADY => m_axi_IMAGE_IN1_RREADY,
        RDATA => m_axi_IMAGE_IN1_RDATA,
        RLAST => m_axi_IMAGE_IN1_RLAST,
        RID => m_axi_IMAGE_IN1_RID,
        RUSER => m_axi_IMAGE_IN1_RUSER,
        RRESP => m_axi_IMAGE_IN1_RRESP,
        BVALID => m_axi_IMAGE_IN1_BVALID,
        BREADY => m_axi_IMAGE_IN1_BREADY,
        BRESP => m_axi_IMAGE_IN1_BRESP,
        BID => m_axi_IMAGE_IN1_BID,
        BUSER => m_axi_IMAGE_IN1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN1_ARVALID,
        I_ARREADY => IMAGE_IN1_ARREADY,
        I_ARADDR => IMAGE_IN1_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN1_RVALID,
        I_RREADY => IMAGE_IN1_RREADY,
        I_RDATA => IMAGE_IN1_RDATA,
        I_RID => IMAGE_IN1_RID,
        I_RUSER => IMAGE_IN1_RUSER,
        I_RRESP => IMAGE_IN1_RRESP,
        I_RLAST => IMAGE_IN1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN1_BRESP,
        I_BID => IMAGE_IN1_BID,
        I_BUSER => IMAGE_IN1_BUSER);

    idwt_IMAGE_IN2_m_axi_U : component idwt_IMAGE_IN2_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN2_AWVALID,
        AWREADY => m_axi_IMAGE_IN2_AWREADY,
        AWADDR => m_axi_IMAGE_IN2_AWADDR,
        AWID => m_axi_IMAGE_IN2_AWID,
        AWLEN => m_axi_IMAGE_IN2_AWLEN,
        AWSIZE => m_axi_IMAGE_IN2_AWSIZE,
        AWBURST => m_axi_IMAGE_IN2_AWBURST,
        AWLOCK => m_axi_IMAGE_IN2_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN2_AWCACHE,
        AWPROT => m_axi_IMAGE_IN2_AWPROT,
        AWQOS => m_axi_IMAGE_IN2_AWQOS,
        AWREGION => m_axi_IMAGE_IN2_AWREGION,
        AWUSER => m_axi_IMAGE_IN2_AWUSER,
        WVALID => m_axi_IMAGE_IN2_WVALID,
        WREADY => m_axi_IMAGE_IN2_WREADY,
        WDATA => m_axi_IMAGE_IN2_WDATA,
        WSTRB => m_axi_IMAGE_IN2_WSTRB,
        WLAST => m_axi_IMAGE_IN2_WLAST,
        WID => m_axi_IMAGE_IN2_WID,
        WUSER => m_axi_IMAGE_IN2_WUSER,
        ARVALID => m_axi_IMAGE_IN2_ARVALID,
        ARREADY => m_axi_IMAGE_IN2_ARREADY,
        ARADDR => m_axi_IMAGE_IN2_ARADDR,
        ARID => m_axi_IMAGE_IN2_ARID,
        ARLEN => m_axi_IMAGE_IN2_ARLEN,
        ARSIZE => m_axi_IMAGE_IN2_ARSIZE,
        ARBURST => m_axi_IMAGE_IN2_ARBURST,
        ARLOCK => m_axi_IMAGE_IN2_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN2_ARCACHE,
        ARPROT => m_axi_IMAGE_IN2_ARPROT,
        ARQOS => m_axi_IMAGE_IN2_ARQOS,
        ARREGION => m_axi_IMAGE_IN2_ARREGION,
        ARUSER => m_axi_IMAGE_IN2_ARUSER,
        RVALID => m_axi_IMAGE_IN2_RVALID,
        RREADY => m_axi_IMAGE_IN2_RREADY,
        RDATA => m_axi_IMAGE_IN2_RDATA,
        RLAST => m_axi_IMAGE_IN2_RLAST,
        RID => m_axi_IMAGE_IN2_RID,
        RUSER => m_axi_IMAGE_IN2_RUSER,
        RRESP => m_axi_IMAGE_IN2_RRESP,
        BVALID => m_axi_IMAGE_IN2_BVALID,
        BREADY => m_axi_IMAGE_IN2_BREADY,
        BRESP => m_axi_IMAGE_IN2_BRESP,
        BID => m_axi_IMAGE_IN2_BID,
        BUSER => m_axi_IMAGE_IN2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN2_ARVALID,
        I_ARREADY => IMAGE_IN2_ARREADY,
        I_ARADDR => IMAGE_IN2_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN2_RVALID,
        I_RREADY => IMAGE_IN2_RREADY,
        I_RDATA => IMAGE_IN2_RDATA,
        I_RID => IMAGE_IN2_RID,
        I_RUSER => IMAGE_IN2_RUSER,
        I_RRESP => IMAGE_IN2_RRESP,
        I_RLAST => IMAGE_IN2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN2_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN2_BRESP,
        I_BID => IMAGE_IN2_BID,
        I_BUSER => IMAGE_IN2_BUSER);

    idwt_IMAGE_IN3_m_axi_U : component idwt_IMAGE_IN3_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN3_AWVALID,
        AWREADY => m_axi_IMAGE_IN3_AWREADY,
        AWADDR => m_axi_IMAGE_IN3_AWADDR,
        AWID => m_axi_IMAGE_IN3_AWID,
        AWLEN => m_axi_IMAGE_IN3_AWLEN,
        AWSIZE => m_axi_IMAGE_IN3_AWSIZE,
        AWBURST => m_axi_IMAGE_IN3_AWBURST,
        AWLOCK => m_axi_IMAGE_IN3_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN3_AWCACHE,
        AWPROT => m_axi_IMAGE_IN3_AWPROT,
        AWQOS => m_axi_IMAGE_IN3_AWQOS,
        AWREGION => m_axi_IMAGE_IN3_AWREGION,
        AWUSER => m_axi_IMAGE_IN3_AWUSER,
        WVALID => m_axi_IMAGE_IN3_WVALID,
        WREADY => m_axi_IMAGE_IN3_WREADY,
        WDATA => m_axi_IMAGE_IN3_WDATA,
        WSTRB => m_axi_IMAGE_IN3_WSTRB,
        WLAST => m_axi_IMAGE_IN3_WLAST,
        WID => m_axi_IMAGE_IN3_WID,
        WUSER => m_axi_IMAGE_IN3_WUSER,
        ARVALID => m_axi_IMAGE_IN3_ARVALID,
        ARREADY => m_axi_IMAGE_IN3_ARREADY,
        ARADDR => m_axi_IMAGE_IN3_ARADDR,
        ARID => m_axi_IMAGE_IN3_ARID,
        ARLEN => m_axi_IMAGE_IN3_ARLEN,
        ARSIZE => m_axi_IMAGE_IN3_ARSIZE,
        ARBURST => m_axi_IMAGE_IN3_ARBURST,
        ARLOCK => m_axi_IMAGE_IN3_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN3_ARCACHE,
        ARPROT => m_axi_IMAGE_IN3_ARPROT,
        ARQOS => m_axi_IMAGE_IN3_ARQOS,
        ARREGION => m_axi_IMAGE_IN3_ARREGION,
        ARUSER => m_axi_IMAGE_IN3_ARUSER,
        RVALID => m_axi_IMAGE_IN3_RVALID,
        RREADY => m_axi_IMAGE_IN3_RREADY,
        RDATA => m_axi_IMAGE_IN3_RDATA,
        RLAST => m_axi_IMAGE_IN3_RLAST,
        RID => m_axi_IMAGE_IN3_RID,
        RUSER => m_axi_IMAGE_IN3_RUSER,
        RRESP => m_axi_IMAGE_IN3_RRESP,
        BVALID => m_axi_IMAGE_IN3_BVALID,
        BREADY => m_axi_IMAGE_IN3_BREADY,
        BRESP => m_axi_IMAGE_IN3_BRESP,
        BID => m_axi_IMAGE_IN3_BID,
        BUSER => m_axi_IMAGE_IN3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN3_ARVALID,
        I_ARREADY => IMAGE_IN3_ARREADY,
        I_ARADDR => IMAGE_IN3_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN3_RVALID,
        I_RREADY => IMAGE_IN3_RREADY,
        I_RDATA => IMAGE_IN3_RDATA,
        I_RID => IMAGE_IN3_RID,
        I_RUSER => IMAGE_IN3_RUSER,
        I_RRESP => IMAGE_IN3_RRESP,
        I_RLAST => IMAGE_IN3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN3_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN3_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN3_BRESP,
        I_BID => IMAGE_IN3_BID,
        I_BUSER => IMAGE_IN3_BUSER);

    idwt_IMAGE_OUT_m_axi_U : component idwt_IMAGE_OUT_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_OUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_OUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_OUT_AWVALID,
        AWREADY => m_axi_IMAGE_OUT_AWREADY,
        AWADDR => m_axi_IMAGE_OUT_AWADDR,
        AWID => m_axi_IMAGE_OUT_AWID,
        AWLEN => m_axi_IMAGE_OUT_AWLEN,
        AWSIZE => m_axi_IMAGE_OUT_AWSIZE,
        AWBURST => m_axi_IMAGE_OUT_AWBURST,
        AWLOCK => m_axi_IMAGE_OUT_AWLOCK,
        AWCACHE => m_axi_IMAGE_OUT_AWCACHE,
        AWPROT => m_axi_IMAGE_OUT_AWPROT,
        AWQOS => m_axi_IMAGE_OUT_AWQOS,
        AWREGION => m_axi_IMAGE_OUT_AWREGION,
        AWUSER => m_axi_IMAGE_OUT_AWUSER,
        WVALID => m_axi_IMAGE_OUT_WVALID,
        WREADY => m_axi_IMAGE_OUT_WREADY,
        WDATA => m_axi_IMAGE_OUT_WDATA,
        WSTRB => m_axi_IMAGE_OUT_WSTRB,
        WLAST => m_axi_IMAGE_OUT_WLAST,
        WID => m_axi_IMAGE_OUT_WID,
        WUSER => m_axi_IMAGE_OUT_WUSER,
        ARVALID => m_axi_IMAGE_OUT_ARVALID,
        ARREADY => m_axi_IMAGE_OUT_ARREADY,
        ARADDR => m_axi_IMAGE_OUT_ARADDR,
        ARID => m_axi_IMAGE_OUT_ARID,
        ARLEN => m_axi_IMAGE_OUT_ARLEN,
        ARSIZE => m_axi_IMAGE_OUT_ARSIZE,
        ARBURST => m_axi_IMAGE_OUT_ARBURST,
        ARLOCK => m_axi_IMAGE_OUT_ARLOCK,
        ARCACHE => m_axi_IMAGE_OUT_ARCACHE,
        ARPROT => m_axi_IMAGE_OUT_ARPROT,
        ARQOS => m_axi_IMAGE_OUT_ARQOS,
        ARREGION => m_axi_IMAGE_OUT_ARREGION,
        ARUSER => m_axi_IMAGE_OUT_ARUSER,
        RVALID => m_axi_IMAGE_OUT_RVALID,
        RREADY => m_axi_IMAGE_OUT_RREADY,
        RDATA => m_axi_IMAGE_OUT_RDATA,
        RLAST => m_axi_IMAGE_OUT_RLAST,
        RID => m_axi_IMAGE_OUT_RID,
        RUSER => m_axi_IMAGE_OUT_RUSER,
        RRESP => m_axi_IMAGE_OUT_RRESP,
        BVALID => m_axi_IMAGE_OUT_BVALID,
        BREADY => m_axi_IMAGE_OUT_BREADY,
        BRESP => m_axi_IMAGE_OUT_BRESP,
        BID => m_axi_IMAGE_OUT_BID,
        BUSER => m_axi_IMAGE_OUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => IMAGE_OUT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_OUT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => IMAGE_OUT_RDATA,
        I_RID => IMAGE_OUT_RID,
        I_RUSER => IMAGE_OUT_RUSER,
        I_RRESP => IMAGE_OUT_RRESP,
        I_RLAST => IMAGE_OUT_RLAST,
        I_AWVALID => IMAGE_OUT_AWVALID,
        I_AWREADY => IMAGE_OUT_AWREADY,
        I_AWADDR => IMAGE_OUT_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => IMAGE_OUT_WVALID,
        I_WREADY => IMAGE_OUT_WREADY,
        I_WDATA => reg_548,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => IMAGE_OUT_BVALID,
        I_BREADY => IMAGE_OUT_BREADY,
        I_BRESP => IMAGE_OUT_BRESP,
        I_BID => IMAGE_OUT_BID,
        I_BUSER => IMAGE_OUT_BUSER);

    image0_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image0_address0,
        ce0 => image0_ce0,
        we0 => image0_we0,
        d0 => IMAGE_IN0_addr_read_reg_1175,
        q0 => image0_q0);

    image1_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image1_address0,
        ce0 => image1_ce0,
        we0 => image1_we0,
        d0 => IMAGE_IN1_addr_read_reg_1199,
        q0 => image1_q0);

    image2_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image2_address0,
        ce0 => image2_ce0,
        we0 => image2_we0,
        d0 => IMAGE_IN2_addr_read_reg_1223,
        q0 => image2_q0);

    image3_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image3_address0,
        ce0 => image3_ce0,
        we0 => image3_we0,
        d0 => IMAGE_IN3_addr_read_reg_1247,
        q0 => image3_q0);

    idwt_fptrunc_64nsbkb_U1 : component idwt_fptrunc_64nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_524_p0,
        ce => grp_fu_524_ce,
        dout => grp_fu_524_p1);

    idwt_fpext_32ns_6cud_U2 : component idwt_fpext_32ns_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_527_p0,
        dout => grp_fu_527_p1);

    idwt_dadddsub_64ndEe_U3 : component idwt_dadddsub_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_530_p0,
        din1 => grp_fu_530_p1,
        opcode => grp_fu_530_opcode,
        ce => grp_fu_530_ce,
        dout => grp_fu_530_p2);

    idwt_dadddsub_64ndEe_U4 : component idwt_dadddsub_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_534_p0,
        din1 => grp_fu_534_p1,
        opcode => grp_fu_534_opcode,
        ce => grp_fu_534_ce,
        dout => grp_fu_534_p2);

    idwt_dadddsub_64ndEe_U5 : component idwt_dadddsub_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_538_p0,
        din1 => grp_fu_538_p1,
        opcode => grp_fu_538_opcode,
        ce => grp_fu_538_ce,
        dout => grp_fu_538_p2);

    idwt_dmul_64ns_64eOg_U6 : component idwt_dmul_64ns_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_542_p0,
        din1 => grp_fu_542_p1,
        ce => grp_fu_542_ce,
        dout => grp_fu_542_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((tmp_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state22) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state22)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state26) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_fu_649_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state26)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter13 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone)))) then 
                    ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_fu_649_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp4_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_subdone))) then 
                    ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN0_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_const_boolean_0 = ap_block_state2_io)) then 
                        ap_reg_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN0_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN1_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_const_boolean_0 = ap_block_state2_io)) then 
                        ap_reg_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN1_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN2_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_const_boolean_0 = ap_block_state2_io)) then 
                        ap_reg_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN2_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN3_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_const_boolean_0 = ap_block_state2_io)) then 
                        ap_reg_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN3_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
                    ap_reg_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_0;
                elsif ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_01001)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_01001)) or ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_AWREADY) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001)) or ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_AWREADY) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_01001)))) then 
                    ap_reg_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
                    ap_reg_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_0;
                elsif ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_WREADY) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_01001)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_WREADY) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_01001)) or ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_WREADY) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = IMAGE_OUT_WREADY) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_01001)))) then 
                    ap_reg_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    cols_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_fu_649_p2 = ap_const_lv1_1))) then 
                cols_reg_512 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
                cols_reg_512 <= cols_1_reg_1325;
            end if; 
        end if;
    end process;

    indvar1_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar1_reg_456 <= ap_const_lv11_0;
            elsif (((exitcond1_fu_719_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar1_reg_456 <= indvar_next1_fu_725_p2;
            end if; 
        end if;
    end process;

    indvar2_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar2_reg_467 <= ap_const_lv11_0;
            elsif (((exitcond2_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar2_reg_467 <= indvar_next2_fu_771_p2;
            end if; 
        end if;
    end process;

    indvar3_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                indvar3_reg_478 <= ap_const_lv11_0;
            elsif (((exitcond3_fu_811_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar3_reg_478 <= indvar_next3_fu_817_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_fu_649_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_489 <= ap_const_lv17_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_489 <= indvar_flatten_next_reg_1256;
            end if; 
        end if;
    end process;

    indvar_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_673_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_reg_445 <= indvar_next_fu_679_p2;
            elsif (((tmp_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvar_reg_445 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    rows1_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_fu_649_p2 = ap_const_lv1_1))) then 
                rows1_reg_500 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
                rows1_reg_500 <= tmp_5_mid2_v_v_reg_1272;
            end if; 
        end if;
    end process;

    rows_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                rows_reg_434 <= rows_2_reg_1143;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                rows_reg_434 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_1156 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                IMAGE_IN0_addr_read_reg_1175 <= IMAGE_IN0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1180 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                IMAGE_IN1_addr_read_reg_1199 <= IMAGE_IN1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_1204 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                IMAGE_IN2_addr_read_reg_1223 <= IMAGE_IN2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                IMAGE_IN3_addr_read_reg_1247 <= IMAGE_IN3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond_reg_1156 <= exitcond_reg_1156;
                ap_reg_pp0_iter1_tmp_34_reg_1165 <= tmp_34_reg_1165;
                ap_reg_pp0_iter1_tmp_9_reg_1170 <= tmp_9_reg_1170;
                exitcond_reg_1156 <= exitcond_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_reg_pp1_iter1_exitcond1_reg_1180 <= exitcond1_reg_1180;
                ap_reg_pp1_iter1_tmp_37_reg_1189 <= tmp_37_reg_1189;
                ap_reg_pp1_iter1_tmp_38_reg_1194 <= tmp_38_reg_1194;
                exitcond1_reg_1180 <= exitcond1_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                ap_reg_pp2_iter1_exitcond2_reg_1204 <= exitcond2_reg_1204;
                ap_reg_pp2_iter1_tmp_41_reg_1213 <= tmp_41_reg_1213;
                ap_reg_pp2_iter1_tmp_42_reg_1218 <= tmp_42_reg_1218;
                exitcond2_reg_1204 <= exitcond2_fu_765_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                ap_reg_pp3_iter1_exitcond3_reg_1228 <= exitcond3_reg_1228;
                ap_reg_pp3_iter1_tmp_45_reg_1237 <= tmp_45_reg_1237;
                ap_reg_pp3_iter1_tmp_46_reg_1242 <= tmp_46_reg_1242;
                exitcond3_reg_1228 <= exitcond3_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                ap_reg_pp4_iter10_cols_mid2_reg_1266 <= ap_reg_pp4_iter9_cols_mid2_reg_1266;
                ap_reg_pp4_iter10_idx2_reg_1287 <= ap_reg_pp4_iter9_idx2_reg_1287;
                ap_reg_pp4_iter10_tmp_31_reg_1282 <= ap_reg_pp4_iter9_tmp_31_reg_1282;
                ap_reg_pp4_iter1_cols_mid2_reg_1266 <= cols_mid2_reg_1266;
                ap_reg_pp4_iter1_idx2_reg_1287 <= idx2_reg_1287;
                ap_reg_pp4_iter1_tmp_31_reg_1282 <= tmp_31_reg_1282;
                ap_reg_pp4_iter2_cols_mid2_reg_1266 <= ap_reg_pp4_iter1_cols_mid2_reg_1266;
                ap_reg_pp4_iter2_idx2_reg_1287 <= ap_reg_pp4_iter1_idx2_reg_1287;
                ap_reg_pp4_iter2_tmp_31_reg_1282 <= ap_reg_pp4_iter1_tmp_31_reg_1282;
                ap_reg_pp4_iter3_cols_mid2_reg_1266 <= ap_reg_pp4_iter2_cols_mid2_reg_1266;
                ap_reg_pp4_iter3_idx2_reg_1287 <= ap_reg_pp4_iter2_idx2_reg_1287;
                ap_reg_pp4_iter3_tmp_31_reg_1282 <= ap_reg_pp4_iter2_tmp_31_reg_1282;
                ap_reg_pp4_iter4_cols_mid2_reg_1266 <= ap_reg_pp4_iter3_cols_mid2_reg_1266;
                ap_reg_pp4_iter4_idx2_reg_1287 <= ap_reg_pp4_iter3_idx2_reg_1287;
                ap_reg_pp4_iter4_tmp_31_reg_1282 <= ap_reg_pp4_iter3_tmp_31_reg_1282;
                ap_reg_pp4_iter5_cols_mid2_reg_1266 <= ap_reg_pp4_iter4_cols_mid2_reg_1266;
                ap_reg_pp4_iter5_idx2_reg_1287 <= ap_reg_pp4_iter4_idx2_reg_1287;
                ap_reg_pp4_iter5_tmp_22_reg_1379 <= tmp_22_reg_1379;
                ap_reg_pp4_iter5_tmp_31_reg_1282 <= ap_reg_pp4_iter4_tmp_31_reg_1282;
                ap_reg_pp4_iter6_cols_mid2_reg_1266 <= ap_reg_pp4_iter5_cols_mid2_reg_1266;
                ap_reg_pp4_iter6_idx2_reg_1287 <= ap_reg_pp4_iter5_idx2_reg_1287;
                ap_reg_pp4_iter6_tmp_22_reg_1379 <= ap_reg_pp4_iter5_tmp_22_reg_1379;
                ap_reg_pp4_iter6_tmp_31_reg_1282 <= ap_reg_pp4_iter5_tmp_31_reg_1282;
                ap_reg_pp4_iter7_cols_mid2_reg_1266 <= ap_reg_pp4_iter6_cols_mid2_reg_1266;
                ap_reg_pp4_iter7_idx2_reg_1287 <= ap_reg_pp4_iter6_idx2_reg_1287;
                ap_reg_pp4_iter7_tmp_22_reg_1379 <= ap_reg_pp4_iter6_tmp_22_reg_1379;
                ap_reg_pp4_iter7_tmp_31_reg_1282 <= ap_reg_pp4_iter6_tmp_31_reg_1282;
                ap_reg_pp4_iter8_cols_mid2_reg_1266 <= ap_reg_pp4_iter7_cols_mid2_reg_1266;
                ap_reg_pp4_iter8_idx2_reg_1287 <= ap_reg_pp4_iter7_idx2_reg_1287;
                ap_reg_pp4_iter8_tmp_22_reg_1379 <= ap_reg_pp4_iter7_tmp_22_reg_1379;
                ap_reg_pp4_iter8_tmp_31_reg_1282 <= ap_reg_pp4_iter7_tmp_31_reg_1282;
                ap_reg_pp4_iter9_cols_mid2_reg_1266 <= ap_reg_pp4_iter8_cols_mid2_reg_1266;
                ap_reg_pp4_iter9_idx2_reg_1287 <= ap_reg_pp4_iter8_idx2_reg_1287;
                ap_reg_pp4_iter9_tmp_31_reg_1282 <= ap_reg_pp4_iter8_tmp_31_reg_1282;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                ap_reg_pp4_iter10_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter9_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter11_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter10_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter12_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter11_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter1_exitcond_flatten_reg_1252 <= exitcond_flatten_reg_1252;
                ap_reg_pp4_iter2_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter1_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter3_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter2_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter4_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter3_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter5_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter4_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter6_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter5_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter7_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter6_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter8_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter7_exitcond_flatten_reg_1252;
                ap_reg_pp4_iter9_exitcond_flatten_reg_1252 <= ap_reg_pp4_iter8_exitcond_flatten_reg_1252;
                exitcond_flatten_reg_1252 <= exitcond_flatten_fu_857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then
                ap_reg_pp4_iter2_pixelIn0_reg_1345 <= pixelIn0_reg_1345;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then
                ap_reg_pp4_iter4_tmp_19_reg_1372 <= tmp_19_reg_1372;
                ap_reg_pp4_iter5_tmp_19_reg_1372 <= ap_reg_pp4_iter4_tmp_19_reg_1372;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then
                cols_1_reg_1325 <= cols_1_fu_986_p2;
                pixelIn2_reg_1315 <= image2_q0;
                tmp_15_reg_1320 <= grp_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                cols_mid2_reg_1266 <= cols_mid2_fu_883_p3;
                idx2_reg_1287 <= idx2_fu_976_p2;
                tmp_13_reg_1277 <= tmp_13_fu_960_p2;
                tmp_31_reg_1282 <= tmp_5_mid2_v_v_fu_891_p3(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then
                idx1_reg_1438 <= idx1_fu_991_p3;
                imageOut10_sum_reg_1443 <= imageOut10_sum_fu_1001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                imageIn4_reg_1092 <= imageIn2(31 downto 2);
                imageIn5_reg_1097 <= imageIn1(31 downto 2);
                imageIn6_reg_1102 <= imageIn0(31 downto 2);
                imageIn_reg_1087 <= imageIn3(31 downto 2);
                tmp_2_reg_1082 <= imageOut(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then
                imageOut10_sum1_reg_1454 <= imageOut10_sum1_fu_1025_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                imageOut10_sum2_reg_1465 <= imageOut10_sum2_fu_1043_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                imageOut10_sum3_reg_1476 <= imageOut10_sum3_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                indvar_flatten_next_reg_1256 <= indvar_flatten_next_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then
                pixelIn0_reg_1345 <= image0_q0;
                pixelIn3_reg_1350 <= image3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                pixelIn1_reg_1310 <= image1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then
                reg_548 <= grp_fu_524_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond_flatten_fu_857_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                rows_1_reg_1261 <= rows_1_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                rows_2_reg_1143 <= rows_2_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter3_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then
                tmp_14_reg_1360 <= grp_fu_527_p1;
                tmp_16_reg_1366 <= grp_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter5_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then
                tmp_17_reg_1386 <= grp_fu_530_p2;
                tmp_26_reg_1392 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then
                tmp_18_reg_1340 <= grp_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter3_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then
                tmp_19_reg_1372 <= grp_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_649_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    tmp_1_reg_1148(15 downto 10) <= tmp_1_fu_665_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_reg_pp4_iter7_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then
                tmp_20_reg_1398 <= grp_fu_530_p2;
                tmp_24_reg_1403 <= grp_fu_534_p2;
                tmp_27_reg_1408 <= grp_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then
                tmp_21_reg_1355 <= grp_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter4_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter4 = ap_const_logic_1))) then
                tmp_22_reg_1379 <= grp_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1))) then
                tmp_23_reg_1418 <= grp_fu_534_p2;
                tmp_25_reg_1423 <= grp_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1))) then
                tmp_28_reg_1428 <= grp_fu_530_p2;
                tmp_30_reg_1433 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter8_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then
                tmp_29_reg_1413 <= grp_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    tmp_2_cast_reg_1131(29 downto 0) <= tmp_2_cast_fu_646_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_673_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_34_reg_1165 <= tmp_34_fu_689_p1;
                tmp_9_reg_1170 <= imageIn0_addr_fu_693_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_719_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_37_reg_1189 <= tmp_37_fu_735_p1;
                tmp_38_reg_1194 <= imageIn1_addr_fu_739_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2))) then
                    tmp_41_cast_reg_1293(17 downto 0) <= tmp_41_cast_fu_982_p1(17 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_41_reg_1213 <= tmp_41_fu_781_p1;
                tmp_42_reg_1218 <= imageIn2_addr_fu_785_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_811_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                tmp_45_reg_1237 <= tmp_45_fu_827_p1;
                tmp_46_reg_1242 <= imageIn3_addr_fu_831_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                tmp_5_mid2_v_v_reg_1272 <= tmp_5_mid2_v_v_fu_891_p3;
            end if;
        end if;
    end process;
    tmp_2_cast_reg_1131(30) <= '0';
    tmp_1_reg_1148(9 downto 0) <= "0000000000";
    tmp_41_cast_reg_1293(63 downto 18) <= "0000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter12, ap_enable_reg_pp4_iter13, ap_block_state2_io, tmp_fu_649_p2, ap_CS_fsm_state9, exitcond_fu_673_p2, ap_enable_reg_pp0_iter0, exitcond1_fu_719_p2, ap_enable_reg_pp1_iter0, exitcond2_fu_765_p2, ap_enable_reg_pp2_iter0, exitcond3_fu_811_p2, ap_enable_reg_pp3_iter0, exitcond_flatten_fu_857_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_block_pp4_stage3_subdone, ap_block_pp4_stage1_subdone, ap_block_pp4_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_fu_649_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_673_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_673_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond1_fu_719_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond1_fu_719_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond2_fu_765_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond2_fu_765_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond3_fu_811_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond3_fu_811_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_857_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp4_iter12 = ap_const_logic_0) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                elsif ((((ap_enable_reg_pp4_iter12 = ap_const_logic_0) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_857_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_pp4_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                end if;
            when ap_ST_fsm_pp4_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IMAGE_IN0_ARADDR <= tmp_6_fu_636_p1(32 - 1 downto 0);

    IMAGE_IN0_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN0_ARREADY)
    begin
        if (((ap_reg_ioackin_IMAGE_IN0_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN0_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1156, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            IMAGE_IN0_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN0_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN0_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IMAGE_IN0_blk_n_AR <= m_axi_IMAGE_IN0_ARREADY;
        else 
            IMAGE_IN0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN0_blk_n_R_assign_proc : process(m_axi_IMAGE_IN0_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1156)
    begin
        if (((exitcond_reg_1156 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IMAGE_IN0_blk_n_R <= m_axi_IMAGE_IN0_RVALID;
        else 
            IMAGE_IN0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    IMAGE_IN1_ARADDR <= tmp_5_fu_626_p1(32 - 1 downto 0);

    IMAGE_IN1_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN1_ARREADY)
    begin
        if (((ap_reg_ioackin_IMAGE_IN1_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN1_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN1_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond1_reg_1180, ap_block_pp1_stage0_11001)
    begin
        if (((exitcond1_reg_1180 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            IMAGE_IN1_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN1_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IMAGE_IN1_blk_n_AR <= m_axi_IMAGE_IN1_ARREADY;
        else 
            IMAGE_IN1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN1_blk_n_R_assign_proc : process(m_axi_IMAGE_IN1_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond1_reg_1180)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond1_reg_1180 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            IMAGE_IN1_blk_n_R <= m_axi_IMAGE_IN1_RVALID;
        else 
            IMAGE_IN1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    IMAGE_IN2_ARADDR <= tmp_4_fu_616_p1(32 - 1 downto 0);

    IMAGE_IN2_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN2_ARREADY)
    begin
        if (((ap_reg_ioackin_IMAGE_IN2_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN2_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN2_RREADY_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond2_reg_1204, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond2_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            IMAGE_IN2_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN2_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN2_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IMAGE_IN2_blk_n_AR <= m_axi_IMAGE_IN2_ARREADY;
        else 
            IMAGE_IN2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN2_blk_n_R_assign_proc : process(m_axi_IMAGE_IN2_RVALID, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond2_reg_1204)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond2_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            IMAGE_IN2_blk_n_R <= m_axi_IMAGE_IN2_RVALID;
        else 
            IMAGE_IN2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    IMAGE_IN3_ARADDR <= tmp_3_fu_606_p1(32 - 1 downto 0);

    IMAGE_IN3_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN3_ARREADY)
    begin
        if (((ap_reg_ioackin_IMAGE_IN3_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN3_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN3_RREADY_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond3_reg_1228, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond3_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            IMAGE_IN3_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN3_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN3_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN3_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IMAGE_IN3_blk_n_AR <= m_axi_IMAGE_IN3_ARREADY;
        else 
            IMAGE_IN3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN3_blk_n_R_assign_proc : process(m_axi_IMAGE_IN3_RVALID, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond3_reg_1228)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond3_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            IMAGE_IN3_blk_n_R <= m_axi_IMAGE_IN3_RVALID;
        else 
            IMAGE_IN3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT_AWADDR_assign_proc : process(imageOut10_sum_cast_fu_1006_p1, imageOut10_sum1_cast_fu_1030_p1, imageOut10_sum2_cast_fu_1048_p1, imageOut10_sum3_cast_fu_1072_p1, ap_reg_ioackin_IMAGE_OUT_AWREADY, ap_condition_1626, ap_condition_1639, ap_condition_1656, ap_condition_1673)
    begin
        if ((ap_reg_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_1673)) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum3_cast_fu_1072_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1656)) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum2_cast_fu_1048_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1639)) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum1_cast_fu_1030_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1626)) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum_cast_fu_1006_p1(32 - 1 downto 0);
            else 
                IMAGE_OUT_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            IMAGE_OUT_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMAGE_OUT_AWVALID_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter10, ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter11, ap_CS_fsm_pp4_stage1, ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage2, ap_reg_ioackin_IMAGE_OUT_AWREADY, ap_block_pp4_stage3_01001, ap_block_pp4_stage0_01001, ap_block_pp4_stage1_01001, ap_block_pp4_stage2_01001)
    begin
        if ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_01001)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_01001)) or ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001)) or ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_01001)))) then 
            IMAGE_OUT_AWVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT_BREADY_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage2, ap_enable_reg_pp4_iter13, ap_block_pp4_stage3_11001, ap_block_pp4_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp4_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            IMAGE_OUT_BREADY <= ap_const_logic_1;
        else 
            IMAGE_OUT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT_WVALID_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter11, ap_CS_fsm_pp4_stage1, ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage3_01001, ap_reg_ioackin_IMAGE_OUT_WREADY, ap_block_pp4_stage0_01001, ap_block_pp4_stage1_01001, ap_block_pp4_stage2_01001)
    begin
        if ((((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_01001)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_01001)) or ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_reg_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_01001)))) then 
            IMAGE_OUT_WVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT_blk_n_AW_assign_proc : process(m_axi_IMAGE_OUT_AWREADY, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter10, ap_block_pp4_stage3, ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter11, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            IMAGE_OUT_blk_n_AW <= m_axi_IMAGE_OUT_AWREADY;
        else 
            IMAGE_OUT_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT_blk_n_B_assign_proc : process(m_axi_IMAGE_OUT_BVALID, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter12, ap_block_pp4_stage1, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_enable_reg_pp4_iter13)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            IMAGE_OUT_blk_n_B <= m_axi_IMAGE_OUT_BVALID;
        else 
            IMAGE_OUT_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT_blk_n_W_assign_proc : process(m_axi_IMAGE_OUT_WREADY, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter11, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            IMAGE_OUT_blk_n_W <= m_axi_IMAGE_OUT_WREADY;
        else 
            IMAGE_OUT_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(18);
    ap_CS_fsm_pp4_stage2 <= ap_CS_fsm(19);
    ap_CS_fsm_pp4_stage3 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(14);
    ap_CS_fsm_state25 <= ap_CS_fsm(16);
    ap_CS_fsm_state79 <= ap_CS_fsm(21);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1156, IMAGE_IN0_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_1156 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN0_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1156, IMAGE_IN0_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_1156 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN0_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_1180, IMAGE_IN1_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((exitcond1_reg_1180 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN1_RVALID) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_1180, IMAGE_IN1_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((exitcond1_reg_1180 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN1_RVALID) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond2_reg_1204, IMAGE_IN2_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((exitcond2_reg_1204 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN2_RVALID) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond2_reg_1204, IMAGE_IN2_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((exitcond2_reg_1204 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN2_RVALID) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond3_reg_1228, IMAGE_IN3_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((exitcond3_reg_1228 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN3_RVALID) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond3_reg_1228, IMAGE_IN3_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((exitcond3_reg_1228 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN3_RVALID) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_00001_assign_proc : process(ap_reg_pp4_iter12_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter13, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage0_00001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_01001_assign_proc : process(ap_reg_pp4_iter12_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter13, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage0_01001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter11, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter13, IMAGE_OUT_BVALID, ap_block_state70_io)
    begin
                ap_block_pp4_stage0_11001 <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter11, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter13, IMAGE_OUT_BVALID, ap_block_state70_io)
    begin
                ap_block_pp4_stage0_subdone <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter13 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state70_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)));
    end process;

        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage1_00001_assign_proc : process(ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage1_00001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage1_01001_assign_proc : process(ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage1_01001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage1_11001_assign_proc : process(ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID, ap_block_state71_io)
    begin
                ap_block_pp4_stage1_11001 <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state71_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage1_subdone_assign_proc : process(ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID, ap_block_state71_io)
    begin
                ap_block_pp4_stage1_subdone <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state71_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)));
    end process;

        ap_block_pp4_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage2_00001_assign_proc : process(ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage2_00001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage2_01001_assign_proc : process(ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage2_01001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage2_11001_assign_proc : process(ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID, ap_block_state72_io)
    begin
                ap_block_pp4_stage2_11001 <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state72_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage2_subdone_assign_proc : process(ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID, ap_block_state72_io)
    begin
                ap_block_pp4_stage2_subdone <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state72_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)));
    end process;

        ap_block_pp4_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage3_00001_assign_proc : process(ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage3_00001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage3_01001_assign_proc : process(ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_pp4_stage3_01001 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage3_11001_assign_proc : process(ap_enable_reg_pp4_iter10, ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID, ap_block_state69_io, ap_block_state73_io)
    begin
                ap_block_pp4_stage3_11001 <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state73_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state69_io) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage3_subdone_assign_proc : process(ap_enable_reg_pp4_iter10, ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID, ap_block_state69_io, ap_block_state73_io)
    begin
                ap_block_pp4_stage3_subdone <= (((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID) and (ap_enable_reg_pp4_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state73_io) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state69_io) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(exitcond_reg_1156, IMAGE_IN0_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((exitcond_reg_1156 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN0_RVALID));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp1_stage0_iter1_assign_proc : process(exitcond1_reg_1180, IMAGE_IN1_RVALID)
    begin
                ap_block_state15_pp1_stage0_iter1 <= ((exitcond1_reg_1180 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN1_RVALID));
    end process;

        ap_block_state16_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp2_stage0_iter1_assign_proc : process(exitcond2_reg_1204, IMAGE_IN2_RVALID)
    begin
                ap_block_state19_pp2_stage0_iter1 <= ((exitcond2_reg_1204 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN2_RVALID));
    end process;

        ap_block_state20_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp3_stage0_iter1_assign_proc : process(exitcond3_reg_1228, IMAGE_IN3_RVALID)
    begin
                ap_block_state23_pp3_stage0_iter1 <= ((exitcond3_reg_1228 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_IN3_RVALID));
    end process;

        ap_block_state24_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp4_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp4_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp4_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(ap_sig_ioackin_IMAGE_IN0_ARREADY, ap_sig_ioackin_IMAGE_IN1_ARREADY, ap_sig_ioackin_IMAGE_IN2_ARREADY, ap_sig_ioackin_IMAGE_IN3_ARREADY)
    begin
                ap_block_state2_io <= ((ap_sig_ioackin_IMAGE_IN3_ARREADY = ap_const_logic_0) or (ap_sig_ioackin_IMAGE_IN2_ARREADY = ap_const_logic_0) or (ap_sig_ioackin_IMAGE_IN1_ARREADY = ap_const_logic_0) or (ap_sig_ioackin_IMAGE_IN0_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state30_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp4_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp4_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp4_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp4_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp4_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp4_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp4_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp4_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp4_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp4_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp4_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp4_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp4_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp4_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp4_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp4_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp4_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp4_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp4_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp4_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp4_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp4_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp4_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp4_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp4_stage3_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp4_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp4_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp4_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state69_io_assign_proc : process(ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_sig_ioackin_IMAGE_OUT_AWREADY)
    begin
                ap_block_state69_io <= ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state69_pp4_stage3_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state70_io_assign_proc : process(ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY)
    begin
                ap_block_state70_io <= (((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0)) or ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0)));
    end process;

        ap_block_state70_pp4_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state71_io_assign_proc : process(ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY)
    begin
                ap_block_state71_io <= (((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0)));
    end process;

        ap_block_state71_pp4_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state72_io_assign_proc : process(ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY)
    begin
                ap_block_state72_io <= (((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0)) or ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0)));
    end process;

        ap_block_state72_pp4_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state73_io_assign_proc : process(ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_sig_ioackin_IMAGE_OUT_WREADY)
    begin
                ap_block_state73_io <= ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_sig_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0));
    end process;

        ap_block_state73_pp4_stage3_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp4_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_pp4_stage1_iter12_assign_proc : process(ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_state75_pp4_stage1_iter12 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID));
    end process;


    ap_block_state76_pp4_stage2_iter12_assign_proc : process(ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_state76_pp4_stage2_iter12 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID));
    end process;


    ap_block_state77_pp4_stage3_iter12_assign_proc : process(ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_state77_pp4_stage3_iter12 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID));
    end process;


    ap_block_state78_pp4_stage0_iter13_assign_proc : process(ap_reg_pp4_iter12_exitcond_flatten_reg_1252, IMAGE_OUT_BVALID)
    begin
                ap_block_state78_pp4_stage0_iter13 <= ((ap_reg_pp4_iter12_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_0 = IMAGE_OUT_BVALID));
    end process;


    ap_condition_1626_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter10, ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_block_pp4_stage3_01001)
    begin
                ap_condition_1626 <= ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_const_boolean_0 = ap_block_pp4_stage3_01001));
    end process;


    ap_condition_1639_assign_proc : process(ap_reg_pp4_iter10_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter11, ap_block_pp4_stage0_01001)
    begin
                ap_condition_1639 <= ((ap_reg_pp4_iter10_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001));
    end process;


    ap_condition_1656_assign_proc : process(ap_enable_reg_pp4_iter11, ap_CS_fsm_pp4_stage1, ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_block_pp4_stage1_01001)
    begin
                ap_condition_1656 <= ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_01001));
    end process;


    ap_condition_1673_assign_proc : process(ap_enable_reg_pp4_iter11, ap_reg_pp4_iter11_exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_01001)
    begin
                ap_condition_1673 <= ((ap_reg_pp4_iter11_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_01001));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond_fu_673_p2)
    begin
        if ((exitcond_fu_673_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(exitcond1_fu_719_p2)
    begin
        if ((exitcond1_fu_719_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state18_assign_proc : process(exitcond2_fu_765_p2)
    begin
        if ((exitcond2_fu_765_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state22_assign_proc : process(exitcond3_fu_811_p2)
    begin
        if ((exitcond3_fu_811_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state26_assign_proc : process(exitcond_flatten_fu_857_p2)
    begin
        if ((exitcond_flatten_fu_857_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter10, ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_enable_reg_pp4_iter13, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter7, ap_enable_reg_pp4_iter9)
    begin
        if (((ap_enable_reg_pp4_iter13 = ap_const_logic_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_0) and (ap_enable_reg_pp4_iter9 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter8 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cols_phi_fu_516_p4_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, cols_reg_512, ap_reg_pp4_iter1_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter1, cols_1_reg_1325)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_reg_pp4_iter1_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_cols_phi_fu_516_p4 <= cols_1_reg_1325;
        else 
            ap_phi_mux_cols_phi_fu_516_p4 <= cols_reg_512;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_493_p4_assign_proc : process(exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, indvar_flatten_reg_489, indvar_flatten_next_reg_1256, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_493_p4 <= indvar_flatten_next_reg_1256;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_493_p4 <= indvar_flatten_reg_489;
        end if; 
    end process;


    ap_phi_mux_rows1_phi_fu_504_p4_assign_proc : process(exitcond_flatten_reg_1252, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, rows1_reg_500, tmp_5_mid2_v_v_reg_1272, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_rows1_phi_fu_504_p4 <= tmp_5_mid2_v_v_reg_1272;
        else 
            ap_phi_mux_rows1_phi_fu_504_p4 <= rows1_reg_500;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_IMAGE_IN0_ARREADY_assign_proc : process(IMAGE_IN0_ARREADY, ap_reg_ioackin_IMAGE_IN0_ARREADY)
    begin
        if ((ap_reg_ioackin_IMAGE_IN0_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMAGE_IN0_ARREADY <= IMAGE_IN0_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_IN1_ARREADY_assign_proc : process(IMAGE_IN1_ARREADY, ap_reg_ioackin_IMAGE_IN1_ARREADY)
    begin
        if ((ap_reg_ioackin_IMAGE_IN1_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMAGE_IN1_ARREADY <= IMAGE_IN1_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_IN2_ARREADY_assign_proc : process(IMAGE_IN2_ARREADY, ap_reg_ioackin_IMAGE_IN2_ARREADY)
    begin
        if ((ap_reg_ioackin_IMAGE_IN2_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMAGE_IN2_ARREADY <= IMAGE_IN2_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_IN3_ARREADY_assign_proc : process(IMAGE_IN3_ARREADY, ap_reg_ioackin_IMAGE_IN3_ARREADY)
    begin
        if ((ap_reg_ioackin_IMAGE_IN3_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMAGE_IN3_ARREADY <= IMAGE_IN3_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT_AWREADY_assign_proc : process(IMAGE_OUT_AWREADY, ap_reg_ioackin_IMAGE_OUT_AWREADY)
    begin
        if ((ap_reg_ioackin_IMAGE_OUT_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMAGE_OUT_AWREADY <= IMAGE_OUT_AWREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT_WREADY_assign_proc : process(IMAGE_OUT_WREADY, ap_reg_ioackin_IMAGE_OUT_WREADY)
    begin
        if ((ap_reg_ioackin_IMAGE_OUT_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_IMAGE_OUT_WREADY <= IMAGE_OUT_WREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    cols_1_fu_986_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(cols_mid2_reg_1266));
    cols_cast1_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_mid2_fu_883_p3),19));
    cols_mid2_fu_883_p3 <= 
        ap_const_lv12_0 when (tmp_8_fu_875_p3(0) = '1') else 
        ap_phi_mux_cols_phi_fu_516_p4;
    exitcond1_fu_719_p2 <= "1" when (indvar1_reg_456 = ap_const_lv11_400) else "0";
    exitcond2_fu_765_p2 <= "1" when (indvar2_reg_467 = ap_const_lv11_400) else "0";
    exitcond3_fu_811_p2 <= "1" when (indvar3_reg_478 = ap_const_lv11_400) else "0";
    exitcond_flatten_fu_857_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_493_p4 = ap_const_lv17_10000) else "0";
    exitcond_fu_673_p2 <= "1" when (indvar_reg_445 = ap_const_lv11_400) else "0";

    grp_fu_524_ce_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage3_11001, ap_block_pp4_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp4_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            grp_fu_524_ce <= ap_const_logic_1;
        else 
            grp_fu_524_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_524_p0_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_enable_reg_pp4_iter10, ap_block_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter11, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, tmp_23_reg_1418, tmp_25_reg_1423, tmp_28_reg_1428, tmp_30_reg_1433)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1))) then 
            grp_fu_524_p0 <= tmp_30_reg_1433;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            grp_fu_524_p0 <= tmp_28_reg_1428;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3))) then 
            grp_fu_524_p0 <= tmp_25_reg_1423;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter10 = ap_const_logic_1))) then 
            grp_fu_524_p0 <= tmp_23_reg_1418;
        else 
            grp_fu_524_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_527_p0_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, pixelIn1_reg_1310, pixelIn2_reg_1315, ap_enable_reg_pp4_iter1, ap_reg_pp4_iter2_pixelIn0_reg_1345, pixelIn3_reg_1350, ap_enable_reg_pp4_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
            grp_fu_527_p0 <= ap_reg_pp4_iter2_pixelIn0_reg_1345;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            grp_fu_527_p0 <= pixelIn3_reg_1350;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            grp_fu_527_p0 <= pixelIn2_reg_1315;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            grp_fu_527_p0 <= pixelIn1_reg_1310;
        else 
            grp_fu_527_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_530_ce_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage3_11001, ap_block_pp4_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp4_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            grp_fu_530_ce <= ap_const_logic_1;
        else 
            grp_fu_530_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_530_opcode_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_reg_pp4_iter3_exitcond_flatten_reg_1252, ap_reg_pp4_iter5_exitcond_flatten_reg_1252, ap_reg_pp4_iter6_exitcond_flatten_reg_1252, ap_reg_pp4_iter8_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter6, ap_block_pp4_stage3_00001, ap_block_pp4_stage0_00001, ap_block_pp4_stage1_00001, ap_block_pp4_stage2_00001)
    begin
        if ((((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_00001)) or ((ap_reg_pp4_iter6_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_00001)))) then 
            grp_fu_530_opcode <= ap_const_lv2_1;
        elsif ((((ap_reg_pp4_iter5_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_00001)) or ((ap_reg_pp4_iter3_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3_00001)))) then 
            grp_fu_530_opcode <= ap_const_lv2_0;
        else 
            grp_fu_530_opcode <= "XX";
        end if; 
    end process;


    grp_fu_530_p0_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, tmp_14_reg_1360, ap_enable_reg_pp4_iter3, tmp_17_reg_1386, tmp_26_reg_1392, ap_enable_reg_pp4_iter8, tmp_27_reg_1408, ap_enable_reg_pp4_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_530_p0 <= tmp_27_reg_1408;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1))) then 
            grp_fu_530_p0 <= tmp_26_reg_1392;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1))) then 
            grp_fu_530_p0 <= tmp_17_reg_1386;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
            grp_fu_530_p0 <= tmp_14_reg_1360;
        else 
            grp_fu_530_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_530_p1_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_enable_reg_pp4_iter3, tmp_16_reg_1366, ap_reg_pp4_iter5_tmp_19_reg_1372, ap_reg_pp4_iter8_tmp_22_reg_1379, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_530_p1 <= ap_reg_pp4_iter8_tmp_22_reg_1379;
        elsif ((((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1)))) then 
            grp_fu_530_p1 <= ap_reg_pp4_iter5_tmp_19_reg_1372;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
            grp_fu_530_p1 <= tmp_16_reg_1366;
        else 
            grp_fu_530_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_534_ce_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage3_11001, ap_block_pp4_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp4_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            grp_fu_534_ce <= ap_const_logic_1;
        else 
            grp_fu_534_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_534_opcode_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_reg_pp4_iter3_exitcond_flatten_reg_1252, ap_reg_pp4_iter5_exitcond_flatten_reg_1252, ap_reg_pp4_iter8_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter6, ap_block_pp4_stage3_00001, ap_block_pp4_stage0_00001, ap_block_pp4_stage1_00001, ap_block_pp4_stage2_00001)
    begin
        if ((((ap_reg_pp4_iter5_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_00001)) or ((ap_reg_pp4_iter3_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage3_00001)))) then 
            grp_fu_534_opcode <= ap_const_lv2_1;
        elsif ((((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage2_00001)) or ((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_00001)))) then 
            grp_fu_534_opcode <= ap_const_lv2_0;
        else 
            grp_fu_534_opcode <= "XX";
        end if; 
    end process;


    grp_fu_534_p0_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, tmp_14_reg_1360, ap_enable_reg_pp4_iter3, tmp_17_reg_1386, tmp_20_reg_1398, ap_enable_reg_pp4_iter8, tmp_29_reg_1413, ap_enable_reg_pp4_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_534_p0 <= tmp_29_reg_1413;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_534_p0 <= tmp_20_reg_1398;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1))) then 
            grp_fu_534_p0 <= tmp_17_reg_1386;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
            grp_fu_534_p0 <= tmp_14_reg_1360;
        else 
            grp_fu_534_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_534_p1_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_enable_reg_pp4_iter3, tmp_16_reg_1366, ap_reg_pp4_iter5_tmp_19_reg_1372, ap_reg_pp4_iter7_tmp_22_reg_1379, ap_reg_pp4_iter8_tmp_22_reg_1379, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_534_p1 <= ap_reg_pp4_iter8_tmp_22_reg_1379;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_534_p1 <= ap_reg_pp4_iter7_tmp_22_reg_1379;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1))) then 
            grp_fu_534_p1 <= ap_reg_pp4_iter5_tmp_19_reg_1372;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
            grp_fu_534_p1 <= tmp_16_reg_1366;
        else 
            grp_fu_534_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_538_ce_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage3_11001, ap_block_pp4_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp4_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            grp_fu_538_ce <= ap_const_logic_1;
        else 
            grp_fu_538_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_538_opcode_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_reg_pp4_iter5_exitcond_flatten_reg_1252, ap_reg_pp4_iter8_exitcond_flatten_reg_1252, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter6, ap_block_pp4_stage0_00001, ap_block_pp4_stage1_00001)
    begin
        if (((ap_reg_pp4_iter8_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage1_00001))) then 
            grp_fu_538_opcode <= ap_const_lv2_1;
        elsif (((ap_reg_pp4_iter5_exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_00001))) then 
            grp_fu_538_opcode <= ap_const_lv2_0;
        else 
            grp_fu_538_opcode <= "XX";
        end if; 
    end process;


    grp_fu_538_p0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, tmp_26_reg_1392, ap_enable_reg_pp4_iter8, tmp_24_reg_1403, ap_enable_reg_pp4_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_538_p0 <= tmp_24_reg_1403;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1))) then 
            grp_fu_538_p0 <= tmp_26_reg_1392;
        else 
            grp_fu_538_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_538_p1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_reg_pp4_iter5_tmp_19_reg_1372, ap_reg_pp4_iter7_tmp_22_reg_1379, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter8 = ap_const_logic_1))) then 
            grp_fu_538_p1 <= ap_reg_pp4_iter7_tmp_22_reg_1379;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_1))) then 
            grp_fu_538_p1 <= ap_reg_pp4_iter5_tmp_19_reg_1372;
        else 
            grp_fu_538_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_542_ce_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage3_11001, ap_block_pp4_stage0_11001, ap_block_pp4_stage1_11001, ap_block_pp4_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)))) then 
            grp_fu_542_ce <= ap_const_logic_1;
        else 
            grp_fu_542_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_542_p0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_enable_reg_pp4_iter1, tmp_15_reg_1320, tmp_18_reg_1340, tmp_21_reg_1355, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            grp_fu_542_p0 <= tmp_21_reg_1355;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            grp_fu_542_p0 <= tmp_18_reg_1340;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            grp_fu_542_p0 <= tmp_15_reg_1320;
        else 
            grp_fu_542_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_542_p1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            grp_fu_542_p1 <= ap_const_lv64_3FD0000000000000;
        elsif ((((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)))) then 
            grp_fu_542_p1 <= ap_const_lv64_3FE0000000000000;
        else 
            grp_fu_542_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    idx1_fu_991_p3 <= (ap_reg_pp4_iter10_tmp_31_reg_1282 & ap_reg_pp4_iter10_cols_mid2_reg_1266);
    idx2_fu_976_p2 <= std_logic_vector(unsigned(cols_cast1_fu_942_p1) + unsigned(tmp_7_cast_mid2_fu_938_p1));

    image0_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, tmp_41_cast_reg_1293, ap_enable_reg_pp4_iter1, ap_enable_reg_pp0_iter2, tmp_36_fu_714_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            image0_address0 <= tmp_41_cast_reg_1293(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            image0_address0 <= tmp_36_fu_714_p1(16 - 1 downto 0);
        else 
            image0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image0_ce0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            image0_ce0 <= ap_const_logic_1;
        else 
            image0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image0_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_exitcond_reg_1156, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_reg_pp0_iter1_exitcond_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image0_we0 <= ap_const_logic_1;
        else 
            image0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image1_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2, ap_enable_reg_pp4_iter0, tmp_41_cast_fu_982_p1, ap_enable_reg_pp1_iter2, tmp_40_fu_760_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
            image1_address0 <= tmp_41_cast_fu_982_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            image1_address0 <= tmp_40_fu_760_p1(16 - 1 downto 0);
        else 
            image1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image1_ce0_assign_proc : process(ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            image1_ce0 <= ap_const_logic_1;
        else 
            image1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image1_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_reg_pp1_iter1_exitcond1_reg_1180, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_reg_pp1_iter1_exitcond1_reg_1180 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            image1_we0 <= ap_const_logic_1;
        else 
            image1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image2_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3, ap_enable_reg_pp4_iter0, tmp_41_cast_reg_1293, ap_enable_reg_pp2_iter2, tmp_44_fu_806_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
            image2_address0 <= tmp_41_cast_reg_1293(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            image2_address0 <= tmp_44_fu_806_p1(16 - 1 downto 0);
        else 
            image2_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image2_ce0_assign_proc : process(ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            image2_ce0 <= ap_const_logic_1;
        else 
            image2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image2_we0_assign_proc : process(ap_block_pp2_stage0_11001, ap_reg_pp2_iter1_exitcond2_reg_1204, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_reg_pp2_iter1_exitcond2_reg_1204 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            image2_we0 <= ap_const_logic_1;
        else 
            image2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image3_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, tmp_41_cast_reg_1293, ap_enable_reg_pp4_iter1, ap_enable_reg_pp3_iter2, tmp_48_fu_852_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
            image3_address0 <= tmp_41_cast_reg_1293(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            image3_address0 <= tmp_48_fu_852_p1(16 - 1 downto 0);
        else 
            image3_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image3_ce0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp4_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            image3_ce0 <= ap_const_logic_1;
        else 
            image3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image3_we0_assign_proc : process(ap_block_pp3_stage0_11001, ap_reg_pp3_iter1_exitcond3_reg_1228, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_reg_pp3_iter1_exitcond3_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            image3_we0 <= ap_const_logic_1;
        else 
            image3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    imageIn0_addr_fu_693_p2 <= std_logic_vector(unsigned(indvar_cast9_fu_685_p1) + unsigned(tmp_1_reg_1148));
    imageIn1_addr_fu_739_p2 <= std_logic_vector(unsigned(indvar1_cast7_fu_731_p1) + unsigned(tmp_1_reg_1148));
    imageIn2_addr_fu_785_p2 <= std_logic_vector(unsigned(indvar2_cast5_fu_777_p1) + unsigned(tmp_1_reg_1148));
    imageIn3_addr_fu_831_p2 <= std_logic_vector(unsigned(indvar3_cast3_fu_823_p1) + unsigned(tmp_1_reg_1148));
    imageOut10_sum1_cast_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageOut10_sum1_reg_1454),64));
    imageOut10_sum1_fu_1025_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1131) + unsigned(tmp_34_cast_fu_1021_p1));
    imageOut10_sum2_cast_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageOut10_sum2_reg_1465),64));
    imageOut10_sum2_fu_1043_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1131) + unsigned(tmp_35_cast_fu_1040_p1));
    imageOut10_sum3_cast_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageOut10_sum3_reg_1476),64));
    imageOut10_sum3_fu_1067_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1131) + unsigned(tmp_37_cast_fu_1063_p1));
    imageOut10_sum_cast_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageOut10_sum_reg_1443),64));
    imageOut10_sum_fu_1001_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1131) + unsigned(tmp_32_cast_fu_997_p1));
    indvar1_cast7_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar1_reg_456),16));
    indvar2_cast5_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar2_reg_467),16));
    indvar3_cast3_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar3_reg_478),16));
    indvar_cast9_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_445),16));
    indvar_flatten_next_fu_863_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_493_p4) + unsigned(ap_const_lv17_1));
    indvar_next1_fu_725_p2 <= std_logic_vector(unsigned(indvar1_reg_456) + unsigned(ap_const_lv11_1));
    indvar_next2_fu_771_p2 <= std_logic_vector(unsigned(indvar2_reg_467) + unsigned(ap_const_lv11_1));
    indvar_next3_fu_817_p2 <= std_logic_vector(unsigned(indvar3_reg_478) + unsigned(ap_const_lv11_1));
    indvar_next_fu_679_p2 <= std_logic_vector(unsigned(indvar_reg_445) + unsigned(ap_const_lv11_1));
    rows_1_fu_869_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(ap_phi_mux_rows1_phi_fu_504_p4));
    rows_2_fu_655_p2 <= std_logic_vector(unsigned(rows_reg_434) + unsigned(ap_const_lv7_1));
    tmp_10_fu_920_p1 <= tmp_5_mid2_v_v_fu_891_p3(7 - 1 downto 0);
    tmp_11_cast_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_908_p3),18));
    tmp_12_fu_946_p4 <= cols_mid2_fu_883_p3(11 downto 1);
    tmp_13_fu_960_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_916_p1) + unsigned(tmp_14_cast_fu_956_p1));
    tmp_14_cast_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_946_p4),18));
    tmp_1_fu_665_p3 <= (tmp_7_fu_661_p1 & ap_const_lv10_0);
    tmp_2_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1082),31));
    tmp_32_cast_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx1_fu_991_p3),31));
    tmp_32_fu_1016_p2 <= (idx1_reg_1438 or ap_const_lv18_1);
    tmp_33_fu_1058_p2 <= (ap_reg_pp4_iter10_idx2_reg_1287 or ap_const_lv19_1);
    tmp_34_cast_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_1016_p2),31));
    tmp_34_fu_689_p1 <= indvar_reg_445(10 - 1 downto 0);
    tmp_35_cast_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp4_iter10_idx2_reg_1287),31));
    tmp_35_fu_708_p3 <= (ap_reg_pp0_iter1_tmp_9_reg_1170 & ap_reg_pp0_iter1_tmp_34_reg_1165);
    tmp_36_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_708_p3),64));
    tmp_37_cast_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1058_p2),31));
    tmp_37_fu_735_p1 <= indvar1_reg_456(10 - 1 downto 0);
    tmp_39_fu_754_p3 <= (ap_reg_pp1_iter1_tmp_38_reg_1194 & ap_reg_pp1_iter1_tmp_37_reg_1189);
    tmp_3_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageIn_reg_1087),64));
    tmp_40_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_754_p3),64));
    tmp_41_cast_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1277),64));
    tmp_41_fu_781_p1 <= indvar2_reg_467(10 - 1 downto 0);
    tmp_43_fu_800_p3 <= (ap_reg_pp2_iter1_tmp_42_reg_1218 & ap_reg_pp2_iter1_tmp_41_reg_1213);
    tmp_44_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_800_p3),64));
    tmp_45_fu_827_p1 <= indvar3_reg_478(10 - 1 downto 0);
    tmp_47_fu_846_p3 <= (ap_reg_pp3_iter1_tmp_46_reg_1242 & ap_reg_pp3_iter1_tmp_45_reg_1237);
    tmp_48_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_846_p3),64));
    tmp_4_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageIn4_reg_1092),64));
    tmp_5_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageIn5_reg_1097),64));
    tmp_5_mid2_v_fu_898_p4 <= tmp_5_mid2_v_v_fu_891_p3(7 downto 1);
    tmp_5_mid2_v_v_fu_891_p3 <= 
        rows_1_reg_1261 when (tmp_8_fu_875_p3(0) = '1') else 
        rows1_reg_500;
    tmp_6_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageIn6_reg_1102),64));
    tmp_7_cast_mid2_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_mid2_v_fu_932_p2),19));
    tmp_7_cast_mid2_v_fu_932_p2 <= (tmp_7_cast_mid2_v_v_fu_924_p3 or ap_const_lv18_800);
    tmp_7_cast_mid2_v_v_fu_924_p3 <= (tmp_10_fu_920_p1 & ap_const_lv11_0);
    tmp_7_fu_661_p1 <= rows_reg_434(6 - 1 downto 0);
    tmp_8_fu_875_p3 <= ap_phi_mux_cols_phi_fu_516_p4(11 downto 11);
    tmp_fu_649_p2 <= "1" when (rows_reg_434 = ap_const_lv7_40) else "0";
    tmp_s_fu_908_p3 <= (tmp_5_mid2_v_fu_898_p4 & ap_const_lv10_0);
end behav;
