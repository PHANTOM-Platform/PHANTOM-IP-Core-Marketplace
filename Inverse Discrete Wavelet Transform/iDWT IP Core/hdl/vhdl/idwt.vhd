-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity idwt is
generic (
    C_M_AXI_IMAGE_IN0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN0_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN1_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_IN3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN2_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN3_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IMAGE_IN0_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN0_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN0_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN0_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN0_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN1_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN1_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN1_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN1_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN2_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN2_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN2_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN2_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_IN3_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_IN3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_IN3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_IN3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_IN3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN3_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_IN3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_IN3_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_IN3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_IN3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_IN3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN3_BUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_AWVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_AWREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_WVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_WREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_IMAGE_OUT_WLAST : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_ARVALID : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_ARREADY : IN STD_LOGIC;
    m_axi_IMAGE_OUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMAGE_OUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMAGE_OUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMAGE_OUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT_RREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RLAST : IN STD_LOGIC;
    m_axi_IMAGE_OUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_BVALID : IN STD_LOGIC;
    m_axi_IMAGE_OUT_BREADY : OUT STD_LOGIC;
    m_axi_IMAGE_OUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMAGE_OUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_IMAGE_OUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of idwt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "idwt,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.078600,HLS_SYN_LAT=1115012,HLS_SYN_TPT=none,HLS_SYN_MEM=522,HLS_SYN_DSP=14,HLS_SYN_FF=6449,HLS_SYN_LUT=6598}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_pp4_stage2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_pp4_stage3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_pp4_stage4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_pp4_stage5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_pp4_stage6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_pp4_stage7 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_pp4_stage8 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_pp4_stage9 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_pp4_stage10 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage11 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage12 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv18_800 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal imageIn0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageIn1 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageIn2 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageIn3 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IMAGE_IN0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_blk_n_AR : STD_LOGIC;
    signal IMAGE_IN1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal exitcond1_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_blk_n_AR : STD_LOGIC;
    signal IMAGE_IN2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal exitcond2_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_blk_n_AR : STD_LOGIC;
    signal IMAGE_IN3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal exitcond3_reg_1173 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage2 : signal is "none";
    signal IMAGE_OUT_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage7 : signal is "none";
    signal ap_CS_fsm_pp4_stage6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage6 : signal is "none";
    signal ap_CS_fsm_pp4_stage12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage12 : signal is "none";
    signal ap_CS_fsm_pp4_stage11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage11 : signal is "none";
    signal ap_CS_fsm_pp4_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage4 : signal is "none";
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal IMAGE_IN0_AWREADY : STD_LOGIC;
    signal IMAGE_IN0_WREADY : STD_LOGIC;
    signal IMAGE_IN0_ARVALID : STD_LOGIC;
    signal IMAGE_IN0_ARREADY : STD_LOGIC;
    signal IMAGE_IN0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN0_RVALID : STD_LOGIC;
    signal IMAGE_IN0_RREADY : STD_LOGIC;
    signal IMAGE_IN0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN0_RLAST : STD_LOGIC;
    signal IMAGE_IN0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN0_BVALID : STD_LOGIC;
    signal IMAGE_IN0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_AWREADY : STD_LOGIC;
    signal IMAGE_IN1_WREADY : STD_LOGIC;
    signal IMAGE_IN1_ARVALID : STD_LOGIC;
    signal IMAGE_IN1_ARREADY : STD_LOGIC;
    signal IMAGE_IN1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN1_RVALID : STD_LOGIC;
    signal IMAGE_IN1_RREADY : STD_LOGIC;
    signal IMAGE_IN1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN1_RLAST : STD_LOGIC;
    signal IMAGE_IN1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN1_BVALID : STD_LOGIC;
    signal IMAGE_IN1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_AWREADY : STD_LOGIC;
    signal IMAGE_IN2_WREADY : STD_LOGIC;
    signal IMAGE_IN2_ARVALID : STD_LOGIC;
    signal IMAGE_IN2_ARREADY : STD_LOGIC;
    signal IMAGE_IN2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN2_RVALID : STD_LOGIC;
    signal IMAGE_IN2_RREADY : STD_LOGIC;
    signal IMAGE_IN2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN2_RLAST : STD_LOGIC;
    signal IMAGE_IN2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN2_BVALID : STD_LOGIC;
    signal IMAGE_IN2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_AWREADY : STD_LOGIC;
    signal IMAGE_IN3_WREADY : STD_LOGIC;
    signal IMAGE_IN3_ARVALID : STD_LOGIC;
    signal IMAGE_IN3_ARREADY : STD_LOGIC;
    signal IMAGE_IN3_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN3_RVALID : STD_LOGIC;
    signal IMAGE_IN3_RREADY : STD_LOGIC;
    signal IMAGE_IN3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_IN3_RLAST : STD_LOGIC;
    signal IMAGE_IN3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN3_BVALID : STD_LOGIC;
    signal IMAGE_IN3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_IN3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_IN3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_AWVALID : STD_LOGIC;
    signal IMAGE_OUT_AWREADY : STD_LOGIC;
    signal IMAGE_OUT_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT_WVALID : STD_LOGIC;
    signal IMAGE_OUT_WREADY : STD_LOGIC;
    signal IMAGE_OUT_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT_ARREADY : STD_LOGIC;
    signal IMAGE_OUT_RVALID : STD_LOGIC;
    signal IMAGE_OUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal IMAGE_OUT_RLAST : STD_LOGIC;
    signal IMAGE_OUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT_BVALID : STD_LOGIC;
    signal IMAGE_OUT_BREADY : STD_LOGIC;
    signal IMAGE_OUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMAGE_OUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMAGE_OUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_392 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar1_reg_403 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar2_reg_414 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar3_reg_425 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_reg_436 : STD_LOGIC_VECTOR (16 downto 0);
    signal rows1_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal cols_reg_458 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_485 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_sig_ioackin_IMAGE_OUT_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_OUT_WREADY : STD_LOGIC;
    signal ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_496 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_1027 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn_reg_1032 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn4_reg_1037 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn5_reg_1042 : STD_LOGIC_VECTOR (29 downto 0);
    signal imageIn6_reg_1047 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_IMAGE_IN0_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_IN1_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_IN2_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_IMAGE_IN3_ARREADY : STD_LOGIC;
    signal tmp_2_cast_fu_591_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_cast_reg_1076 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal rows_2_fu_600_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal rows_2_reg_1088 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_610_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1093 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_37_fu_634_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_reg_1110 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_37_reg_1110 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_1115 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_9_reg_1115 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN0_addr_read_reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter1_exitcond1_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_670_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_40_fu_680_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_40_reg_1134 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp1_iter1_tmp_40_reg_1134 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_reg_1139 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp1_iter1_tmp_41_reg_1139 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN1_addr_read_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter1_exitcond2_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_716_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_44_fu_726_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_44_reg_1158 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp2_iter1_tmp_44_reg_1158 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_reg_1163 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp2_iter1_tmp_45_reg_1163 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN2_addr_read_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp3_iter1_exitcond3_reg_1173 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next3_fu_762_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_48_fu_772_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_reg_1182 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp3_iter1_tmp_48_reg_1182 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_reg_1187 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp3_iter1_tmp_49_reg_1187 : STD_LOGIC_VECTOR (5 downto 0);
    signal IMAGE_IN3_addr_read_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_808_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten_next_reg_1201 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal cols_mid2_fu_828_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal cols_mid2_reg_1206 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_pipeline_reg_pp4_iter1_cols_mid2_reg_1206 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_pipeline_reg_pp4_iter2_cols_mid2_reg_1206 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_pipeline_reg_pp4_iter3_cols_mid2_reg_1206 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_mid2_v_v_fu_836_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_mid2_v_v_reg_1212 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_mid2_v_reg_1217 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_reg_1222 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_reg_1227 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp4_iter1_tmp_34_reg_1227 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp4_iter2_tmp_34_reg_1227 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_reg_pp4_iter3_tmp_34_reg_1227 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx2_fu_900_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal idx2_reg_1232 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_pipeline_reg_pp4_iter1_idx2_reg_1232 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_pipeline_reg_pp4_iter2_idx2_reg_1232 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_pipeline_reg_pp4_iter3_idx2_reg_1232 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_pipeline_reg_pp4_iter4_idx2_reg_1232 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_44_cast_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_reg_1238 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_pipeline_reg_pp4_iter1_tmp_44_cast_reg_1238 : STD_LOGIC_VECTOR (63 downto 0);
    signal image0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn0_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal image1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn1_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp4_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage3 : signal is "none";
    signal grp_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_reg_1265 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_1270 : STD_LOGIC_VECTOR (63 downto 0);
    signal cols_1_fu_931_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal cols_1_reg_1275 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_reg_1280 : STD_LOGIC_VECTOR (63 downto 0);
    signal image2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn2_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal image3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelIn3_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp4_iter2_pixelIn3_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1305 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp4_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage5 : signal is "none";
    signal grp_fu_475_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1310 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp4_stage10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage10 : signal is "none";
    signal tmp_27_reg_1315 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_1320 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal tmp_21_reg_1325 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1330 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_1335 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp4_stage8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage8 : signal is "none";
    signal tmp_31_reg_1340 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp4_stage9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp4_stage9 : signal is "none";
    signal tmp_22_reg_1345 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_1350 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_1355 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_reg_1360 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx1_fu_936_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal idx1_reg_1365 : STD_LOGIC_VECTOR (17 downto 0);
    signal imageOut10_sum_fu_946_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum_reg_1370 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_reg_1380 : STD_LOGIC_VECTOR (63 downto 0);
    signal pixelOut2_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut10_sum1_fu_970_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum1_reg_1390 : STD_LOGIC_VECTOR (30 downto 0);
    signal pixelOut3_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageOut10_sum2_fu_988_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum2_reg_1405 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum3_fu_1012_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal imageOut10_sum3_reg_1415 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal image0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image0_ce0 : STD_LOGIC;
    signal image0_we0 : STD_LOGIC;
    signal image1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image1_ce0 : STD_LOGIC;
    signal image1_we0 : STD_LOGIC;
    signal image2_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image2_ce0 : STD_LOGIC;
    signal image2_we0 : STD_LOGIC;
    signal image3_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image3_ce0 : STD_LOGIC;
    signal image3_we0 : STD_LOGIC;
    signal rows_reg_381 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal indvar_flatten_phi_fu_440_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal rows1_phi_fu_451_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal cols_phi_fu_462_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum_cast_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum1_cast_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum2_cast_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageOut10_sum3_cast_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_IMAGE_IN0_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_IN1_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_IN2_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_IN3_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_IMAGE_OUT_WREADY : STD_LOGIC := '0';
    signal grp_fu_469_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_475_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_479_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_606_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_cast9_fu_630_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn0_addr_fu_638_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_653_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar1_cast7_fu_676_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn1_addr_fu_684_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_699_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar2_cast5_fu_722_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn2_addr_fu_730_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_745_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar3_cast3_fu_768_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal imageIn3_addr_fu_776_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_791_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_820_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_1_fu_814_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_854_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_mid2_v_v_fu_858_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_cast_mid2_v_fu_866_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal cols_cast1_fu_876_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_cast_mid2_fu_872_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_s_fu_906_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_cast_fu_913_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_cast_fu_917_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_13_fu_920_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_cast_fu_942_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_fu_961_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_37_cast_fu_966_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_38_cast_fu_985_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_36_fu_1003_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_40_cast_fu_1008_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_469_ce : STD_LOGIC;
    signal grp_fu_475_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_475_ce : STD_LOGIC;
    signal grp_fu_479_ce : STD_LOGIC;
    signal ap_CS_fsm_state98 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_condition_1465 : BOOLEAN;
    signal ap_condition_926 : BOOLEAN;

    component idwt_fptrunc_64nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component idwt_fpext_32ns_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component idwt_dadddsub_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component idwt_dmul_64ns_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component idwt_image0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component idwt_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        imageIn0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageIn1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageIn2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageIn3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        imageOut : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component idwt_IMAGE_IN0_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_IN1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_IN2_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_IN3_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component idwt_IMAGE_OUT_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    idwt_CONTROL_BUS_s_axi_U : component idwt_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        imageIn0 => imageIn0,
        imageIn1 => imageIn1,
        imageIn2 => imageIn2,
        imageIn3 => imageIn3,
        imageOut => imageOut);

    idwt_IMAGE_IN0_m_axi_U : component idwt_IMAGE_IN0_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN0_AWVALID,
        AWREADY => m_axi_IMAGE_IN0_AWREADY,
        AWADDR => m_axi_IMAGE_IN0_AWADDR,
        AWID => m_axi_IMAGE_IN0_AWID,
        AWLEN => m_axi_IMAGE_IN0_AWLEN,
        AWSIZE => m_axi_IMAGE_IN0_AWSIZE,
        AWBURST => m_axi_IMAGE_IN0_AWBURST,
        AWLOCK => m_axi_IMAGE_IN0_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN0_AWCACHE,
        AWPROT => m_axi_IMAGE_IN0_AWPROT,
        AWQOS => m_axi_IMAGE_IN0_AWQOS,
        AWREGION => m_axi_IMAGE_IN0_AWREGION,
        AWUSER => m_axi_IMAGE_IN0_AWUSER,
        WVALID => m_axi_IMAGE_IN0_WVALID,
        WREADY => m_axi_IMAGE_IN0_WREADY,
        WDATA => m_axi_IMAGE_IN0_WDATA,
        WSTRB => m_axi_IMAGE_IN0_WSTRB,
        WLAST => m_axi_IMAGE_IN0_WLAST,
        WID => m_axi_IMAGE_IN0_WID,
        WUSER => m_axi_IMAGE_IN0_WUSER,
        ARVALID => m_axi_IMAGE_IN0_ARVALID,
        ARREADY => m_axi_IMAGE_IN0_ARREADY,
        ARADDR => m_axi_IMAGE_IN0_ARADDR,
        ARID => m_axi_IMAGE_IN0_ARID,
        ARLEN => m_axi_IMAGE_IN0_ARLEN,
        ARSIZE => m_axi_IMAGE_IN0_ARSIZE,
        ARBURST => m_axi_IMAGE_IN0_ARBURST,
        ARLOCK => m_axi_IMAGE_IN0_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN0_ARCACHE,
        ARPROT => m_axi_IMAGE_IN0_ARPROT,
        ARQOS => m_axi_IMAGE_IN0_ARQOS,
        ARREGION => m_axi_IMAGE_IN0_ARREGION,
        ARUSER => m_axi_IMAGE_IN0_ARUSER,
        RVALID => m_axi_IMAGE_IN0_RVALID,
        RREADY => m_axi_IMAGE_IN0_RREADY,
        RDATA => m_axi_IMAGE_IN0_RDATA,
        RLAST => m_axi_IMAGE_IN0_RLAST,
        RID => m_axi_IMAGE_IN0_RID,
        RUSER => m_axi_IMAGE_IN0_RUSER,
        RRESP => m_axi_IMAGE_IN0_RRESP,
        BVALID => m_axi_IMAGE_IN0_BVALID,
        BREADY => m_axi_IMAGE_IN0_BREADY,
        BRESP => m_axi_IMAGE_IN0_BRESP,
        BID => m_axi_IMAGE_IN0_BID,
        BUSER => m_axi_IMAGE_IN0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN0_ARVALID,
        I_ARREADY => IMAGE_IN0_ARREADY,
        I_ARADDR => IMAGE_IN0_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN0_RVALID,
        I_RREADY => IMAGE_IN0_RREADY,
        I_RDATA => IMAGE_IN0_RDATA,
        I_RID => IMAGE_IN0_RID,
        I_RUSER => IMAGE_IN0_RUSER,
        I_RRESP => IMAGE_IN0_RRESP,
        I_RLAST => IMAGE_IN0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN0_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN0_BRESP,
        I_BID => IMAGE_IN0_BID,
        I_BUSER => IMAGE_IN0_BUSER);

    idwt_IMAGE_IN1_m_axi_U : component idwt_IMAGE_IN1_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN1_AWVALID,
        AWREADY => m_axi_IMAGE_IN1_AWREADY,
        AWADDR => m_axi_IMAGE_IN1_AWADDR,
        AWID => m_axi_IMAGE_IN1_AWID,
        AWLEN => m_axi_IMAGE_IN1_AWLEN,
        AWSIZE => m_axi_IMAGE_IN1_AWSIZE,
        AWBURST => m_axi_IMAGE_IN1_AWBURST,
        AWLOCK => m_axi_IMAGE_IN1_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN1_AWCACHE,
        AWPROT => m_axi_IMAGE_IN1_AWPROT,
        AWQOS => m_axi_IMAGE_IN1_AWQOS,
        AWREGION => m_axi_IMAGE_IN1_AWREGION,
        AWUSER => m_axi_IMAGE_IN1_AWUSER,
        WVALID => m_axi_IMAGE_IN1_WVALID,
        WREADY => m_axi_IMAGE_IN1_WREADY,
        WDATA => m_axi_IMAGE_IN1_WDATA,
        WSTRB => m_axi_IMAGE_IN1_WSTRB,
        WLAST => m_axi_IMAGE_IN1_WLAST,
        WID => m_axi_IMAGE_IN1_WID,
        WUSER => m_axi_IMAGE_IN1_WUSER,
        ARVALID => m_axi_IMAGE_IN1_ARVALID,
        ARREADY => m_axi_IMAGE_IN1_ARREADY,
        ARADDR => m_axi_IMAGE_IN1_ARADDR,
        ARID => m_axi_IMAGE_IN1_ARID,
        ARLEN => m_axi_IMAGE_IN1_ARLEN,
        ARSIZE => m_axi_IMAGE_IN1_ARSIZE,
        ARBURST => m_axi_IMAGE_IN1_ARBURST,
        ARLOCK => m_axi_IMAGE_IN1_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN1_ARCACHE,
        ARPROT => m_axi_IMAGE_IN1_ARPROT,
        ARQOS => m_axi_IMAGE_IN1_ARQOS,
        ARREGION => m_axi_IMAGE_IN1_ARREGION,
        ARUSER => m_axi_IMAGE_IN1_ARUSER,
        RVALID => m_axi_IMAGE_IN1_RVALID,
        RREADY => m_axi_IMAGE_IN1_RREADY,
        RDATA => m_axi_IMAGE_IN1_RDATA,
        RLAST => m_axi_IMAGE_IN1_RLAST,
        RID => m_axi_IMAGE_IN1_RID,
        RUSER => m_axi_IMAGE_IN1_RUSER,
        RRESP => m_axi_IMAGE_IN1_RRESP,
        BVALID => m_axi_IMAGE_IN1_BVALID,
        BREADY => m_axi_IMAGE_IN1_BREADY,
        BRESP => m_axi_IMAGE_IN1_BRESP,
        BID => m_axi_IMAGE_IN1_BID,
        BUSER => m_axi_IMAGE_IN1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN1_ARVALID,
        I_ARREADY => IMAGE_IN1_ARREADY,
        I_ARADDR => IMAGE_IN1_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN1_RVALID,
        I_RREADY => IMAGE_IN1_RREADY,
        I_RDATA => IMAGE_IN1_RDATA,
        I_RID => IMAGE_IN1_RID,
        I_RUSER => IMAGE_IN1_RUSER,
        I_RRESP => IMAGE_IN1_RRESP,
        I_RLAST => IMAGE_IN1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN1_BRESP,
        I_BID => IMAGE_IN1_BID,
        I_BUSER => IMAGE_IN1_BUSER);

    idwt_IMAGE_IN2_m_axi_U : component idwt_IMAGE_IN2_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN2_AWVALID,
        AWREADY => m_axi_IMAGE_IN2_AWREADY,
        AWADDR => m_axi_IMAGE_IN2_AWADDR,
        AWID => m_axi_IMAGE_IN2_AWID,
        AWLEN => m_axi_IMAGE_IN2_AWLEN,
        AWSIZE => m_axi_IMAGE_IN2_AWSIZE,
        AWBURST => m_axi_IMAGE_IN2_AWBURST,
        AWLOCK => m_axi_IMAGE_IN2_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN2_AWCACHE,
        AWPROT => m_axi_IMAGE_IN2_AWPROT,
        AWQOS => m_axi_IMAGE_IN2_AWQOS,
        AWREGION => m_axi_IMAGE_IN2_AWREGION,
        AWUSER => m_axi_IMAGE_IN2_AWUSER,
        WVALID => m_axi_IMAGE_IN2_WVALID,
        WREADY => m_axi_IMAGE_IN2_WREADY,
        WDATA => m_axi_IMAGE_IN2_WDATA,
        WSTRB => m_axi_IMAGE_IN2_WSTRB,
        WLAST => m_axi_IMAGE_IN2_WLAST,
        WID => m_axi_IMAGE_IN2_WID,
        WUSER => m_axi_IMAGE_IN2_WUSER,
        ARVALID => m_axi_IMAGE_IN2_ARVALID,
        ARREADY => m_axi_IMAGE_IN2_ARREADY,
        ARADDR => m_axi_IMAGE_IN2_ARADDR,
        ARID => m_axi_IMAGE_IN2_ARID,
        ARLEN => m_axi_IMAGE_IN2_ARLEN,
        ARSIZE => m_axi_IMAGE_IN2_ARSIZE,
        ARBURST => m_axi_IMAGE_IN2_ARBURST,
        ARLOCK => m_axi_IMAGE_IN2_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN2_ARCACHE,
        ARPROT => m_axi_IMAGE_IN2_ARPROT,
        ARQOS => m_axi_IMAGE_IN2_ARQOS,
        ARREGION => m_axi_IMAGE_IN2_ARREGION,
        ARUSER => m_axi_IMAGE_IN2_ARUSER,
        RVALID => m_axi_IMAGE_IN2_RVALID,
        RREADY => m_axi_IMAGE_IN2_RREADY,
        RDATA => m_axi_IMAGE_IN2_RDATA,
        RLAST => m_axi_IMAGE_IN2_RLAST,
        RID => m_axi_IMAGE_IN2_RID,
        RUSER => m_axi_IMAGE_IN2_RUSER,
        RRESP => m_axi_IMAGE_IN2_RRESP,
        BVALID => m_axi_IMAGE_IN2_BVALID,
        BREADY => m_axi_IMAGE_IN2_BREADY,
        BRESP => m_axi_IMAGE_IN2_BRESP,
        BID => m_axi_IMAGE_IN2_BID,
        BUSER => m_axi_IMAGE_IN2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN2_ARVALID,
        I_ARREADY => IMAGE_IN2_ARREADY,
        I_ARADDR => IMAGE_IN2_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN2_RVALID,
        I_RREADY => IMAGE_IN2_RREADY,
        I_RDATA => IMAGE_IN2_RDATA,
        I_RID => IMAGE_IN2_RID,
        I_RUSER => IMAGE_IN2_RUSER,
        I_RRESP => IMAGE_IN2_RRESP,
        I_RLAST => IMAGE_IN2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN2_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN2_BRESP,
        I_BID => IMAGE_IN2_BID,
        I_BUSER => IMAGE_IN2_BUSER);

    idwt_IMAGE_IN3_m_axi_U : component idwt_IMAGE_IN3_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_IN3_AWVALID,
        AWREADY => m_axi_IMAGE_IN3_AWREADY,
        AWADDR => m_axi_IMAGE_IN3_AWADDR,
        AWID => m_axi_IMAGE_IN3_AWID,
        AWLEN => m_axi_IMAGE_IN3_AWLEN,
        AWSIZE => m_axi_IMAGE_IN3_AWSIZE,
        AWBURST => m_axi_IMAGE_IN3_AWBURST,
        AWLOCK => m_axi_IMAGE_IN3_AWLOCK,
        AWCACHE => m_axi_IMAGE_IN3_AWCACHE,
        AWPROT => m_axi_IMAGE_IN3_AWPROT,
        AWQOS => m_axi_IMAGE_IN3_AWQOS,
        AWREGION => m_axi_IMAGE_IN3_AWREGION,
        AWUSER => m_axi_IMAGE_IN3_AWUSER,
        WVALID => m_axi_IMAGE_IN3_WVALID,
        WREADY => m_axi_IMAGE_IN3_WREADY,
        WDATA => m_axi_IMAGE_IN3_WDATA,
        WSTRB => m_axi_IMAGE_IN3_WSTRB,
        WLAST => m_axi_IMAGE_IN3_WLAST,
        WID => m_axi_IMAGE_IN3_WID,
        WUSER => m_axi_IMAGE_IN3_WUSER,
        ARVALID => m_axi_IMAGE_IN3_ARVALID,
        ARREADY => m_axi_IMAGE_IN3_ARREADY,
        ARADDR => m_axi_IMAGE_IN3_ARADDR,
        ARID => m_axi_IMAGE_IN3_ARID,
        ARLEN => m_axi_IMAGE_IN3_ARLEN,
        ARSIZE => m_axi_IMAGE_IN3_ARSIZE,
        ARBURST => m_axi_IMAGE_IN3_ARBURST,
        ARLOCK => m_axi_IMAGE_IN3_ARLOCK,
        ARCACHE => m_axi_IMAGE_IN3_ARCACHE,
        ARPROT => m_axi_IMAGE_IN3_ARPROT,
        ARQOS => m_axi_IMAGE_IN3_ARQOS,
        ARREGION => m_axi_IMAGE_IN3_ARREGION,
        ARUSER => m_axi_IMAGE_IN3_ARUSER,
        RVALID => m_axi_IMAGE_IN3_RVALID,
        RREADY => m_axi_IMAGE_IN3_RREADY,
        RDATA => m_axi_IMAGE_IN3_RDATA,
        RLAST => m_axi_IMAGE_IN3_RLAST,
        RID => m_axi_IMAGE_IN3_RID,
        RUSER => m_axi_IMAGE_IN3_RUSER,
        RRESP => m_axi_IMAGE_IN3_RRESP,
        BVALID => m_axi_IMAGE_IN3_BVALID,
        BREADY => m_axi_IMAGE_IN3_BREADY,
        BRESP => m_axi_IMAGE_IN3_BRESP,
        BID => m_axi_IMAGE_IN3_BID,
        BUSER => m_axi_IMAGE_IN3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMAGE_IN3_ARVALID,
        I_ARREADY => IMAGE_IN3_ARREADY,
        I_ARADDR => IMAGE_IN3_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_IN3_RVALID,
        I_RREADY => IMAGE_IN3_RREADY,
        I_RDATA => IMAGE_IN3_RDATA,
        I_RID => IMAGE_IN3_RID,
        I_RUSER => IMAGE_IN3_RUSER,
        I_RRESP => IMAGE_IN3_RRESP,
        I_RLAST => IMAGE_IN3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMAGE_IN3_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMAGE_IN3_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => IMAGE_IN3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMAGE_IN3_BRESP,
        I_BID => IMAGE_IN3_BID,
        I_BUSER => IMAGE_IN3_BUSER);

    idwt_IMAGE_OUT_m_axi_U : component idwt_IMAGE_OUT_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_OUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_OUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMAGE_OUT_AWVALID,
        AWREADY => m_axi_IMAGE_OUT_AWREADY,
        AWADDR => m_axi_IMAGE_OUT_AWADDR,
        AWID => m_axi_IMAGE_OUT_AWID,
        AWLEN => m_axi_IMAGE_OUT_AWLEN,
        AWSIZE => m_axi_IMAGE_OUT_AWSIZE,
        AWBURST => m_axi_IMAGE_OUT_AWBURST,
        AWLOCK => m_axi_IMAGE_OUT_AWLOCK,
        AWCACHE => m_axi_IMAGE_OUT_AWCACHE,
        AWPROT => m_axi_IMAGE_OUT_AWPROT,
        AWQOS => m_axi_IMAGE_OUT_AWQOS,
        AWREGION => m_axi_IMAGE_OUT_AWREGION,
        AWUSER => m_axi_IMAGE_OUT_AWUSER,
        WVALID => m_axi_IMAGE_OUT_WVALID,
        WREADY => m_axi_IMAGE_OUT_WREADY,
        WDATA => m_axi_IMAGE_OUT_WDATA,
        WSTRB => m_axi_IMAGE_OUT_WSTRB,
        WLAST => m_axi_IMAGE_OUT_WLAST,
        WID => m_axi_IMAGE_OUT_WID,
        WUSER => m_axi_IMAGE_OUT_WUSER,
        ARVALID => m_axi_IMAGE_OUT_ARVALID,
        ARREADY => m_axi_IMAGE_OUT_ARREADY,
        ARADDR => m_axi_IMAGE_OUT_ARADDR,
        ARID => m_axi_IMAGE_OUT_ARID,
        ARLEN => m_axi_IMAGE_OUT_ARLEN,
        ARSIZE => m_axi_IMAGE_OUT_ARSIZE,
        ARBURST => m_axi_IMAGE_OUT_ARBURST,
        ARLOCK => m_axi_IMAGE_OUT_ARLOCK,
        ARCACHE => m_axi_IMAGE_OUT_ARCACHE,
        ARPROT => m_axi_IMAGE_OUT_ARPROT,
        ARQOS => m_axi_IMAGE_OUT_ARQOS,
        ARREGION => m_axi_IMAGE_OUT_ARREGION,
        ARUSER => m_axi_IMAGE_OUT_ARUSER,
        RVALID => m_axi_IMAGE_OUT_RVALID,
        RREADY => m_axi_IMAGE_OUT_RREADY,
        RDATA => m_axi_IMAGE_OUT_RDATA,
        RLAST => m_axi_IMAGE_OUT_RLAST,
        RID => m_axi_IMAGE_OUT_RID,
        RUSER => m_axi_IMAGE_OUT_RUSER,
        RRESP => m_axi_IMAGE_OUT_RRESP,
        BVALID => m_axi_IMAGE_OUT_BVALID,
        BREADY => m_axi_IMAGE_OUT_BREADY,
        BRESP => m_axi_IMAGE_OUT_BRESP,
        BID => m_axi_IMAGE_OUT_BID,
        BUSER => m_axi_IMAGE_OUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => IMAGE_OUT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMAGE_OUT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => IMAGE_OUT_RDATA,
        I_RID => IMAGE_OUT_RID,
        I_RUSER => IMAGE_OUT_RUSER,
        I_RRESP => IMAGE_OUT_RRESP,
        I_RLAST => IMAGE_OUT_RLAST,
        I_AWVALID => IMAGE_OUT_AWVALID,
        I_AWREADY => IMAGE_OUT_AWREADY,
        I_AWADDR => IMAGE_OUT_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => IMAGE_OUT_WVALID,
        I_WREADY => IMAGE_OUT_WREADY,
        I_WDATA => IMAGE_OUT_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => IMAGE_OUT_BVALID,
        I_BREADY => IMAGE_OUT_BREADY,
        I_BRESP => IMAGE_OUT_BRESP,
        I_BID => IMAGE_OUT_BID,
        I_BUSER => IMAGE_OUT_BUSER);

    image0_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image0_address0,
        ce0 => image0_ce0,
        we0 => image0_we0,
        d0 => IMAGE_IN0_addr_read_reg_1120,
        q0 => image0_q0);

    image1_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image1_address0,
        ce0 => image1_ce0,
        we0 => image1_we0,
        d0 => IMAGE_IN1_addr_read_reg_1144,
        q0 => image1_q0);

    image2_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image2_address0,
        ce0 => image2_ce0,
        we0 => image2_we0,
        d0 => IMAGE_IN2_addr_read_reg_1168,
        q0 => image2_q0);

    image3_U : component idwt_image0
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image3_address0,
        ce0 => image3_ce0,
        we0 => image3_we0,
        d0 => IMAGE_IN3_addr_read_reg_1192,
        q0 => image3_q0);

    idwt_fptrunc_64nsbkb_U1 : component idwt_fptrunc_64nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_469_p0,
        ce => grp_fu_469_ce,
        dout => grp_fu_469_p1);

    idwt_fpext_32ns_6cud_U2 : component idwt_fpext_32ns_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_472_p0,
        dout => grp_fu_472_p1);

    idwt_dadddsub_64ndEe_U3 : component idwt_dadddsub_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_475_p0,
        din1 => grp_fu_475_p1,
        opcode => grp_fu_475_opcode,
        ce => grp_fu_475_ce,
        dout => grp_fu_475_p2);

    idwt_dmul_64ns_64eOg_U4 : component idwt_dmul_64ns_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_479_p0,
        din1 => grp_fu_479_p1,
        ce => grp_fu_479_ce,
        dout => grp_fu_479_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond_fu_618_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_fu_594_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond_fu_618_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_fu_594_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond_fu_618_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_fu_594_p2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond1_fu_664_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond1_fu_664_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond1_fu_664_p2))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_710_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond2_fu_710_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_fu_710_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_756_p2)))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond3_fu_756_p2))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_756_p2))))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and not((ap_const_lv1_0 = exitcond_flatten_fu_802_p2)))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_fu_594_p2)))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_fu_594_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) and not((ap_const_lv1_0 = exitcond_flatten_reg_1197))))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))))) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))))) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))))) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))))) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_fu_594_p2)))) then 
                    ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN0_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if ((ap_condition_926 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN0_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN1_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if ((ap_condition_926 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN1_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN2_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if ((ap_condition_926 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN2_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_IN3_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if ((ap_condition_926 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = IMAGE_IN3_ARREADY)) then 
                        ap_reg_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))))) then 
                    ap_reg_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and (ap_const_logic_1 = IMAGE_OUT_AWREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = IMAGE_OUT_AWREADY)))) then 
                    ap_reg_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_IMAGE_OUT_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))))) then 
                    ap_reg_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = IMAGE_OUT_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_1 = IMAGE_OUT_WREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and (ap_const_logic_1 = IMAGE_OUT_WREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_1 = IMAGE_OUT_WREADY)))) then 
                    ap_reg_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    cols_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_fu_594_p2)))) then 
                cols_reg_458 <= ap_const_lv12_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then 
                cols_reg_458 <= cols_1_reg_1275;
            end if; 
        end if;
    end process;

    indvar1_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                indvar1_reg_403 <= ap_const_lv11_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond1_fu_664_p2))) then 
                indvar1_reg_403 <= indvar_next1_fu_670_p2;
            end if; 
        end if;
    end process;

    indvar2_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                indvar2_reg_414 <= ap_const_lv11_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond2_fu_710_p2))) then 
                indvar2_reg_414 <= indvar_next2_fu_716_p2;
            end if; 
        end if;
    end process;

    indvar3_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                indvar3_reg_425 <= ap_const_lv11_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond3_fu_756_p2))) then 
                indvar3_reg_425 <= indvar_next3_fu_762_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_fu_594_p2)))) then 
                indvar_flatten_reg_436 <= ap_const_lv17_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then 
                indvar_flatten_reg_436 <= indvar_flatten_next_reg_1201;
            end if; 
        end if;
    end process;

    indvar_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_fu_618_p2))) then 
                indvar_reg_392 <= indvar_next_fu_624_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_fu_594_p2))) then 
                indvar_reg_392 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    rows1_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_fu_594_p2)))) then 
                rows1_reg_447 <= ap_const_lv8_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then 
                rows1_reg_447 <= tmp_5_mid2_v_v_reg_1212;
            end if; 
        end if;
    end process;

    rows_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
                rows_reg_381 <= rows_2_reg_1088;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                rows_reg_381 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_1101 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))))) then
                IMAGE_IN0_addr_read_reg_1120 <= IMAGE_IN0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond1_reg_1125) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))))) then
                IMAGE_IN1_addr_read_reg_1144 <= IMAGE_IN1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond2_reg_1149) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))))) then
                IMAGE_IN2_addr_read_reg_1168 <= IMAGE_IN2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond3_reg_1173) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))))) then
                IMAGE_IN3_addr_read_reg_1192 <= IMAGE_IN3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp0_iter1_exitcond_reg_1101 <= exitcond_reg_1101;
                ap_pipeline_reg_pp0_iter1_tmp_37_reg_1110 <= tmp_37_reg_1110;
                ap_pipeline_reg_pp0_iter1_tmp_9_reg_1115 <= tmp_9_reg_1115;
                exitcond_reg_1101 <= exitcond_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp1_iter1_exitcond1_reg_1125 <= exitcond1_reg_1125;
                ap_pipeline_reg_pp1_iter1_tmp_40_reg_1134 <= tmp_40_reg_1134;
                ap_pipeline_reg_pp1_iter1_tmp_41_reg_1139 <= tmp_41_reg_1139;
                exitcond1_reg_1125 <= exitcond1_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp2_iter1_exitcond2_reg_1149 <= exitcond2_reg_1149;
                ap_pipeline_reg_pp2_iter1_tmp_44_reg_1158 <= tmp_44_reg_1158;
                ap_pipeline_reg_pp2_iter1_tmp_45_reg_1163 <= tmp_45_reg_1163;
                exitcond2_reg_1149 <= exitcond2_fu_710_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp3_iter1_exitcond3_reg_1173 <= exitcond3_reg_1173;
                ap_pipeline_reg_pp3_iter1_tmp_48_reg_1182 <= tmp_48_reg_1182;
                ap_pipeline_reg_pp3_iter1_tmp_49_reg_1187 <= tmp_49_reg_1187;
                exitcond3_reg_1173 <= exitcond3_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))))) then
                ap_pipeline_reg_pp4_iter1_cols_mid2_reg_1206 <= cols_mid2_reg_1206;
                ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197 <= exitcond_flatten_reg_1197;
                ap_pipeline_reg_pp4_iter1_idx2_reg_1232 <= idx2_reg_1232;
                ap_pipeline_reg_pp4_iter1_tmp_34_reg_1227 <= tmp_34_reg_1227;
                ap_pipeline_reg_pp4_iter2_cols_mid2_reg_1206 <= ap_pipeline_reg_pp4_iter1_cols_mid2_reg_1206;
                ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197 <= ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197;
                ap_pipeline_reg_pp4_iter2_idx2_reg_1232 <= ap_pipeline_reg_pp4_iter1_idx2_reg_1232;
                ap_pipeline_reg_pp4_iter2_tmp_34_reg_1227 <= ap_pipeline_reg_pp4_iter1_tmp_34_reg_1227;
                ap_pipeline_reg_pp4_iter3_cols_mid2_reg_1206 <= ap_pipeline_reg_pp4_iter2_cols_mid2_reg_1206;
                ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197 <= ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197;
                ap_pipeline_reg_pp4_iter3_idx2_reg_1232 <= ap_pipeline_reg_pp4_iter2_idx2_reg_1232;
                ap_pipeline_reg_pp4_iter3_tmp_34_reg_1227 <= ap_pipeline_reg_pp4_iter2_tmp_34_reg_1227;
                ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197 <= ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197;
                ap_pipeline_reg_pp4_iter4_idx2_reg_1232 <= ap_pipeline_reg_pp4_iter3_idx2_reg_1232;
                ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197 <= ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197;
                exitcond_flatten_reg_1197 <= exitcond_flatten_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) then
                    ap_pipeline_reg_pp4_iter1_tmp_44_cast_reg_1238(17 downto 0) <= tmp_44_cast_reg_1238(17 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp4_iter2_pixelIn3_reg_1300 <= pixelIn3_reg_1300;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then
                cols_1_reg_1275 <= cols_1_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_lv1_0 = exitcond_flatten_fu_802_p2))) then
                cols_mid2_reg_1206 <= cols_mid2_fu_828_p3;
                idx2_reg_1232 <= idx2_fu_900_p2;
                tmp_12_reg_1222 <= cols_mid2_fu_828_p3(11 downto 1);
                tmp_34_reg_1227 <= tmp_5_mid2_v_v_fu_836_p3(6 downto 1);
                tmp_5_mid2_v_reg_1217 <= tmp_5_mid2_v_v_fu_836_p3(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))))) then
                idx1_reg_1365 <= idx1_fu_936_p3;
                imageOut10_sum_reg_1370 <= imageOut10_sum_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                imageIn4_reg_1037 <= imageIn2(31 downto 2);
                imageIn5_reg_1042 <= imageIn1(31 downto 2);
                imageIn6_reg_1047 <= imageIn0(31 downto 2);
                imageIn_reg_1032 <= imageIn3(31 downto 2);
                tmp_2_reg_1027 <= imageOut(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5))) then
                imageOut10_sum1_reg_1390 <= imageOut10_sum1_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage10))) then
                imageOut10_sum2_reg_1405 <= imageOut10_sum2_fu_988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))))) then
                imageOut10_sum3_reg_1415 <= imageOut10_sum3_fu_1012_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then
                indvar_flatten_next_reg_1201 <= indvar_flatten_next_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then
                pixelIn0_reg_1255 <= image0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then
                pixelIn1_reg_1260 <= image1_q0;
                tmp_14_reg_1265 <= grp_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))) then
                pixelIn2_reg_1295 <= image2_q0;
                pixelIn3_reg_1300 <= image3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5))) then
                pixelOut2_reg_1385 <= grp_fu_469_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))))) then
                pixelOut3_reg_1395 <= grp_fu_469_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197)))) then
                reg_485 <= grp_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))))) then
                reg_491 <= grp_fu_469_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) then
                reg_496 <= grp_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                rows_2_reg_1088 <= rows_2_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then
                tmp_15_reg_1280 <= grp_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then
                tmp_16_reg_1270 <= grp_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage10))) then
                tmp_18_reg_1310 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5))) then
                tmp_19_reg_1305 <= grp_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_fu_594_p2))) then
                    tmp_1_reg_1093(15 downto 10) <= tmp_1_fu_610_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197))) then
                tmp_20_reg_1320 <= grp_fu_475_p2;
                tmp_21_reg_1325 <= grp_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) then
                tmp_22_reg_1345 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197))) then
                tmp_24_reg_1330 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then
                tmp_25_reg_1350 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))))) then
                tmp_27_reg_1315 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8))) then
                tmp_28_reg_1335 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))) then
                tmp_29_reg_1355 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                    tmp_2_cast_reg_1076(29 downto 0) <= tmp_2_cast_fu_591_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then
                tmp_30_reg_1380 <= grp_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage9))) then
                tmp_31_reg_1340 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter3_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5))) then
                tmp_32_reg_1360 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond_fu_618_p2))) then
                tmp_37_reg_1110 <= tmp_37_fu_634_p1;
                tmp_9_reg_1115 <= imageIn0_addr_fu_638_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond1_fu_664_p2))) then
                tmp_40_reg_1134 <= tmp_40_fu_680_p1;
                tmp_41_reg_1139 <= imageIn1_addr_fu_684_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then
                    tmp_44_cast_reg_1238(17 downto 0) <= tmp_44_cast_fu_926_p1(17 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond2_fu_710_p2))) then
                tmp_44_reg_1158 <= tmp_44_fu_726_p1;
                tmp_45_reg_1163 <= imageIn2_addr_fu_730_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond3_fu_756_p2))) then
                tmp_48_reg_1182 <= tmp_48_fu_772_p1;
                tmp_49_reg_1187 <= imageIn3_addr_fu_776_p2(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_802_p2))) then
                tmp_5_mid2_v_v_reg_1212 <= tmp_5_mid2_v_v_fu_836_p3;
            end if;
        end if;
    end process;
    tmp_2_cast_reg_1076(30) <= '0';
    tmp_1_reg_1093(9 downto 0) <= "0000000000";
    tmp_44_cast_reg_1238(63 downto 18) <= "0000000000000000000000000000000000000000000000";
    ap_pipeline_reg_pp4_iter1_tmp_44_cast_reg_1238(63 downto 18) <= "0000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter1, exitcond_reg_1101, ap_enable_reg_pp1_iter1, exitcond1_reg_1125, ap_enable_reg_pp2_iter1, exitcond2_reg_1149, ap_enable_reg_pp3_iter1, exitcond3_reg_1173, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage6, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, IMAGE_IN0_RVALID, IMAGE_IN1_RVALID, IMAGE_IN2_RVALID, IMAGE_IN3_RVALID, IMAGE_OUT_BVALID, ap_enable_reg_pp4_iter1, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY, ap_sig_ioackin_IMAGE_IN0_ARREADY, ap_sig_ioackin_IMAGE_IN1_ARREADY, ap_sig_ioackin_IMAGE_IN2_ARREADY, ap_sig_ioackin_IMAGE_IN3_ARREADY, tmp_fu_594_p2, exitcond_fu_618_p2, ap_enable_reg_pp0_iter0, exitcond1_fu_664_p2, ap_enable_reg_pp1_iter0, exitcond2_fu_710_p2, ap_enable_reg_pp2_iter0, exitcond3_fu_756_p2, ap_enable_reg_pp3_iter0, exitcond_flatten_fu_802_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_enable_reg_pp3_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN0_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN1_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN2_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN3_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (not((ap_const_lv1_0 = tmp_fu_594_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_fu_618_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_fu_618_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond1_fu_664_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond1_fu_664_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond2_fu_710_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond2_fu_710_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond3_fu_756_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond3_fu_756_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and not((not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_802_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                elsif ((not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_802_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if (not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_pp4_stage2 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                end if;
            when ap_ST_fsm_pp4_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage4;
            when ap_ST_fsm_pp4_stage4 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage4;
                end if;
            when ap_ST_fsm_pp4_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage6;
            when ap_ST_fsm_pp4_stage6 => 
                if ((not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) and not(((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter4)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage7;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) and not((ap_const_logic_1 = ap_enable_reg_pp4_iter4)))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage6;
                end if;
            when ap_ST_fsm_pp4_stage7 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage7;
                end if;
            when ap_ST_fsm_pp4_stage8 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage9;
            when ap_ST_fsm_pp4_stage9 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage10;
            when ap_ST_fsm_pp4_stage10 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage11;
            when ap_ST_fsm_pp4_stage11 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage11;
                end if;
            when ap_ST_fsm_pp4_stage12 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage12;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IMAGE_IN0_ARADDR <= tmp_6_fu_581_p1(32 - 1 downto 0);

    IMAGE_IN0_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN0_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN0_ARREADY))) then 
            IMAGE_IN0_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1101, IMAGE_IN0_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))))) then 
            IMAGE_IN0_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN0_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN0_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN0_blk_n_AR <= m_axi_IMAGE_IN0_ARREADY;
        else 
            IMAGE_IN0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN0_blk_n_R_assign_proc : process(m_axi_IMAGE_IN0_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1101)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0))) then 
            IMAGE_IN0_blk_n_R <= m_axi_IMAGE_IN0_RVALID;
        else 
            IMAGE_IN0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    IMAGE_IN1_ARADDR <= tmp_5_fu_571_p1(32 - 1 downto 0);

    IMAGE_IN1_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN1_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN1_ARREADY))) then 
            IMAGE_IN1_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN1_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond1_reg_1125, IMAGE_IN1_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))))) then 
            IMAGE_IN1_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN1_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN1_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN1_blk_n_AR <= m_axi_IMAGE_IN1_ARREADY;
        else 
            IMAGE_IN1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN1_blk_n_R_assign_proc : process(m_axi_IMAGE_IN1_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond1_reg_1125)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125))) then 
            IMAGE_IN1_blk_n_R <= m_axi_IMAGE_IN1_RVALID;
        else 
            IMAGE_IN1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    IMAGE_IN2_ARADDR <= tmp_4_fu_561_p1(32 - 1 downto 0);

    IMAGE_IN2_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN2_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN2_ARREADY))) then 
            IMAGE_IN2_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN2_RREADY_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond2_reg_1149, IMAGE_IN2_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))))) then 
            IMAGE_IN2_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN2_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN2_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN2_blk_n_AR <= m_axi_IMAGE_IN2_ARREADY;
        else 
            IMAGE_IN2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN2_blk_n_R_assign_proc : process(m_axi_IMAGE_IN2_RVALID, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond2_reg_1149)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149))) then 
            IMAGE_IN2_blk_n_R <= m_axi_IMAGE_IN2_RVALID;
        else 
            IMAGE_IN2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    IMAGE_IN3_ARADDR <= tmp_3_fu_551_p1(32 - 1 downto 0);

    IMAGE_IN3_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_IMAGE_IN3_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN3_ARREADY))) then 
            IMAGE_IN3_ARVALID <= ap_const_logic_1;
        else 
            IMAGE_IN3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN3_RREADY_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond3_reg_1173, IMAGE_IN3_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))))) then 
            IMAGE_IN3_RREADY <= ap_const_logic_1;
        else 
            IMAGE_IN3_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_IN3_blk_n_AR_assign_proc : process(m_axi_IMAGE_IN3_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            IMAGE_IN3_blk_n_AR <= m_axi_IMAGE_IN3_ARREADY;
        else 
            IMAGE_IN3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_IN3_blk_n_R_assign_proc : process(m_axi_IMAGE_IN3_RVALID, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond3_reg_1173)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173))) then 
            IMAGE_IN3_blk_n_R <= m_axi_IMAGE_IN3_RVALID;
        else 
            IMAGE_IN3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT_AWADDR_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage11, ap_enable_reg_pp4_iter5, ap_CS_fsm_pp4_stage0, imageOut10_sum_cast_fu_951_p1, imageOut10_sum1_cast_fu_975_p1, imageOut10_sum2_cast_fu_993_p1, imageOut10_sum3_cast_fu_1017_p1, ap_reg_ioackin_IMAGE_OUT_AWREADY, ap_condition_1465)
    begin
        if (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_AWREADY))) then
            if (((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0))) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum3_cast_fu_1017_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage11))) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum2_cast_fu_993_p1(32 - 1 downto 0);
            elsif ((ap_condition_1465 = ap_const_boolean_1)) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum1_cast_fu_975_p1(32 - 1 downto 0);
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter4))) then 
                IMAGE_OUT_AWADDR <= imageOut10_sum_cast_fu_951_p1(32 - 1 downto 0);
            else 
                IMAGE_OUT_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            IMAGE_OUT_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMAGE_OUT_AWVALID_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage11, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage0, IMAGE_OUT_BVALID, ap_reg_ioackin_IMAGE_OUT_AWREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_AWREADY)))) then 
            IMAGE_OUT_AWVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT_BREADY_assign_proc : process(ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage12, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, IMAGE_OUT_BVALID, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))))) then 
            IMAGE_OUT_BREADY <= ap_const_logic_1;
        else 
            IMAGE_OUT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT_WDATA_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage12, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, IMAGE_OUT_BVALID, reg_491, pixelOut2_reg_1385, pixelOut3_reg_1395, ap_reg_ioackin_IMAGE_OUT_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY))) then 
            IMAGE_OUT_WDATA <= pixelOut3_reg_1395;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))) then 
            IMAGE_OUT_WDATA <= pixelOut2_reg_1385;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))))) then 
            IMAGE_OUT_WDATA <= reg_491;
        else 
            IMAGE_OUT_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMAGE_OUT_WVALID_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage12, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, IMAGE_OUT_BVALID, ap_reg_ioackin_IMAGE_OUT_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY)))) then 
            IMAGE_OUT_WVALID <= ap_const_logic_1;
        else 
            IMAGE_OUT_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMAGE_OUT_blk_n_AW_assign_proc : process(m_axi_IMAGE_OUT_AWREADY, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage11, ap_enable_reg_pp4_iter5, ap_CS_fsm_pp4_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage6)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage11)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0)))) then 
            IMAGE_OUT_blk_n_AW <= m_axi_IMAGE_OUT_AWREADY;
        else 
            IMAGE_OUT_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT_blk_n_B_assign_proc : process(m_axi_IMAGE_OUT_BVALID, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage12, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage7)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197)))) then 
            IMAGE_OUT_blk_n_B <= m_axi_IMAGE_OUT_BVALID;
        else 
            IMAGE_OUT_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    IMAGE_OUT_blk_n_W_assign_proc : process(m_axi_IMAGE_OUT_WREADY, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage12, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage7)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage12)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197)))) then 
            IMAGE_OUT_blk_n_W <= m_axi_IMAGE_OUT_WREADY;
        else 
            IMAGE_OUT_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_pp4_stage10 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_pp4_stage11 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_pp4_stage12 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_pp4_stage2 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_pp4_stage3 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_pp4_stage4 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_pp4_stage5 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_pp4_stage6 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_pp4_stage7 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_pp4_stage8 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_pp4_stage9 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state17 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state21 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state25 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state98 <= ap_CS_fsm(30 downto 30);

    ap_condition_1465_assign_proc : process(ap_enable_reg_pp4_iter4, ap_CS_fsm_pp4_stage6, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, IMAGE_OUT_BVALID)
    begin
                ap_condition_1465 <= ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))));
    end process;


    ap_condition_926_assign_proc : process(ap_sig_ioackin_IMAGE_IN0_ARREADY, ap_sig_ioackin_IMAGE_IN1_ARREADY, ap_sig_ioackin_IMAGE_IN2_ARREADY, ap_sig_ioackin_IMAGE_IN3_ARREADY)
    begin
                ap_condition_926 <= not(((ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN0_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN1_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN2_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_IMAGE_IN3_ARREADY)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state98)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state98))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state98)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state98))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_IMAGE_IN0_ARREADY_assign_proc : process(IMAGE_IN0_ARREADY, ap_reg_ioackin_IMAGE_IN0_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN0_ARREADY)) then 
            ap_sig_ioackin_IMAGE_IN0_ARREADY <= IMAGE_IN0_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN0_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_IN1_ARREADY_assign_proc : process(IMAGE_IN1_ARREADY, ap_reg_ioackin_IMAGE_IN1_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN1_ARREADY)) then 
            ap_sig_ioackin_IMAGE_IN1_ARREADY <= IMAGE_IN1_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN1_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_IN2_ARREADY_assign_proc : process(IMAGE_IN2_ARREADY, ap_reg_ioackin_IMAGE_IN2_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN2_ARREADY)) then 
            ap_sig_ioackin_IMAGE_IN2_ARREADY <= IMAGE_IN2_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN2_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_IN3_ARREADY_assign_proc : process(IMAGE_IN3_ARREADY, ap_reg_ioackin_IMAGE_IN3_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_IN3_ARREADY)) then 
            ap_sig_ioackin_IMAGE_IN3_ARREADY <= IMAGE_IN3_ARREADY;
        else 
            ap_sig_ioackin_IMAGE_IN3_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT_AWREADY_assign_proc : process(IMAGE_OUT_AWREADY, ap_reg_ioackin_IMAGE_OUT_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_AWREADY)) then 
            ap_sig_ioackin_IMAGE_OUT_AWREADY <= IMAGE_OUT_AWREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_IMAGE_OUT_WREADY_assign_proc : process(IMAGE_OUT_WREADY, ap_reg_ioackin_IMAGE_OUT_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_IMAGE_OUT_WREADY)) then 
            ap_sig_ioackin_IMAGE_OUT_WREADY <= IMAGE_OUT_WREADY;
        else 
            ap_sig_ioackin_IMAGE_OUT_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    cols_1_fu_931_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(cols_mid2_reg_1206));
    cols_cast1_fu_876_p1 <= std_logic_vector(resize(unsigned(cols_mid2_fu_828_p3),19));
    cols_mid2_fu_828_p3 <= 
        ap_const_lv12_0 when (tmp_8_fu_820_p3(0) = '1') else 
        cols_phi_fu_462_p4;

    cols_phi_fu_462_p4_assign_proc : process(exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage0, cols_reg_458, ap_enable_reg_pp4_iter1, cols_1_reg_1275)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then 
            cols_phi_fu_462_p4 <= cols_1_reg_1275;
        else 
            cols_phi_fu_462_p4 <= cols_reg_458;
        end if; 
    end process;

    exitcond1_fu_664_p2 <= "1" when (indvar1_reg_403 = ap_const_lv11_400) else "0";
    exitcond2_fu_710_p2 <= "1" when (indvar2_reg_414 = ap_const_lv11_400) else "0";
    exitcond3_fu_756_p2 <= "1" when (indvar3_reg_425 = ap_const_lv11_400) else "0";
    exitcond_flatten_fu_802_p2 <= "1" when (indvar_flatten_phi_fu_440_p4 = ap_const_lv17_10000) else "0";
    exitcond_fu_618_p2 <= "1" when (indvar_reg_392 = ap_const_lv11_400) else "0";

    grp_fu_469_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage0, IMAGE_OUT_BVALID, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))))) then 
            grp_fu_469_ce <= ap_const_logic_1;
        else 
            grp_fu_469_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_469_p0_assign_proc : process(ap_enable_reg_pp4_iter4, ap_CS_fsm_pp4_stage4, ap_CS_fsm_pp4_stage0, reg_485, reg_496, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage5, tmp_30_reg_1380)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage4))) then 
            grp_fu_469_p0 <= tmp_30_reg_1380;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5)))) then 
            grp_fu_469_p0 <= reg_496;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage0))) then 
            grp_fu_469_p0 <= reg_485;
        else 
            grp_fu_469_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_472_p0_assign_proc : process(ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, pixelIn0_reg_1255, pixelIn1_reg_1260, ap_CS_fsm_pp4_stage3, pixelIn2_reg_1295, ap_pipeline_reg_pp4_iter2_pixelIn3_reg_1300, ap_CS_fsm_pp4_stage5, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2))) then 
            grp_fu_472_p0 <= ap_pipeline_reg_pp4_iter2_pixelIn3_reg_1300;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5))) then 
            grp_fu_472_p0 <= pixelIn2_reg_1295;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then 
            grp_fu_472_p0 <= pixelIn1_reg_1260;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then 
            grp_fu_472_p0 <= pixelIn0_reg_1255;
        else 
            grp_fu_472_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_475_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage12, ap_CS_fsm_pp4_stage11, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage0, IMAGE_OUT_BVALID, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage5, ap_CS_fsm_pp4_stage10, ap_CS_fsm_pp4_stage8, ap_CS_fsm_pp4_stage9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage10) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage9) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))))) then 
            grp_fu_475_ce <= ap_const_logic_1;
        else 
            grp_fu_475_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_475_opcode_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage12, ap_CS_fsm_pp4_stage11, ap_CS_fsm_pp4_stage0, IMAGE_OUT_BVALID, ap_enable_reg_pp4_iter1, ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197, ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage10, ap_enable_reg_pp4_iter2, ap_CS_fsm_pp4_stage8, ap_CS_fsm_pp4_stage9)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage9)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197)))) then 
            grp_fu_475_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter1_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage10) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter2_exitcond_flatten_reg_1197)))) then 
            grp_fu_475_opcode <= ap_const_lv2_0;
        else 
            grp_fu_475_opcode <= "XX";
        end if; 
    end process;


    grp_fu_475_p0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage12, ap_CS_fsm_pp4_stage11, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp4_stage3, tmp_15_reg_1280, tmp_18_reg_1310, ap_CS_fsm_pp4_stage10, tmp_27_reg_1315, tmp_20_reg_1320, ap_enable_reg_pp4_iter2, tmp_24_reg_1330, tmp_28_reg_1335, ap_CS_fsm_pp4_stage8, tmp_31_reg_1340, ap_CS_fsm_pp4_stage9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage10) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2))) then 
            grp_fu_475_p0 <= tmp_31_reg_1340;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage9))) then 
            grp_fu_475_p0 <= tmp_28_reg_1335;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8))) then 
            grp_fu_475_p0 <= tmp_24_reg_1330;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2))) then 
            grp_fu_475_p0 <= tmp_20_reg_1320;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)))) then 
            grp_fu_475_p0 <= tmp_27_reg_1315;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1)))) then 
            grp_fu_475_p0 <= tmp_18_reg_1310;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1)))) then 
            grp_fu_475_p0 <= tmp_15_reg_1280;
        else 
            grp_fu_475_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_475_p1_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage12, ap_CS_fsm_pp4_stage11, ap_CS_fsm_pp4_stage0, reg_485, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp4_stage3, tmp_19_reg_1305, ap_CS_fsm_pp4_stage10, ap_enable_reg_pp4_iter2, tmp_21_reg_1325, ap_CS_fsm_pp4_stage8, ap_CS_fsm_pp4_stage9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter2) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage9)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage10) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)))) then 
            grp_fu_475_p1 <= tmp_21_reg_1325;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter2)))) then 
            grp_fu_475_p1 <= tmp_19_reg_1305;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1)))) then 
            grp_fu_475_p1 <= reg_485;
        else 
            grp_fu_475_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_479_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage2, ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage12, ap_CS_fsm_pp4_stage11, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage0, IMAGE_OUT_BVALID, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage5, ap_CS_fsm_pp4_stage10, ap_CS_fsm_pp4_stage8, ap_CS_fsm_pp4_stage9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and not(((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)))) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage10) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8) or (ap_const_lv1_1 = ap_CS_fsm_pp4_stage9) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage11) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage12) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (IMAGE_OUT_BVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))))))) then 
            grp_fu_479_ce <= ap_const_logic_1;
        else 
            grp_fu_479_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_479_p0_assign_proc : process(ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage3, tmp_14_reg_1265, tmp_16_reg_1270, ap_CS_fsm_pp4_stage5, ap_CS_fsm_pp4_stage8, tmp_22_reg_1345, tmp_25_reg_1350, tmp_29_reg_1355, tmp_32_reg_1360)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8))) then 
            grp_fu_479_p0 <= tmp_32_reg_1360;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3))) then 
            grp_fu_479_p0 <= tmp_29_reg_1355;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3))) then 
            grp_fu_479_p0 <= tmp_25_reg_1350;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then 
            grp_fu_479_p0 <= tmp_22_reg_1345;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5))) then 
            grp_fu_479_p0 <= tmp_16_reg_1270;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then 
            grp_fu_479_p0 <= tmp_14_reg_1265;
        else 
            grp_fu_479_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_479_p1_assign_proc : process(ap_CS_fsm_pp4_stage7, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage4, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage3, ap_CS_fsm_pp4_stage5, ap_CS_fsm_pp4_stage8)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage6) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage7) and (ap_const_logic_1 = ap_enable_reg_pp4_iter3)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter3) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage8)))) then 
            grp_fu_479_p1 <= ap_const_lv64_3FE0000000000000;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage4) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage5)))) then 
            grp_fu_479_p1 <= ap_const_lv64_4000000000000000;
        else 
            grp_fu_479_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    idx1_fu_936_p3 <= (ap_pipeline_reg_pp4_iter3_tmp_34_reg_1227 & ap_pipeline_reg_pp4_iter3_cols_mid2_reg_1206);
    idx2_fu_900_p2 <= std_logic_vector(unsigned(cols_cast1_fu_876_p1) + unsigned(tmp_7_cast_mid2_fu_872_p1));

    image0_address0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, tmp_44_cast_fu_926_p1, ap_enable_reg_pp0_iter2, tmp_39_fu_659_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then 
            image0_address0 <= tmp_44_cast_fu_926_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            image0_address0 <= tmp_39_fu_659_p1(16 - 1 downto 0);
        else 
            image0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image0_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1101, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_enable_reg_pp4_iter5, ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197, IMAGE_IN0_RVALID, ap_sig_ioackin_IMAGE_OUT_AWREADY, ap_sig_ioackin_IMAGE_OUT_WREADY, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp4_stage1) and not((((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_AWREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp4_iter5) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter5_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY)))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0)))) then 
            image0_ce0 <= ap_const_logic_1;
        else 
            image0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image0_we0_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_1101, IMAGE_IN0_RVALID, ap_pipeline_reg_pp0_iter1_exitcond_reg_1101, ap_enable_reg_pp0_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_1101 = ap_const_lv1_0) and (IMAGE_IN0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_reg_1101)))) then 
            image0_we0 <= ap_const_logic_1;
        else 
            image0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image1_address0_assign_proc : process(ap_CS_fsm_pp4_stage2, ap_enable_reg_pp4_iter0, tmp_44_cast_reg_1238, ap_enable_reg_pp1_iter2, tmp_43_fu_705_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0))) then 
            image1_address0 <= tmp_44_cast_reg_1238(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp1_iter2)) then 
            image1_address0 <= tmp_43_fu_705_p1(16 - 1 downto 0);
        else 
            image1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image1_ce0_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_1125, ap_enable_reg_pp4_iter4, ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage2, IMAGE_IN1_RVALID, ap_sig_ioackin_IMAGE_OUT_WREADY, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp4_stage2) and not(((ap_const_logic_1 = ap_enable_reg_pp4_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp4_iter4_exitcond_flatten_reg_1197) and (ap_const_logic_0 = ap_sig_ioackin_IMAGE_OUT_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0)) or (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)))) then 
            image1_ce0 <= ap_const_logic_1;
        else 
            image1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image1_we0_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_1125, IMAGE_IN1_RVALID, ap_pipeline_reg_pp1_iter1_exitcond1_reg_1125, ap_enable_reg_pp1_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_1125) and (IMAGE_IN1_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond1_reg_1125)))) then 
            image1_we0 <= ap_const_logic_1;
        else 
            image1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image2_address0_assign_proc : process(ap_enable_reg_pp4_iter1, ap_pipeline_reg_pp4_iter1_tmp_44_cast_reg_1238, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp2_iter2, tmp_47_fu_751_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then 
            image2_address0 <= ap_pipeline_reg_pp4_iter1_tmp_44_cast_reg_1238(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter2)) then 
            image2_address0 <= tmp_47_fu_751_p1(16 - 1 downto 0);
        else 
            image2_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image2_ce0_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond2_reg_1149, IMAGE_IN2_RVALID, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2)))) then 
            image2_ce0 <= ap_const_logic_1;
        else 
            image2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image2_we0_assign_proc : process(ap_enable_reg_pp2_iter1, exitcond2_reg_1149, IMAGE_IN2_RVALID, ap_pipeline_reg_pp2_iter1_exitcond2_reg_1149, ap_enable_reg_pp2_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond2_reg_1149) and (IMAGE_IN2_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_exitcond2_reg_1149)))) then 
            image2_we0 <= ap_const_logic_1;
        else 
            image2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image3_address0_assign_proc : process(ap_enable_reg_pp4_iter1, ap_pipeline_reg_pp4_iter1_tmp_44_cast_reg_1238, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp3_iter2, tmp_51_fu_797_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3))) then 
            image3_address0 <= ap_pipeline_reg_pp4_iter1_tmp_44_cast_reg_1238(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp3_iter2)) then 
            image3_address0 <= tmp_51_fu_797_p1(16 - 1 downto 0);
        else 
            image3_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image3_ce0_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond3_reg_1173, IMAGE_IN3_RVALID, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp4_stage3, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp4_stage3)) or (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2)))) then 
            image3_ce0 <= ap_const_logic_1;
        else 
            image3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image3_we0_assign_proc : process(ap_enable_reg_pp3_iter1, exitcond3_reg_1173, IMAGE_IN3_RVALID, ap_pipeline_reg_pp3_iter1_exitcond3_reg_1173, ap_enable_reg_pp3_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond3_reg_1173) and (IMAGE_IN3_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond3_reg_1173)))) then 
            image3_we0 <= ap_const_logic_1;
        else 
            image3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    imageIn0_addr_fu_638_p2 <= std_logic_vector(unsigned(indvar_cast9_fu_630_p1) + unsigned(tmp_1_reg_1093));
    imageIn1_addr_fu_684_p2 <= std_logic_vector(unsigned(indvar1_cast7_fu_676_p1) + unsigned(tmp_1_reg_1093));
    imageIn2_addr_fu_730_p2 <= std_logic_vector(unsigned(indvar2_cast5_fu_722_p1) + unsigned(tmp_1_reg_1093));
    imageIn3_addr_fu_776_p2 <= std_logic_vector(unsigned(indvar3_cast3_fu_768_p1) + unsigned(tmp_1_reg_1093));
    imageOut10_sum1_cast_fu_975_p1 <= std_logic_vector(resize(unsigned(imageOut10_sum1_reg_1390),64));
    imageOut10_sum1_fu_970_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1076) + unsigned(tmp_37_cast_fu_966_p1));
    imageOut10_sum2_cast_fu_993_p1 <= std_logic_vector(resize(unsigned(imageOut10_sum2_reg_1405),64));
    imageOut10_sum2_fu_988_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1076) + unsigned(tmp_38_cast_fu_985_p1));
    imageOut10_sum3_cast_fu_1017_p1 <= std_logic_vector(resize(unsigned(imageOut10_sum3_reg_1415),64));
    imageOut10_sum3_fu_1012_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1076) + unsigned(tmp_40_cast_fu_1008_p1));
    imageOut10_sum_cast_fu_951_p1 <= std_logic_vector(resize(unsigned(imageOut10_sum_reg_1370),64));
    imageOut10_sum_fu_946_p2 <= std_logic_vector(unsigned(tmp_2_cast_reg_1076) + unsigned(tmp_35_cast_fu_942_p1));
    indvar1_cast7_fu_676_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_403),16));
    indvar2_cast5_fu_722_p1 <= std_logic_vector(resize(unsigned(indvar2_reg_414),16));
    indvar3_cast3_fu_768_p1 <= std_logic_vector(resize(unsigned(indvar3_reg_425),16));
    indvar_cast9_fu_630_p1 <= std_logic_vector(resize(unsigned(indvar_reg_392),16));
    indvar_flatten_next_fu_808_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_440_p4) + unsigned(ap_const_lv17_1));

    indvar_flatten_phi_fu_440_p4_assign_proc : process(exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage0, indvar_flatten_reg_436, ap_enable_reg_pp4_iter1, indvar_flatten_next_reg_1201)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then 
            indvar_flatten_phi_fu_440_p4 <= indvar_flatten_next_reg_1201;
        else 
            indvar_flatten_phi_fu_440_p4 <= indvar_flatten_reg_436;
        end if; 
    end process;

    indvar_next1_fu_670_p2 <= std_logic_vector(unsigned(indvar1_reg_403) + unsigned(ap_const_lv11_1));
    indvar_next2_fu_716_p2 <= std_logic_vector(unsigned(indvar2_reg_414) + unsigned(ap_const_lv11_1));
    indvar_next3_fu_762_p2 <= std_logic_vector(unsigned(indvar3_reg_425) + unsigned(ap_const_lv11_1));
    indvar_next_fu_624_p2 <= std_logic_vector(unsigned(indvar_reg_392) + unsigned(ap_const_lv11_1));

    rows1_phi_fu_451_p4_assign_proc : process(exitcond_flatten_reg_1197, ap_CS_fsm_pp4_stage0, rows1_reg_447, ap_enable_reg_pp4_iter1, tmp_5_mid2_v_v_reg_1212)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_1197))) then 
            rows1_phi_fu_451_p4 <= tmp_5_mid2_v_v_reg_1212;
        else 
            rows1_phi_fu_451_p4 <= rows1_reg_447;
        end if; 
    end process;

    rows_1_fu_814_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(rows1_phi_fu_451_p4));
    rows_2_fu_600_p2 <= std_logic_vector(unsigned(rows_reg_381) + unsigned(ap_const_lv7_1));
    tmp_10_fu_854_p1 <= tmp_5_mid2_v_v_fu_836_p3(7 - 1 downto 0);
    tmp_11_cast_fu_913_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_906_p3),18));
    tmp_13_fu_920_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_913_p1) + unsigned(tmp_14_cast_fu_917_p1));
    tmp_14_cast_fu_917_p1 <= std_logic_vector(resize(unsigned(tmp_12_reg_1222),18));
    tmp_1_fu_610_p3 <= (tmp_7_fu_606_p1 & ap_const_lv10_0);
    tmp_2_cast_fu_591_p1 <= std_logic_vector(resize(unsigned(tmp_2_reg_1027),31));
    tmp_35_cast_fu_942_p1 <= std_logic_vector(resize(unsigned(idx1_fu_936_p3),31));
    tmp_35_fu_961_p2 <= (idx1_reg_1365 or ap_const_lv18_1);
    tmp_36_fu_1003_p2 <= (ap_pipeline_reg_pp4_iter4_idx2_reg_1232 or ap_const_lv19_1);
    tmp_37_cast_fu_966_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_961_p2),31));
    tmp_37_fu_634_p1 <= indvar_reg_392(10 - 1 downto 0);
    tmp_38_cast_fu_985_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp4_iter4_idx2_reg_1232),31));
    tmp_38_fu_653_p3 <= (ap_pipeline_reg_pp0_iter1_tmp_9_reg_1115 & ap_pipeline_reg_pp0_iter1_tmp_37_reg_1110);
    tmp_39_fu_659_p1 <= std_logic_vector(resize(unsigned(tmp_38_fu_653_p3),64));
    tmp_3_fu_551_p1 <= std_logic_vector(resize(unsigned(imageIn_reg_1032),64));
    tmp_40_cast_fu_1008_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_1003_p2),31));
    tmp_40_fu_680_p1 <= indvar1_reg_403(10 - 1 downto 0);
    tmp_42_fu_699_p3 <= (ap_pipeline_reg_pp1_iter1_tmp_41_reg_1139 & ap_pipeline_reg_pp1_iter1_tmp_40_reg_1134);
    tmp_43_fu_705_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_699_p3),64));
    tmp_44_cast_fu_926_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_920_p2),64));
    tmp_44_fu_726_p1 <= indvar2_reg_414(10 - 1 downto 0);
    tmp_46_fu_745_p3 <= (ap_pipeline_reg_pp2_iter1_tmp_45_reg_1163 & ap_pipeline_reg_pp2_iter1_tmp_44_reg_1158);
    tmp_47_fu_751_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_745_p3),64));
    tmp_48_fu_772_p1 <= indvar3_reg_425(10 - 1 downto 0);
    tmp_4_fu_561_p1 <= std_logic_vector(resize(unsigned(imageIn4_reg_1037),64));
    tmp_50_fu_791_p3 <= (ap_pipeline_reg_pp3_iter1_tmp_49_reg_1187 & ap_pipeline_reg_pp3_iter1_tmp_48_reg_1182);
    tmp_51_fu_797_p1 <= std_logic_vector(resize(unsigned(tmp_50_fu_791_p3),64));
    tmp_5_fu_571_p1 <= std_logic_vector(resize(unsigned(imageIn5_reg_1042),64));
    tmp_5_mid2_v_v_fu_836_p3 <= 
        rows_1_fu_814_p2 when (tmp_8_fu_820_p3(0) = '1') else 
        rows1_phi_fu_451_p4;
    tmp_6_fu_581_p1 <= std_logic_vector(resize(unsigned(imageIn6_reg_1047),64));
    tmp_7_cast_mid2_fu_872_p1 <= std_logic_vector(resize(unsigned(tmp_7_cast_mid2_v_fu_866_p2),19));
    tmp_7_cast_mid2_v_fu_866_p2 <= (tmp_7_cast_mid2_v_v_fu_858_p3 or ap_const_lv18_800);
    tmp_7_cast_mid2_v_v_fu_858_p3 <= (tmp_10_fu_854_p1 & ap_const_lv11_0);
    tmp_7_fu_606_p1 <= rows_reg_381(6 - 1 downto 0);
    tmp_8_fu_820_p3 <= cols_phi_fu_462_p4(11 downto 11);
    tmp_fu_594_p2 <= "1" when (rows_reg_381 = ap_const_lv7_40) else "0";
    tmp_s_fu_906_p3 <= (tmp_5_mid2_v_reg_1217 & ap_const_lv10_0);
end behav;
