// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XSIMONS_IDWT_H
#define XSIMONS_IDWT_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xsimons_idwt_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_bus_BaseAddress;
} XSimons_idwt_Config;
#endif

typedef struct {
    u32 Control_bus_BaseAddress;
    u32 IsReady;
} XSimons_idwt;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XSimons_idwt_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XSimons_idwt_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XSimons_idwt_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XSimons_idwt_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XSimons_idwt_Initialize(XSimons_idwt *InstancePtr, u16 DeviceId);
XSimons_idwt_Config* XSimons_idwt_LookupConfig(u16 DeviceId);
int XSimons_idwt_CfgInitialize(XSimons_idwt *InstancePtr, XSimons_idwt_Config *ConfigPtr);
#else
int XSimons_idwt_Initialize(XSimons_idwt *InstancePtr, const char* InstanceName);
int XSimons_idwt_Release(XSimons_idwt *InstancePtr);
#endif

void XSimons_idwt_Start(XSimons_idwt *InstancePtr);
u32 XSimons_idwt_IsDone(XSimons_idwt *InstancePtr);
u32 XSimons_idwt_IsIdle(XSimons_idwt *InstancePtr);
u32 XSimons_idwt_IsReady(XSimons_idwt *InstancePtr);
void XSimons_idwt_EnableAutoRestart(XSimons_idwt *InstancePtr);
void XSimons_idwt_DisableAutoRestart(XSimons_idwt *InstancePtr);


void XSimons_idwt_InterruptGlobalEnable(XSimons_idwt *InstancePtr);
void XSimons_idwt_InterruptGlobalDisable(XSimons_idwt *InstancePtr);
void XSimons_idwt_InterruptEnable(XSimons_idwt *InstancePtr, u32 Mask);
void XSimons_idwt_InterruptDisable(XSimons_idwt *InstancePtr, u32 Mask);
void XSimons_idwt_InterruptClear(XSimons_idwt *InstancePtr, u32 Mask);
u32 XSimons_idwt_InterruptGetEnabled(XSimons_idwt *InstancePtr);
u32 XSimons_idwt_InterruptGetStatus(XSimons_idwt *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
